{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"chezmoi Manage your dotfiles across multiple diverse machines, securely. The latest version of chezmoi is 2.29.4 ( release notes , release history ). chezmoi helps you manage your personal configuration files (dotfiles, like ~/.gitconfig ) across multiple machines. chezmoi provides many features beyond symlinking or using a bare git repo including: templates (to handle small differences between machines), password manager support (to store your secrets securely), importing files from archives (great for shell and editor plugins), full file encryption (using gpg or age), and running scripts (to handle everything else). With chezmoi, pronounced /\u0283e\u026a mwa/ (shay-moi), you can install chezmoi and your dotfiles from your GitHub dotfiles repo on a new, empty machine with a single command: $ sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply $GITHUB_USERNAME As well as the curl | sh installation, you can install chezmoi with your favorite package manager . Updating your dotfiles on any machine is a single command: $ chezmoi update How do I start with chezmoi? Install chezmoi then read the quick start guide . The user guide covers most common tasks. For a full description, consult the reference . Should I use chezmoi? See what other people think about chezmoi by reading articles, listening to podcasts, and watching videos about chezmoi . Read how chezmoi compares to other dotfile managers . Explore other people's dotfile repos that use chezmoi on GitHub , GitLab , and Codeberg . I like chezmoi. How do I say thanks? Please give chezmoi a star on GitHub . Share chezmoi and, if you're happy to share your public dotfiles repo, then tag your repo with chezmoi . Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :) chezmoi does not accept financial contributions. Instead, please make a donation to a charity or cause of your choice.","title":"chezmoi"},{"location":"#chezmoi","text":"Manage your dotfiles across multiple diverse machines, securely. The latest version of chezmoi is 2.29.4 ( release notes , release history ). chezmoi helps you manage your personal configuration files (dotfiles, like ~/.gitconfig ) across multiple machines. chezmoi provides many features beyond symlinking or using a bare git repo including: templates (to handle small differences between machines), password manager support (to store your secrets securely), importing files from archives (great for shell and editor plugins), full file encryption (using gpg or age), and running scripts (to handle everything else). With chezmoi, pronounced /\u0283e\u026a mwa/ (shay-moi), you can install chezmoi and your dotfiles from your GitHub dotfiles repo on a new, empty machine with a single command: $ sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply $GITHUB_USERNAME As well as the curl | sh installation, you can install chezmoi with your favorite package manager . Updating your dotfiles on any machine is a single command: $ chezmoi update","title":"chezmoi"},{"location":"#how-do-i-start-with-chezmoi","text":"Install chezmoi then read the quick start guide . The user guide covers most common tasks. For a full description, consult the reference .","title":"How do I start with chezmoi?"},{"location":"#should-i-use-chezmoi","text":"See what other people think about chezmoi by reading articles, listening to podcasts, and watching videos about chezmoi . Read how chezmoi compares to other dotfile managers . Explore other people's dotfile repos that use chezmoi on GitHub , GitLab , and Codeberg .","title":"Should I use chezmoi?"},{"location":"#i-like-chezmoi-how-do-i-say-thanks","text":"Please give chezmoi a star on GitHub . Share chezmoi and, if you're happy to share your public dotfiles repo, then tag your repo with chezmoi . Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :) chezmoi does not accept financial contributions. Instead, please make a donation to a charity or cause of your choice.","title":"I like chezmoi. How do I say thanks?"},{"location":"comparison-table/","text":"Comparison table chezmoi dotbot rcm vcsh yadm bare git Distribution Single binary Python package Multiple files Single script or package Single script - Install method Many git submodule Many Many Many Manual Non-root install on bare system \u2705 \u2049\ufe0f \u2049\ufe0f \u2705 \u2705 \u2705 Windows support \u2705 \u2705 \u274c \u274c \u2705 \u2705 Bootstrap requirements None Python, git Perl, git sh, git git git Source repos Single Single Multiple Multiple Single Single dotfiles are... Files Symlinks Files Files Files Files Config file Optional Required Optional None Optional Optional Private files \u2705 \u274c \u274c \u274c \u2705 \u274c Show differences without applying \u2705 \u274c \u274c \u2705 \u2705 \u2705 Whole file encryption \u2705 \u274c \u274c \u274c \u2705 \u274c Password manager integration \u2705 \u274c \u274c \u274c \u274c \u274c Machine-to-machine file differences Templates Alternative files Alternative files Branches Alternative files, templates \u2049\ufe0f Custom variables in templates \u2705 \u274c \u274c \u274c \u274c \u274c Executable files \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 File creation with initial contents \u2705 \u274c \u274c \u2705 \u274c \u274c Externals \u2705 \u274c \u274c \u274c \u274c \u274c Manage partial files \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f File removal \u2705 \u274c \u274c \u2705 \u2705 \u274c Directory creation \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Run scripts \u2705 \u2705 \u2705 \u2705 \u2705 \u274c Run once scripts \u2705 \u274c \u274c \u2705 \u2705 \u274c Machine-to-machine symlink differences \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f Shell completion \u2705 \u274c \u274c \u2705 \u2705 \u2705 Archive import \u2705 \u274c \u274c \u2705 \u274c \u2705 Archive export \u2705 \u274c \u274c \u2705 \u274c \u2705 Implementation language Go Python Perl POSIX Shell Bash C \u2705 Supported, \u2049\ufe0f Possible with significant manual effort, \u274c Not supported For more comparisons, visit dotfiles.github.io/utilities .","title":"Comparison table"},{"location":"comparison-table/#comparison-table","text":"chezmoi dotbot rcm vcsh yadm bare git Distribution Single binary Python package Multiple files Single script or package Single script - Install method Many git submodule Many Many Many Manual Non-root install on bare system \u2705 \u2049\ufe0f \u2049\ufe0f \u2705 \u2705 \u2705 Windows support \u2705 \u2705 \u274c \u274c \u2705 \u2705 Bootstrap requirements None Python, git Perl, git sh, git git git Source repos Single Single Multiple Multiple Single Single dotfiles are... Files Symlinks Files Files Files Files Config file Optional Required Optional None Optional Optional Private files \u2705 \u274c \u274c \u274c \u2705 \u274c Show differences without applying \u2705 \u274c \u274c \u2705 \u2705 \u2705 Whole file encryption \u2705 \u274c \u274c \u274c \u2705 \u274c Password manager integration \u2705 \u274c \u274c \u274c \u274c \u274c Machine-to-machine file differences Templates Alternative files Alternative files Branches Alternative files, templates \u2049\ufe0f Custom variables in templates \u2705 \u274c \u274c \u274c \u274c \u274c Executable files \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 File creation with initial contents \u2705 \u274c \u274c \u2705 \u274c \u274c Externals \u2705 \u274c \u274c \u274c \u274c \u274c Manage partial files \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f File removal \u2705 \u274c \u274c \u2705 \u2705 \u274c Directory creation \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Run scripts \u2705 \u2705 \u2705 \u2705 \u2705 \u274c Run once scripts \u2705 \u274c \u274c \u2705 \u2705 \u274c Machine-to-machine symlink differences \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f Shell completion \u2705 \u274c \u274c \u2705 \u2705 \u2705 Archive import \u2705 \u274c \u274c \u2705 \u274c \u2705 Archive export \u2705 \u274c \u274c \u2705 \u274c \u2705 Implementation language Go Python Perl POSIX Shell Bash C \u2705 Supported, \u2049\ufe0f Possible with significant manual effort, \u274c Not supported For more comparisons, visit dotfiles.github.io/utilities .","title":"Comparison table"},{"location":"install/","text":"Install The latest version of chezmoi is 2.29.4 ( release notes , release history ). One-line package install Install chezmoi with your package manager with a single command: Linux macOS Windows FreeBSD OpenIndiana Alpine Arch NixOS openSUSE Tumbleweed Termux Void apk add chezmoi pacman -S chezmoi nix-env -i chezmoi zypper install chezmoi pkg install chezmoi xbps-install -S chezmoi Homebrew MacPorts Nix brew install chezmoi port install chezmoi nix-env -i chezmoi Chocolatey Scoop choco install chezmoi scoop install chezmoi pkg install chezmoi pkg install application/chezmoi chezmoi is available in many cross-platform package managers: asdf Linuxbrew Nix snap asdf plugin add chezmoi && asdf install chezmoi 2 .29.4 brew install chezmoi nix-env -i chezmoi snap install chezmoi --classic For more packages, see chezmoi on repology.org . One-line binary install Install the correct binary for your operating system and architecture in ./bin with a single command: curl wget PowerShell sh -c \" $( curl -fsLS get.chezmoi.io ) \" sh -c \" $( wget -qO- get.chezmoi.io ) \" ( irm -useb https :// get . chezmoi . io / ps1 ) | powershell -c - Hint If you already have a dotfiles repo using chezmoi on GitHub at https://github.com/$GITHUB_USERNAME/dotfiles then you can install chezmoi and your dotfiles with the single command: sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply $GITHUB_USERNAME Private GitHub repos requires other authentication methods : sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply git@github.com: $GITHUB_USERNAME /dotfiles.git Hint To install the chezmoi binary in a different directory, use the -b option, for example: sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- -b $HOME /.local/bin Download a pre-built Linux package Download a package for your distribution and architecture. deb rpm apk Arch Linux amd64 arm64 armel i386 loong64 mips64 mips64le ppc64 ppc64le riscv64 s390x aarch64 armhfp i686 loong64 mips64 mips64le ppc64 ppc64le s390x riscv64 x86_64 386 amd64 arm arm64 loong64 mips64_hardfloat mips64le_hardfloat ppc64 ppc64le riscv64 s390x 386 amd64 arm arm64 loong64 mips64_hardfloat mips64le_hardfloat ppc64 ppc64le riscv64 s390x Download a pre-built binary Download an archive for your operating system and architecture containing a pre-built binary and shell completions. Linux macOS Windows FreeBSD OpenBSD Illumos Solaris amd64 arm arm64 i386 loong64 mips64 mips64le ppc64 ppc64le riscv64 s390x amd64 (glibc) amd64 (musl) amd64 arm64 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 amd64 Install from source Download, build, and install chezmoi for your system with Go 1.18 or later: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi $ make install-from-git-working-copy Verify your download chezmoi's release process signs the SHA256 checksums of all released assets with cosign . To verify an asset that you have downloaded: Download the checksum file , checksum file signature , and public signing key . $ curl --location --remote-name-all \\ https://github.com/twpayne/chezmoi/releases/download/v2.29.4/chezmoi_2.29.4_checksums.txt \\ https://github.com/twpayne/chezmoi/releases/download/v2.29.4/chezmoi_2.29.4_checksums.txt.sig \\ https://github.com/twpayne/chezmoi/releases/download/v2.29.4/chezmoi_cosign.pub Verify the signature of the checksum file with cosign. $ cosign verify-blob --key = chezmoi_cosign.pub \\ --signature = chezmoi_2.29.4_checksums.txt.sig \\ chezmoi_2.29.4_checksums.txt Important cosign should print Verified OK Verify the that the SHA256 sum of your downloads match the SHA256 sum in the verified checksum file. All your downloads must be in the current directory. Linux macOS $ sha256sum --check chezmoi_2.29.4_checksums.txt --ignore-missing $ shasum --algorithm 256 --check chezmoi_2.29.4_checksums.txt --ignore-missing For more information on chezmoi's release signing process, see the developer documentation on chezmoi's releases .","title":"Install"},{"location":"install/#install","text":"The latest version of chezmoi is 2.29.4 ( release notes , release history ).","title":"Install"},{"location":"install/#one-line-package-install","text":"Install chezmoi with your package manager with a single command: Linux macOS Windows FreeBSD OpenIndiana Alpine Arch NixOS openSUSE Tumbleweed Termux Void apk add chezmoi pacman -S chezmoi nix-env -i chezmoi zypper install chezmoi pkg install chezmoi xbps-install -S chezmoi Homebrew MacPorts Nix brew install chezmoi port install chezmoi nix-env -i chezmoi Chocolatey Scoop choco install chezmoi scoop install chezmoi pkg install chezmoi pkg install application/chezmoi chezmoi is available in many cross-platform package managers: asdf Linuxbrew Nix snap asdf plugin add chezmoi && asdf install chezmoi 2 .29.4 brew install chezmoi nix-env -i chezmoi snap install chezmoi --classic For more packages, see chezmoi on repology.org .","title":"One-line package install"},{"location":"install/#one-line-binary-install","text":"Install the correct binary for your operating system and architecture in ./bin with a single command: curl wget PowerShell sh -c \" $( curl -fsLS get.chezmoi.io ) \" sh -c \" $( wget -qO- get.chezmoi.io ) \" ( irm -useb https :// get . chezmoi . io / ps1 ) | powershell -c - Hint If you already have a dotfiles repo using chezmoi on GitHub at https://github.com/$GITHUB_USERNAME/dotfiles then you can install chezmoi and your dotfiles with the single command: sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply $GITHUB_USERNAME Private GitHub repos requires other authentication methods : sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply git@github.com: $GITHUB_USERNAME /dotfiles.git Hint To install the chezmoi binary in a different directory, use the -b option, for example: sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- -b $HOME /.local/bin","title":"One-line binary install"},{"location":"install/#download-a-pre-built-linux-package","text":"Download a package for your distribution and architecture. deb rpm apk Arch Linux amd64 arm64 armel i386 loong64 mips64 mips64le ppc64 ppc64le riscv64 s390x aarch64 armhfp i686 loong64 mips64 mips64le ppc64 ppc64le s390x riscv64 x86_64 386 amd64 arm arm64 loong64 mips64_hardfloat mips64le_hardfloat ppc64 ppc64le riscv64 s390x 386 amd64 arm arm64 loong64 mips64_hardfloat mips64le_hardfloat ppc64 ppc64le riscv64 s390x","title":"Download a pre-built Linux package"},{"location":"install/#download-a-pre-built-binary","text":"Download an archive for your operating system and architecture containing a pre-built binary and shell completions. Linux macOS Windows FreeBSD OpenBSD Illumos Solaris amd64 arm arm64 i386 loong64 mips64 mips64le ppc64 ppc64le riscv64 s390x amd64 (glibc) amd64 (musl) amd64 arm64 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 arm arm64 i386 amd64 amd64","title":"Download a pre-built binary"},{"location":"install/#install-from-source","text":"Download, build, and install chezmoi for your system with Go 1.18 or later: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi $ make install-from-git-working-copy","title":"Install from source"},{"location":"install/#verify-your-download","text":"chezmoi's release process signs the SHA256 checksums of all released assets with cosign . To verify an asset that you have downloaded: Download the checksum file , checksum file signature , and public signing key . $ curl --location --remote-name-all \\ https://github.com/twpayne/chezmoi/releases/download/v2.29.4/chezmoi_2.29.4_checksums.txt \\ https://github.com/twpayne/chezmoi/releases/download/v2.29.4/chezmoi_2.29.4_checksums.txt.sig \\ https://github.com/twpayne/chezmoi/releases/download/v2.29.4/chezmoi_cosign.pub Verify the signature of the checksum file with cosign. $ cosign verify-blob --key = chezmoi_cosign.pub \\ --signature = chezmoi_2.29.4_checksums.txt.sig \\ chezmoi_2.29.4_checksums.txt Important cosign should print Verified OK Verify the that the SHA256 sum of your downloads match the SHA256 sum in the verified checksum file. All your downloads must be in the current directory. Linux macOS $ sha256sum --check chezmoi_2.29.4_checksums.txt --ignore-missing $ shasum --algorithm 256 --check chezmoi_2.29.4_checksums.txt --ignore-missing For more information on chezmoi's release signing process, see the developer documentation on chezmoi's releases .","title":"Verify your download"},{"location":"license/","text":"License The MIT License (MIT) Copyright (c) 2018-2023 Tom Payne Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"The MIT License (MIT) Copyright (c) 2018-2023 Tom Payne Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"migrating-from-another-dotfile-manager/","text":"Migrating from another dotfile manager Migrate from a dotfile manager that uses symlinks Many dotfile managers replace dotfiles with symbolic links to files in a common directory. If you chezmoi add such a symlink, chezmoi will add the symlink, not the file. To assist with migrating from symlink-based systems, use the --follow option to chezmoi add , for example: $ chezmoi add --follow ~/.bashrc This will tell chezmoi add that the target state of ~/.bashrc is the target of the ~/.bashrc symlink, rather than the symlink itself. When you run chezmoi apply , chezmoi will replace the ~/.bashrc symlink with the file contents.","title":"Migrating from another dotfile manager"},{"location":"migrating-from-another-dotfile-manager/#migrating-from-another-dotfile-manager","text":"","title":"Migrating from another dotfile manager"},{"location":"migrating-from-another-dotfile-manager/#migrate-from-a-dotfile-manager-that-uses-symlinks","text":"Many dotfile managers replace dotfiles with symbolic links to files in a common directory. If you chezmoi add such a symlink, chezmoi will add the symlink, not the file. To assist with migrating from symlink-based systems, use the --follow option to chezmoi add , for example: $ chezmoi add --follow ~/.bashrc This will tell chezmoi add that the target state of ~/.bashrc is the target of the ~/.bashrc symlink, rather than the symlink itself. When you run chezmoi apply , chezmoi will replace the ~/.bashrc symlink with the file contents.","title":"Migrate from a dotfile manager that uses symlinks"},{"location":"quick-start/","text":"Quick start Concepts Roughly speaking, chezmoi stores the desired state of your dotfiles in the directory ~/.local/share/chezmoi . When you run chezmoi apply , chezmoi calculates the desired contents for each of your dotfiles and then makes the minimum changes required to make your dotfiles match your desired state. chezmoi's concepts are described more accurately in the reference manual . Start using chezmoi on your current machine Assuming that you have already installed chezmoi , initialize chezmoi with: $ chezmoi init This will create a new git local repository in ~/.local/share/chezmoi where chezmoi will store its source state. By default, chezmoi only modifies files in the working copy. Manage your first file with chezmoi: $ chezmoi add ~/.bashrc This will copy ~/.bashrc to ~/.local/share/chezmoi/dot_bashrc . Edit the source state: $ chezmoi edit ~/.bashrc This will open ~/.local/share/chezmoi/dot_bashrc in your $EDITOR . Make some changes and save the file. Hint You don't have to use chezmoi edit to edit your dotfiles. See this FAQ entry for more details. See what changes chezmoi would make: $ chezmoi diff Apply the changes: $ chezmoi -v apply All chezmoi commands accept the -v (verbose) flag to print out exactly what changes they will make to the file system, and the -n (dry run) flag to not make any actual changes. The combination -n -v is very useful if you want to see exactly what changes would be made. Next, open a shell in the source directory, to commit your changes: $ chezmoi cd $ git add . $ git commit -m \"Initial commit\" Create a new repository on GitHub called dotfiles and then push your repo: $ git remote add origin https://github.com/ $GITHUB_USERNAME /dotfiles.git $ git branch -M main $ git push -u origin main Hint chezmoi can be configured to automatically add, commit, and push changes to your repo. chezmoi can also be used with GitLab , or BitBucket , Source Hut , or any other git hosting service. Finally, exit the shell in the source directory to return to where you were: $ exit These commands are summarized in this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>L: chezmoi init H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi diff W->>H: chezmoi apply H-->>W: chezmoi cd W->>L: git add W->>L: git commit L->>R: git push W-->>H: exit Using chezmoi across multiple machines On a second machine, initialize chezmoi with your dotfiles repo: $ chezmoi init https://github.com/ $GITHUB_USERNAME /dotfiles.git Hint Private GitHub repos requires other authentication methods : $ chezmoi init git@github.com: $GITHUB_USERNAME /dotfiles.git This will check out the repo and any submodules and optionally create a chezmoi config file for you. Check what changes that chezmoi will make to your home directory by running: $ chezmoi diff If you are happy with the changes that chezmoi will make then run: $ chezmoi apply -v If you are not happy with the changes to a file then either edit it with: $ chezmoi edit $FILE Or, invoke a merge tool (by default vimdiff ) to merge changes between the current contents of the file, the file in your working copy, and the computed contents of the file: $ chezmoi merge $FILE On any machine, you can pull and apply the latest changes from your repo with: $ chezmoi update -v These commands are summarized in this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply W->>W: chezmoi edit <file> W->>W: chezmoi merge <file> R->>H: chezmoi update Set up a new machine with a single command You can install your dotfiles on new machine with a single command: $ chezmoi init --apply https://github.com/ $GITHUB_USERNAME /dotfiles.git If you use GitHub and your dotfiles repo is called dotfiles then this can be shortened to: $ chezmoi init --apply $GITHUB_USERNAME Hint Private GitHub repos requires other authentication methods : chezmoi init --apply git@github.com:$GITHUB_USERNAME/dotfiles.git This command is summarized in this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi init --apply <repo> Next steps For a full list of commands run: $ chezmoi help chezmoi has much more functionality. Good starting points are reading articles about chezmoi adding more dotfiles, and using templates to manage files that vary from machine to machine and retrieve secrets from your password manager. Read the user guide to explore.","title":"Quick start"},{"location":"quick-start/#quick-start","text":"","title":"Quick start"},{"location":"quick-start/#concepts","text":"Roughly speaking, chezmoi stores the desired state of your dotfiles in the directory ~/.local/share/chezmoi . When you run chezmoi apply , chezmoi calculates the desired contents for each of your dotfiles and then makes the minimum changes required to make your dotfiles match your desired state. chezmoi's concepts are described more accurately in the reference manual .","title":"Concepts"},{"location":"quick-start/#start-using-chezmoi-on-your-current-machine","text":"Assuming that you have already installed chezmoi , initialize chezmoi with: $ chezmoi init This will create a new git local repository in ~/.local/share/chezmoi where chezmoi will store its source state. By default, chezmoi only modifies files in the working copy. Manage your first file with chezmoi: $ chezmoi add ~/.bashrc This will copy ~/.bashrc to ~/.local/share/chezmoi/dot_bashrc . Edit the source state: $ chezmoi edit ~/.bashrc This will open ~/.local/share/chezmoi/dot_bashrc in your $EDITOR . Make some changes and save the file. Hint You don't have to use chezmoi edit to edit your dotfiles. See this FAQ entry for more details. See what changes chezmoi would make: $ chezmoi diff Apply the changes: $ chezmoi -v apply All chezmoi commands accept the -v (verbose) flag to print out exactly what changes they will make to the file system, and the -n (dry run) flag to not make any actual changes. The combination -n -v is very useful if you want to see exactly what changes would be made. Next, open a shell in the source directory, to commit your changes: $ chezmoi cd $ git add . $ git commit -m \"Initial commit\" Create a new repository on GitHub called dotfiles and then push your repo: $ git remote add origin https://github.com/ $GITHUB_USERNAME /dotfiles.git $ git branch -M main $ git push -u origin main Hint chezmoi can be configured to automatically add, commit, and push changes to your repo. chezmoi can also be used with GitLab , or BitBucket , Source Hut , or any other git hosting service. Finally, exit the shell in the source directory to return to where you were: $ exit These commands are summarized in this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>L: chezmoi init H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi diff W->>H: chezmoi apply H-->>W: chezmoi cd W->>L: git add W->>L: git commit L->>R: git push W-->>H: exit","title":"Start using chezmoi on your current machine"},{"location":"quick-start/#using-chezmoi-across-multiple-machines","text":"On a second machine, initialize chezmoi with your dotfiles repo: $ chezmoi init https://github.com/ $GITHUB_USERNAME /dotfiles.git Hint Private GitHub repos requires other authentication methods : $ chezmoi init git@github.com: $GITHUB_USERNAME /dotfiles.git This will check out the repo and any submodules and optionally create a chezmoi config file for you. Check what changes that chezmoi will make to your home directory by running: $ chezmoi diff If you are happy with the changes that chezmoi will make then run: $ chezmoi apply -v If you are not happy with the changes to a file then either edit it with: $ chezmoi edit $FILE Or, invoke a merge tool (by default vimdiff ) to merge changes between the current contents of the file, the file in your working copy, and the computed contents of the file: $ chezmoi merge $FILE On any machine, you can pull and apply the latest changes from your repo with: $ chezmoi update -v These commands are summarized in this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply W->>W: chezmoi edit <file> W->>W: chezmoi merge <file> R->>H: chezmoi update","title":"Using chezmoi across multiple machines"},{"location":"quick-start/#set-up-a-new-machine-with-a-single-command","text":"You can install your dotfiles on new machine with a single command: $ chezmoi init --apply https://github.com/ $GITHUB_USERNAME /dotfiles.git If you use GitHub and your dotfiles repo is called dotfiles then this can be shortened to: $ chezmoi init --apply $GITHUB_USERNAME Hint Private GitHub repos requires other authentication methods : chezmoi init --apply git@github.com:$GITHUB_USERNAME/dotfiles.git This command is summarized in this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi init --apply <repo>","title":"Set up a new machine with a single command"},{"location":"quick-start/#next-steps","text":"For a full list of commands run: $ chezmoi help chezmoi has much more functionality. Good starting points are reading articles about chezmoi adding more dotfiles, and using templates to manage files that vary from machine to machine and retrieve secrets from your password manager. Read the user guide to explore.","title":"Next steps"},{"location":"what-does-chezmoi-do/","text":"What does chezmoi do? chezmoi helps you manage your personal configuration files (dotfiles, like ~/.gitconfig ) across multiple machines. chezmoi is helpful if you have spent time customizing the tools you use (e.g. shells, editors, and version control systems) and want to keep machines running different accounts (e.g. home and work) and/or different operating systems (e.g. Linux, macOS, and Windows) in sync, while still being able to easily cope with differences from machine to machine. chezmoi scales from the trivial (e.g. copying a few dotfiles onto a Raspberry Pi, development container, or virtual machine) to complex long-lived multi-machine development environments (e.g. keeping any number of home and work, Linux, macOS, and Windows machines in sync). In all cases you only need to maintain a single source of truth (a single branch in git) and getting started only requires adding a single binary to your machine (which you can do with curl , wget , or scp ). chezmoi has strong support for security, allowing you to manage secrets (e.g. passwords, access tokens, and private keys) securely and seamlessly using a password manager and/or encrypt whole files with your favorite encryption tool. If you do not personalize your configuration or only ever use a single operating system with a single account and none of your dotfiles contain secrets then you don't need chezmoi. Otherwise, read on... What are chezmoi's key features? Flexible You can share as much configuration across machines as you want, while still being able to control machine-specific details.Your dotfiles can be templates (using text/template syntax). Predefined variables allow you to change behavior depending on operating system, architecture, and hostname. chezmoi runs on all commonly-used platforms, like Linux, macOS, and Windows. It also runs on less commonly-used platforms, like FreeBSD, OpenBSD, and Termux. Personal and secure Nothing leaves your machine, unless you want it to. Your configuration remains in a git repo under your control. You can write the configuration file in the format of your choice. chezmoi can retrieve secrets from 1Password , AWS Secrets Manager , Bitwarden , gopass , KeePassXC , Keeper , LastPass , pass , passhole , Vault , Keychain, Keyring , or any command-line utility of your choice. You can encrypt individual files with GnuPG or age . You can checkout your dotfiles repo on as many machines as you want without revealing any secrets to anyone. Transparent chezmoi includes verbose and dry run modes so you can review exactly what changes it will make to your home directory before making them. chezmoi's source format uses only regular files and directories that map one-to-one with the files, directories, and symlinks in your home directory that you choose to manage. If you decide not to use chezmoi in the future, it is easy to move your data elsewhere. Declarative and robust You declare the desired state of files, directories, and symbolic links in your source of truth and chezmoi updates your home directory to match that state. What you want is what you get. chezmoi updates all files and symbolic links atomically. You will never be left with incomplete files that could lock you out, even if the update process is interrupted. Fast and easy to use Using chezmoi feels like using git: the commands are similar and chezmoi runs in fractions of a second. chezmoi makes most day-to-day operations one line commands, including installation, initialization, and keeping your machines up-to-date. chezmoi can pull and apply changes from your dotfiles repo in a single command, and automatically commit and push changes.","title":"What does chezmoi do?"},{"location":"what-does-chezmoi-do/#what-does-chezmoi-do","text":"chezmoi helps you manage your personal configuration files (dotfiles, like ~/.gitconfig ) across multiple machines. chezmoi is helpful if you have spent time customizing the tools you use (e.g. shells, editors, and version control systems) and want to keep machines running different accounts (e.g. home and work) and/or different operating systems (e.g. Linux, macOS, and Windows) in sync, while still being able to easily cope with differences from machine to machine. chezmoi scales from the trivial (e.g. copying a few dotfiles onto a Raspberry Pi, development container, or virtual machine) to complex long-lived multi-machine development environments (e.g. keeping any number of home and work, Linux, macOS, and Windows machines in sync). In all cases you only need to maintain a single source of truth (a single branch in git) and getting started only requires adding a single binary to your machine (which you can do with curl , wget , or scp ). chezmoi has strong support for security, allowing you to manage secrets (e.g. passwords, access tokens, and private keys) securely and seamlessly using a password manager and/or encrypt whole files with your favorite encryption tool. If you do not personalize your configuration or only ever use a single operating system with a single account and none of your dotfiles contain secrets then you don't need chezmoi. Otherwise, read on...","title":"What does chezmoi do?"},{"location":"what-does-chezmoi-do/#what-are-chezmois-key-features","text":"","title":"What are chezmoi's key features?"},{"location":"what-does-chezmoi-do/#flexible","text":"You can share as much configuration across machines as you want, while still being able to control machine-specific details.Your dotfiles can be templates (using text/template syntax). Predefined variables allow you to change behavior depending on operating system, architecture, and hostname. chezmoi runs on all commonly-used platforms, like Linux, macOS, and Windows. It also runs on less commonly-used platforms, like FreeBSD, OpenBSD, and Termux.","title":"Flexible"},{"location":"what-does-chezmoi-do/#personal-and-secure","text":"Nothing leaves your machine, unless you want it to. Your configuration remains in a git repo under your control. You can write the configuration file in the format of your choice. chezmoi can retrieve secrets from 1Password , AWS Secrets Manager , Bitwarden , gopass , KeePassXC , Keeper , LastPass , pass , passhole , Vault , Keychain, Keyring , or any command-line utility of your choice. You can encrypt individual files with GnuPG or age . You can checkout your dotfiles repo on as many machines as you want without revealing any secrets to anyone.","title":"Personal and secure"},{"location":"what-does-chezmoi-do/#transparent","text":"chezmoi includes verbose and dry run modes so you can review exactly what changes it will make to your home directory before making them. chezmoi's source format uses only regular files and directories that map one-to-one with the files, directories, and symlinks in your home directory that you choose to manage. If you decide not to use chezmoi in the future, it is easy to move your data elsewhere.","title":"Transparent"},{"location":"what-does-chezmoi-do/#declarative-and-robust","text":"You declare the desired state of files, directories, and symbolic links in your source of truth and chezmoi updates your home directory to match that state. What you want is what you get. chezmoi updates all files and symbolic links atomically. You will never be left with incomplete files that could lock you out, even if the update process is interrupted.","title":"Declarative and robust"},{"location":"what-does-chezmoi-do/#fast-and-easy-to-use","text":"Using chezmoi feels like using git: the commands are similar and chezmoi runs in fractions of a second. chezmoi makes most day-to-day operations one line commands, including installation, initialization, and keeping your machines up-to-date. chezmoi can pull and apply changes from your dotfiles repo in a single command, and automatically commit and push changes.","title":"Fast and easy to use"},{"location":"why-use-chezmoi/","text":"Why use chezmoi? Why should I use a dotfile manager? Dotfile managers give you the combined benefit of a consistent environment everywhere with an undo command and a restore from backup. As the core of our development environments become increasingly standardized (e.g. using git at both home and work), and we further customize them, at the same time we increasingly work in ephemeral environments like Docker containers, virtual machines, and GitHub Codespaces. In the same way that nobody would use an editor without an undo command, or develop software without a version control system, chezmoi brings the investment that you have made in mastering your tools to every environment that you work in. I already have a system to manage my dotfiles, why should I use chezmoi? Quote I\u2019ve been using Chezmoi for more than a year now, across at least 3 computers simultaneously, and I really love it. Most of all, I love how fast I can configure a new machine when I use it. In just a couple minutes of work, I can kick off a process on a brand-new computer that will set up my dotfiles and install all my usual software so it feels like a computer I\u2019ve been using for years. I also appreciate features like secrets management, which allow me to share my dotfiles while keeping my secrets safe. Overall, I love the way Chezmoi fits so perfectly into the niche of managing dotfiles. \u2014 @mike_kasberg Quote I had initially been turned off when I first encountered [chezmoi], because [chezmoi] seemed overkill for (what appeared to me) a simple task. But the problem of managing a relatively small number of dotfiles across a relatively small number of machines with small differences between them and keeping them up to date proved to be MUCH more complex than I imagined. Copy things around by hand, and then later distributing them via source control got hairy very quickly. I finally realized all those features were absolutely necessary to manage things sanely, and once I took some time to learn how to do things with chezmoi, I have never looked back. \u2014 njt Quote Regular reminder that chezmoi is the best dotfile manager utility I've used and you can too \u2014 @mbbroberg If you're using any of the following methods: A custom shell script. An existing dotfile manager like dotbot , rcm , homesick , vcsh , yadm , or GNU Stow . A bare git repo . Then you've probably run into at least one of the following problems. ...if coping with differences between machines requires extra effort If you want to synchronize your dotfiles across multiple operating systems or distributions, then you may need to manually perform extra steps to cope with differences from machine to machine. You might need to run different commands on different machines, maintain separate per-machine files or branches (with the associated hassle of merging, rebasing, or copying each change), or hope that your custom logic handles the differences correctly. chezmoi uses a single source of truth (a single branch) and a single command that works on every machine. Individual files can be templates to handle machine to machine differences, if needed. ...if you have to keep your dotfiles repo private Quote And regarding dotfiles, I saw that. It's only public dotfiles repos so I have to evaluate my dotfiles history to be sure. I have secrets scanning and more, but it was easier to keep it private for security, I'm ok mostly though. I'm using chezmoi and it's easier now \u2014 @sheldon_hull If your system stores secrets in plain text, then you must be very careful about where you clone your dotfiles. If you clone them on your work machine then anyone with access to your work machine (e.g. your IT department) will have access to your home secrets. If you clone it on your home machine then you risk leaking work secrets. With chezmoi you can store secrets in your password manager or encrypt them, and even store passwords in different ways on different machines. You can clone your dotfiles repository anywhere, and even make your dotfiles repo public, without leaving personal secrets on your work machine or work secrets on your personal machine. ...if you have to maintain your own tool Quote I've offloaded my dotfiles deployment from a homespun shell script to chezmoi. I'm quite happy with this decision. \u2014 @gotgenes Quote I discovered chezmoi and it's pretty cool, just migrated my old custom multi-machine sync dotfile setup and it's so much simpler now in case you're wondering I have written 0 code \u2014 @buritica Quote Chezmoi is like what you might get if you re-wrote my bash script in Go, came up with better solutions than diff for managing config on multiple machines, added in secrets management and other useful dotfile tools, and tweaked and perfected it over years. @mike_kasberg If your system was written by you for your personal use, then it probably has the functionality that you needed when you wrote it. If you need more functionality then you have to implement it yourself. chezmoi includes a huge range of battle-tested functionality out-of-the-box, including dry-run and diff modes, script execution, conflict resolution, Windows support, and much, much more. chezmoi is used by thousands of people and has a rich suite of both unit and integration tests. When you hit the limits of your existing dotfile management system, chezmoi already has a tried-and-tested solution ready for you to use. ...if setting up your dotfiles requires more than one short command If your system is written in a scripting language like Python, Perl, or Ruby, then you also need to install a compatible version of that language's runtime before you can use your system. chezmoi is distributed as a single stand-alone statically-linked binary with no dependencies that you can simply copy onto your machine and run. You don't even need git installed. chezmoi provides one-line installs, pre-built binaries, packages for Linux and BSD distributions, Homebrew formulae, Scoop and Chocolatey support on Windows, and a initial config file generation mechanism to make installing your dotfiles on a new machine as painless as possible.","title":"Why use chezmoi?"},{"location":"why-use-chezmoi/#why-use-chezmoi","text":"","title":"Why use chezmoi?"},{"location":"why-use-chezmoi/#why-should-i-use-a-dotfile-manager","text":"Dotfile managers give you the combined benefit of a consistent environment everywhere with an undo command and a restore from backup. As the core of our development environments become increasingly standardized (e.g. using git at both home and work), and we further customize them, at the same time we increasingly work in ephemeral environments like Docker containers, virtual machines, and GitHub Codespaces. In the same way that nobody would use an editor without an undo command, or develop software without a version control system, chezmoi brings the investment that you have made in mastering your tools to every environment that you work in.","title":"Why should I use a dotfile manager?"},{"location":"why-use-chezmoi/#i-already-have-a-system-to-manage-my-dotfiles-why-should-i-use-chezmoi","text":"Quote I\u2019ve been using Chezmoi for more than a year now, across at least 3 computers simultaneously, and I really love it. Most of all, I love how fast I can configure a new machine when I use it. In just a couple minutes of work, I can kick off a process on a brand-new computer that will set up my dotfiles and install all my usual software so it feels like a computer I\u2019ve been using for years. I also appreciate features like secrets management, which allow me to share my dotfiles while keeping my secrets safe. Overall, I love the way Chezmoi fits so perfectly into the niche of managing dotfiles. \u2014 @mike_kasberg Quote I had initially been turned off when I first encountered [chezmoi], because [chezmoi] seemed overkill for (what appeared to me) a simple task. But the problem of managing a relatively small number of dotfiles across a relatively small number of machines with small differences between them and keeping them up to date proved to be MUCH more complex than I imagined. Copy things around by hand, and then later distributing them via source control got hairy very quickly. I finally realized all those features were absolutely necessary to manage things sanely, and once I took some time to learn how to do things with chezmoi, I have never looked back. \u2014 njt Quote Regular reminder that chezmoi is the best dotfile manager utility I've used and you can too \u2014 @mbbroberg If you're using any of the following methods: A custom shell script. An existing dotfile manager like dotbot , rcm , homesick , vcsh , yadm , or GNU Stow . A bare git repo . Then you've probably run into at least one of the following problems.","title":"I already have a system to manage my dotfiles, why should I use chezmoi?"},{"location":"why-use-chezmoi/#if-coping-with-differences-between-machines-requires-extra-effort","text":"If you want to synchronize your dotfiles across multiple operating systems or distributions, then you may need to manually perform extra steps to cope with differences from machine to machine. You might need to run different commands on different machines, maintain separate per-machine files or branches (with the associated hassle of merging, rebasing, or copying each change), or hope that your custom logic handles the differences correctly. chezmoi uses a single source of truth (a single branch) and a single command that works on every machine. Individual files can be templates to handle machine to machine differences, if needed.","title":"...if coping with differences between machines requires extra effort"},{"location":"why-use-chezmoi/#if-you-have-to-keep-your-dotfiles-repo-private","text":"Quote And regarding dotfiles, I saw that. It's only public dotfiles repos so I have to evaluate my dotfiles history to be sure. I have secrets scanning and more, but it was easier to keep it private for security, I'm ok mostly though. I'm using chezmoi and it's easier now \u2014 @sheldon_hull If your system stores secrets in plain text, then you must be very careful about where you clone your dotfiles. If you clone them on your work machine then anyone with access to your work machine (e.g. your IT department) will have access to your home secrets. If you clone it on your home machine then you risk leaking work secrets. With chezmoi you can store secrets in your password manager or encrypt them, and even store passwords in different ways on different machines. You can clone your dotfiles repository anywhere, and even make your dotfiles repo public, without leaving personal secrets on your work machine or work secrets on your personal machine.","title":"...if you have to keep your dotfiles repo private"},{"location":"why-use-chezmoi/#if-you-have-to-maintain-your-own-tool","text":"Quote I've offloaded my dotfiles deployment from a homespun shell script to chezmoi. I'm quite happy with this decision. \u2014 @gotgenes Quote I discovered chezmoi and it's pretty cool, just migrated my old custom multi-machine sync dotfile setup and it's so much simpler now in case you're wondering I have written 0 code \u2014 @buritica Quote Chezmoi is like what you might get if you re-wrote my bash script in Go, came up with better solutions than diff for managing config on multiple machines, added in secrets management and other useful dotfile tools, and tweaked and perfected it over years. @mike_kasberg If your system was written by you for your personal use, then it probably has the functionality that you needed when you wrote it. If you need more functionality then you have to implement it yourself. chezmoi includes a huge range of battle-tested functionality out-of-the-box, including dry-run and diff modes, script execution, conflict resolution, Windows support, and much, much more. chezmoi is used by thousands of people and has a rich suite of both unit and integration tests. When you hit the limits of your existing dotfile management system, chezmoi already has a tried-and-tested solution ready for you to use.","title":"...if you have to maintain your own tool"},{"location":"why-use-chezmoi/#if-setting-up-your-dotfiles-requires-more-than-one-short-command","text":"If your system is written in a scripting language like Python, Perl, or Ruby, then you also need to install a compatible version of that language's runtime before you can use your system. chezmoi is distributed as a single stand-alone statically-linked binary with no dependencies that you can simply copy onto your machine and run. You don't even need git installed. chezmoi provides one-line installs, pre-built binaries, packages for Linux and BSD distributions, Homebrew formulae, Scoop and Chocolatey support on Windows, and a initial config file generation mechanism to make installing your dotfiles on a new machine as painless as possible.","title":"...if setting up your dotfiles requires more than one short command"},{"location":"developer/architecture/","text":"Architecture This document gives a high-level overview of chezmoi's source code for anyone interested in contributing to chezmoi. You can generate Go documentation for chezmoi's source code with go doc , for example: $ go doc -all -u github.com/twpayne/chezmoi/v2/pkg/chezmoi You can also browse chezmoi's generated documentation online . Directory structure The important directories in chezmoi are: Directory Contents assets/chezmoi.io/docs/ The documentation single source of truth. Help text, examples, and the chezmoi.io website are generated from the files in this directory pkg/chezmoi/ chezmoi's core functionality pkg/cmd/ Code for the chezmoi command pkg/cmd/testdata/scripts/ High-level tests of chezmoi's commands using testscript Key concepts As described in the reference manual , chezmoi evaluates the source state to compute a target state for the destination directory (typically your home directory). It then compares the target state to the actual state of the destination directory and performs any changes necessary to update the destination directory to match the target state. These concepts are represented directly in chezmoi's code. chezmoi uses the generic term entry to describe something that it manages. Entries can be files, directories, symlinks, scripts, amongst other things. pkg/chezmoi/ directory All of chezmoi's interaction with the operating system is abstracted through the System interface. A System includes functionality to read and write files and directories and execute commands. chezmoi makes a distinction between idempotent commands that can be run multiple times without modifying the underlying system and arbitrary commands that may modify the underlying system. The real underlying system is implemented via a RealSystem struct. Other System s are composed on top of this to provide further functionality. For example, the --debug flag is implemented by wrapping the RealSystem with a DebugSystem that logs all calls to the underlying RealSystem . --dry-run is implemented by wrapping the RealSystem with a DryRunSystem that allows reads to pass through but silently discards all writes. The SourceState struct represents a source state, including reading a source state from the source directory, executing templates, applying the source state (i.e. updating a System to match the desired source state), and adding more entries to the source state. Entries in the source state are abstracted by the SourceStateEntry interface implemented by the SourceStateFile and SourceStateDir structs, as the source state only consists of regular files and directories. A SourceStateFile includes a FileAttr struct describing the attributes parsed from its file name. Similarly, a SourceStateDir includes a DirAttr struct describing the directory attributes parsed from a directory name. SourceStateEntry s can compute their target state entries, i.e. what the equivalent entry should be in the target state, abstracted by the TargetStateEntry interface. Actual target state entries include TargetStateFile structs, representing a file with contents and permissions, TargetStateDir structs, representing a directory, TargetStateSymlink for symlinks, TargetStateRemove for entries that should be removed, and TargetStateScript for scripts that should be run. The actual state of an entry in the target state is abstracted via the ActualStateEntry interface, with ActualStateAbsent , ActualStateDir , ActualStateFile , ActualStateSymlink structs implementing this interface. Finally, an EntryState struct represents a serialization of an ActualEntryState for storage in and retrieval from chezmoi's persistent state. It stores a SHA256 of the entry's contents, rather than the full contents, to avoid storing secrets in the persistent state. With these concepts, chezmoi's apply command is effectively: Read the source state from the source directory. For each entry in the source state ( SourceStateEntry ), compute its TargetStateEntry and read its actual state in the destination state ( ActualStateEntry ). If the ActualStateEntry is not equivalent to the TargetStateEntry then apply the minimal set of changes to the ActualStateEntry so that they are equivalent. Furthermore, chezmoi stores the EntryState of each entry that it writes in its persistent state. chezmoi can then detect if a third party has updated a target since chezmoi last wrote it by comparing the actual state entry in the target state with the entry state in the persistent state. pkg/cmd/ directory pkg/cmd/*cmd.go contains the code for each individual command and pkg/cmd/*templatefuncs.go contain the template functions. Commands are defined as methods on the Config struct. The Config struct is large, containing all configuration values read from the config file, command line arguments, and computed and cached values. The Config.persistentPreRunRootE and Config.persistentPostRunRootE methods set up and tear down state for individual commands based on the command's Annotations field. Path handling chezmoi uses separate types for absolute paths ( AbsPath ) and relative paths ( RelPath ) to avoid errors where paths are combined (e.g. joining two absolute paths). A further type SourceRelPath is a relative path within the source directory and handles file and directory attributes. Internally, chezmoi normalizes all paths to use forward slashes with an optional upper-cased Windows volume so they can be compared with string comparisons. Paths read from the user may include tilde ( ~ ) to represent the user's home directory, use forward or backward slashes, and are treated as external paths ( ExtPath ). These are normalized to absolute paths. chezmoi is case-sensitive internally and makes no attempt to handle case-insensitive or case-preserving filesystems. Persistent state Persistent state is treated as a two-level key-value store with the pseudo-structure map[Bucket]map[Key]Value , where Bucket , Key , and Value are all []byte s. The PersistentState interface defines interaction with them. Sometimes temporary persistent states are used. For example, in dry run mode ( --dry-run ) the actual persistent state is copied into a temporary persistent state in memory which remembers writes but does not persist them to disk. Encryption Encryption tools are abstracted by the Encryption interface that contains methods of encrypting and decrypting files and []byte s. Implementations are the AGEEncryption and GPGEncryption structs. A DebugEncryption struct wraps an Encryption interface and logs the methods called. run_once_ and run_onchange_ scripts The execution of a run_once_ script is recorded by storing the SHA256 of its contents in the scriptState bucket in the persistent state. On future invocations the script is only run if no matching contents SHA256 is found in the persistent state. The execution of a run_onchange_ script is recorded by storing its target name in the entryState bucket along with its contents SHA256 sum. On future invocations the script is only run if its contents SHA256 sum has changed, and its contents SHA256 sum is then updated in the persistent state. Testing chezmoi has a mix of, unit, integration, and end-to-end tests. Unit and integration tests use the github.com/stretchr/testify framework. End-to-end tests use github.com/rogpeppe/go-internal/testscript with the test scripts themselves in pkg/cmd/testdata/scripts/$TEST_NAME.txt . You can run individual end-to-end tests with $ go test ./pkg/cmd -run = TestScript/ $TEST_NAME Tests should, if at all possible, run unmodified on all operating systems tested in CI (Linux, macOS, Windows, and FreeBSD). Windows will sometimes need special handling due to its path separator and lack of POSIX-style file permissions.","title":"Architecture"},{"location":"developer/architecture/#architecture","text":"This document gives a high-level overview of chezmoi's source code for anyone interested in contributing to chezmoi. You can generate Go documentation for chezmoi's source code with go doc , for example: $ go doc -all -u github.com/twpayne/chezmoi/v2/pkg/chezmoi You can also browse chezmoi's generated documentation online .","title":"Architecture"},{"location":"developer/architecture/#directory-structure","text":"The important directories in chezmoi are: Directory Contents assets/chezmoi.io/docs/ The documentation single source of truth. Help text, examples, and the chezmoi.io website are generated from the files in this directory pkg/chezmoi/ chezmoi's core functionality pkg/cmd/ Code for the chezmoi command pkg/cmd/testdata/scripts/ High-level tests of chezmoi's commands using testscript","title":"Directory structure"},{"location":"developer/architecture/#key-concepts","text":"As described in the reference manual , chezmoi evaluates the source state to compute a target state for the destination directory (typically your home directory). It then compares the target state to the actual state of the destination directory and performs any changes necessary to update the destination directory to match the target state. These concepts are represented directly in chezmoi's code. chezmoi uses the generic term entry to describe something that it manages. Entries can be files, directories, symlinks, scripts, amongst other things.","title":"Key concepts"},{"location":"developer/architecture/#pkgchezmoi-directory","text":"All of chezmoi's interaction with the operating system is abstracted through the System interface. A System includes functionality to read and write files and directories and execute commands. chezmoi makes a distinction between idempotent commands that can be run multiple times without modifying the underlying system and arbitrary commands that may modify the underlying system. The real underlying system is implemented via a RealSystem struct. Other System s are composed on top of this to provide further functionality. For example, the --debug flag is implemented by wrapping the RealSystem with a DebugSystem that logs all calls to the underlying RealSystem . --dry-run is implemented by wrapping the RealSystem with a DryRunSystem that allows reads to pass through but silently discards all writes. The SourceState struct represents a source state, including reading a source state from the source directory, executing templates, applying the source state (i.e. updating a System to match the desired source state), and adding more entries to the source state. Entries in the source state are abstracted by the SourceStateEntry interface implemented by the SourceStateFile and SourceStateDir structs, as the source state only consists of regular files and directories. A SourceStateFile includes a FileAttr struct describing the attributes parsed from its file name. Similarly, a SourceStateDir includes a DirAttr struct describing the directory attributes parsed from a directory name. SourceStateEntry s can compute their target state entries, i.e. what the equivalent entry should be in the target state, abstracted by the TargetStateEntry interface. Actual target state entries include TargetStateFile structs, representing a file with contents and permissions, TargetStateDir structs, representing a directory, TargetStateSymlink for symlinks, TargetStateRemove for entries that should be removed, and TargetStateScript for scripts that should be run. The actual state of an entry in the target state is abstracted via the ActualStateEntry interface, with ActualStateAbsent , ActualStateDir , ActualStateFile , ActualStateSymlink structs implementing this interface. Finally, an EntryState struct represents a serialization of an ActualEntryState for storage in and retrieval from chezmoi's persistent state. It stores a SHA256 of the entry's contents, rather than the full contents, to avoid storing secrets in the persistent state. With these concepts, chezmoi's apply command is effectively: Read the source state from the source directory. For each entry in the source state ( SourceStateEntry ), compute its TargetStateEntry and read its actual state in the destination state ( ActualStateEntry ). If the ActualStateEntry is not equivalent to the TargetStateEntry then apply the minimal set of changes to the ActualStateEntry so that they are equivalent. Furthermore, chezmoi stores the EntryState of each entry that it writes in its persistent state. chezmoi can then detect if a third party has updated a target since chezmoi last wrote it by comparing the actual state entry in the target state with the entry state in the persistent state.","title":"pkg/chezmoi/ directory"},{"location":"developer/architecture/#pkgcmd-directory","text":"pkg/cmd/*cmd.go contains the code for each individual command and pkg/cmd/*templatefuncs.go contain the template functions. Commands are defined as methods on the Config struct. The Config struct is large, containing all configuration values read from the config file, command line arguments, and computed and cached values. The Config.persistentPreRunRootE and Config.persistentPostRunRootE methods set up and tear down state for individual commands based on the command's Annotations field.","title":"pkg/cmd/ directory"},{"location":"developer/architecture/#path-handling","text":"chezmoi uses separate types for absolute paths ( AbsPath ) and relative paths ( RelPath ) to avoid errors where paths are combined (e.g. joining two absolute paths). A further type SourceRelPath is a relative path within the source directory and handles file and directory attributes. Internally, chezmoi normalizes all paths to use forward slashes with an optional upper-cased Windows volume so they can be compared with string comparisons. Paths read from the user may include tilde ( ~ ) to represent the user's home directory, use forward or backward slashes, and are treated as external paths ( ExtPath ). These are normalized to absolute paths. chezmoi is case-sensitive internally and makes no attempt to handle case-insensitive or case-preserving filesystems.","title":"Path handling"},{"location":"developer/architecture/#persistent-state","text":"Persistent state is treated as a two-level key-value store with the pseudo-structure map[Bucket]map[Key]Value , where Bucket , Key , and Value are all []byte s. The PersistentState interface defines interaction with them. Sometimes temporary persistent states are used. For example, in dry run mode ( --dry-run ) the actual persistent state is copied into a temporary persistent state in memory which remembers writes but does not persist them to disk.","title":"Persistent state"},{"location":"developer/architecture/#encryption","text":"Encryption tools are abstracted by the Encryption interface that contains methods of encrypting and decrypting files and []byte s. Implementations are the AGEEncryption and GPGEncryption structs. A DebugEncryption struct wraps an Encryption interface and logs the methods called.","title":"Encryption"},{"location":"developer/architecture/#run_once_-and-run_onchange_-scripts","text":"The execution of a run_once_ script is recorded by storing the SHA256 of its contents in the scriptState bucket in the persistent state. On future invocations the script is only run if no matching contents SHA256 is found in the persistent state. The execution of a run_onchange_ script is recorded by storing its target name in the entryState bucket along with its contents SHA256 sum. On future invocations the script is only run if its contents SHA256 sum has changed, and its contents SHA256 sum is then updated in the persistent state.","title":"run_once_ and run_onchange_ scripts"},{"location":"developer/architecture/#testing","text":"chezmoi has a mix of, unit, integration, and end-to-end tests. Unit and integration tests use the github.com/stretchr/testify framework. End-to-end tests use github.com/rogpeppe/go-internal/testscript with the test scripts themselves in pkg/cmd/testdata/scripts/$TEST_NAME.txt . You can run individual end-to-end tests with $ go test ./pkg/cmd -run = TestScript/ $TEST_NAME Tests should, if at all possible, run unmodified on all operating systems tested in CI (Linux, macOS, Windows, and FreeBSD). Windows will sometimes need special handling due to its path separator and lack of POSIX-style file permissions.","title":"Testing"},{"location":"developer/building-on-top-of-chezmoi/","text":"Building on top of chezmoi chezmoi is designed with UNIX-style composibility in mind, and the command line tool is semantically versioned. Building on top of chezmoi should primarily be done by executing the binary with arguments and the standard input and output configured appropriately. The chezmoi dump and chezmoi state commands allows the inspection of chezmoi's internal state. chezmoi's internal functionality is available as the Go module github.com/twpayne/chezmoi/v2 , however there are no guarantees whatsoever about the API stability of this module. The semantic version applies to the command line tool, and not to any Go APIs at any level.","title":"Building on top of chezmoi"},{"location":"developer/building-on-top-of-chezmoi/#building-on-top-of-chezmoi","text":"chezmoi is designed with UNIX-style composibility in mind, and the command line tool is semantically versioned. Building on top of chezmoi should primarily be done by executing the binary with arguments and the standard input and output configured appropriately. The chezmoi dump and chezmoi state commands allows the inspection of chezmoi's internal state. chezmoi's internal functionality is available as the Go module github.com/twpayne/chezmoi/v2 , however there are no guarantees whatsoever about the API stability of this module. The semantic version applies to the command line tool, and not to any Go APIs at any level.","title":"Building on top of chezmoi"},{"location":"developer/contributing-changes/","text":"Contributing changes Bug reports, bug fixes, and documentation improvements are always welcome. Please open an issue or create a pull request with your report, fix, or improvement. If you want to make a more significant change, please first open an issue to discuss the change that you want to make. Dave Cheney gives a good rationale as to why this is important. All changes are made via pull requests. In your pull request, please make sure that: All existing tests pass. You can ensure this by running make test . There are appropriate additional tests that demonstrate that your PR works as intended. The documentation is updated, if necessary. For new features you should add an entry in assets/chezmoi.io/docs/user-guide/ and a complete description in assets/chezmoi.io/docs/reference/ . See website for instructions on how to build and view a local version of the documentation. All generated files are up to date. You can ensure this by running make generate and including any modified files in your commit. The code is correctly formatted, according to gofumpt . You can ensure this by running make format . The code passes golangci-lint . You can ensure this by running make lint . The commit messages follow the conventional commits specification . chezmoi's release notes are generated directly from the commit messages. For trivial or user-invisible changes, please use the prefix chore: . Commits are logically separate, with no merge or \"fixup\" commits. The branch applies cleanly to master .","title":"Contributing changes"},{"location":"developer/contributing-changes/#contributing-changes","text":"Bug reports, bug fixes, and documentation improvements are always welcome. Please open an issue or create a pull request with your report, fix, or improvement. If you want to make a more significant change, please first open an issue to discuss the change that you want to make. Dave Cheney gives a good rationale as to why this is important. All changes are made via pull requests. In your pull request, please make sure that: All existing tests pass. You can ensure this by running make test . There are appropriate additional tests that demonstrate that your PR works as intended. The documentation is updated, if necessary. For new features you should add an entry in assets/chezmoi.io/docs/user-guide/ and a complete description in assets/chezmoi.io/docs/reference/ . See website for instructions on how to build and view a local version of the documentation. All generated files are up to date. You can ensure this by running make generate and including any modified files in your commit. The code is correctly formatted, according to gofumpt . You can ensure this by running make format . The code passes golangci-lint . You can ensure this by running make lint . The commit messages follow the conventional commits specification . chezmoi's release notes are generated directly from the commit messages. For trivial or user-invisible changes, please use the prefix chore: . Commits are logically separate, with no merge or \"fixup\" commits. The branch applies cleanly to master .","title":"Contributing changes"},{"location":"developer/developing-locally/","text":"Developing locally chezmoi is written in Go and development happens on GitHub . chezmoi is a standard Go project, using standard Go tooling. chezmoi requires Go 1.18 or later. Checkout chezmoi: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi Build chezmoi: $ go build Hint If you try to build chezmoi with an unsupported version of Go you will get the error: package github.com/twpayne/chezmoi/v2: build constraints exclude all Go files in /home/twp/src/github.com/twpayne/chezmoi Run all tests: $ go test ./... chezmoi's tests include integration tests with other software. If the other software is not found in $PATH the tests will be skipped. Running the full set of tests requires age , base64 , bash , gpg , perl , python3 , ruby , sed , sha256sum , unzip , xz , and zip . Run chezmoi: $ go run . Run a set of smoketests, including cross-compilation, tests, and linting: $ make smoketest","title":"Developing locally"},{"location":"developer/developing-locally/#developing-locally","text":"chezmoi is written in Go and development happens on GitHub . chezmoi is a standard Go project, using standard Go tooling. chezmoi requires Go 1.18 or later. Checkout chezmoi: $ git clone https://github.com/twpayne/chezmoi.git $ cd chezmoi Build chezmoi: $ go build Hint If you try to build chezmoi with an unsupported version of Go you will get the error: package github.com/twpayne/chezmoi/v2: build constraints exclude all Go files in /home/twp/src/github.com/twpayne/chezmoi Run all tests: $ go test ./... chezmoi's tests include integration tests with other software. If the other software is not found in $PATH the tests will be skipped. Running the full set of tests requires age , base64 , bash , gpg , perl , python3 , ruby , sed , sha256sum , unzip , xz , and zip . Run chezmoi: $ go run . Run a set of smoketests, including cross-compilation, tests, and linting: $ make smoketest","title":"Developing locally"},{"location":"developer/install-script/","text":"Install script chezmoi generates the install script from a single source of truth. You must run $ go generate if your change includes any of the following: Modifications to the install script template. Additions or modifications to the list of supported OSs and architectures. chezmoi's continuous integration verifies that all generated files are up to date. Changes to generated files should be included in the commit that modifies the source of truth.","title":"Install script"},{"location":"developer/install-script/#install-script","text":"chezmoi generates the install script from a single source of truth. You must run $ go generate if your change includes any of the following: Modifications to the install script template. Additions or modifications to the list of supported OSs and architectures. chezmoi's continuous integration verifies that all generated files are up to date. Changes to generated files should be included in the commit that modifies the source of truth.","title":"Install script"},{"location":"developer/packaging/","text":"Packaging If you're packaging chezmoi for an operating system or distribution: chezmoi has no build dependencies other than the standard Go toolchain. chezmoi has no runtime dependencies, but is usually used with git , so many packagers choose to make git an install dependency or recommended package. Please set the version number, git commit, and build time in the binary. This greatly assists debugging when end users report problems or ask for help. You can do this by passing the following flags to go build : -ldflags \"-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE -X main.builtBy=$BUILT_BY\" $VERSION should be the chezmoi version, e.g. 1.7.3 . Any v prefix is optional and will be stripped, so you can pass the git tag in directly. Hint The command git describe --abbrev=0 --tags will return a suitable value for $VERSION . $COMMIT should be the full git commit hash at which chezmoi is built, e.g. 4d678ce6850c9d81c7ab2fe0d8f20c1547688b91 . Hint The assets/scripts/generate-commit.sh script will return a suitable value for $COMMIT . Hint The source archive contains a file called COMMIT containing the commit hash. $DATE should be the date of the build as a UNIX timestamp or in RFC3339 format. Hint The command git show -s --format=%ct HEAD returns the UNIX timestamp of the last commit, e.g. 1636668628 . The command date -u +%Y-%m-%dT%H:%M:%SZ returns the current time in RFC3339 format, e.g. 2019-11-23T18:29:25Z . $BUILT_BY should be a string indicating what system was used to build the binary. Typically it should be the name of your packaging system, e.g. homebrew . Please enable cgo, if possible. chezmoi can be built and run without cgo, but the .chezmoi.username and .chezmoi.group template variables may not be set correctly on some systems. chezmoi includes an upgrade command which attempts to self-upgrade. You can remove this command completely by building chezmoi with the noupgrade build tag. chezmoi includes shell completions in the completions directory. Please include these in the package and install them in the shell-appropriate directory, if possible. If the instructions for installing chezmoi in chezmoi's install guide are absent or incorrect, please open an issue or submit a PR to correct them.","title":"Packaging"},{"location":"developer/packaging/#packaging","text":"If you're packaging chezmoi for an operating system or distribution: chezmoi has no build dependencies other than the standard Go toolchain. chezmoi has no runtime dependencies, but is usually used with git , so many packagers choose to make git an install dependency or recommended package. Please set the version number, git commit, and build time in the binary. This greatly assists debugging when end users report problems or ask for help. You can do this by passing the following flags to go build : -ldflags \"-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE -X main.builtBy=$BUILT_BY\" $VERSION should be the chezmoi version, e.g. 1.7.3 . Any v prefix is optional and will be stripped, so you can pass the git tag in directly. Hint The command git describe --abbrev=0 --tags will return a suitable value for $VERSION . $COMMIT should be the full git commit hash at which chezmoi is built, e.g. 4d678ce6850c9d81c7ab2fe0d8f20c1547688b91 . Hint The assets/scripts/generate-commit.sh script will return a suitable value for $COMMIT . Hint The source archive contains a file called COMMIT containing the commit hash. $DATE should be the date of the build as a UNIX timestamp or in RFC3339 format. Hint The command git show -s --format=%ct HEAD returns the UNIX timestamp of the last commit, e.g. 1636668628 . The command date -u +%Y-%m-%dT%H:%M:%SZ returns the current time in RFC3339 format, e.g. 2019-11-23T18:29:25Z . $BUILT_BY should be a string indicating what system was used to build the binary. Typically it should be the name of your packaging system, e.g. homebrew . Please enable cgo, if possible. chezmoi can be built and run without cgo, but the .chezmoi.username and .chezmoi.group template variables may not be set correctly on some systems. chezmoi includes an upgrade command which attempts to self-upgrade. You can remove this command completely by building chezmoi with the noupgrade build tag. chezmoi includes shell completions in the completions directory. Please include these in the package and install them in the shell-appropriate directory, if possible. If the instructions for installing chezmoi in chezmoi's install guide are absent or incorrect, please open an issue or submit a PR to correct them.","title":"Packaging"},{"location":"developer/releases/","text":"Releases Releases are managed with goreleaser . Testing To build a test release, without publishing, (Ubuntu Linux only) first ensure that the musl-tools and snapcraft packages are installed: $ sudo apt-get install musl-tools snapcraft Then run: $ make test-release Publishing Publish a new release by creating and pushing a tag, for example: $ git tag v1.2.3 $ git push --tags This triggers a GitHub Action that builds and publishes archives, packages, and snaps, creates a new GitHub Release , and deploys the website . Note Publishing Snaps requires a SNAPCRAFT_STORE_CREDENTIALS repository secret . Snapcraft store credentials periodically expire. Create new snapcraft store credentials by running: $ snapcraft export-login --snaps = chezmoi --channels = stable,candidate,beta,edge --acls = package_upload - Note brew automation will automatically detect new releases of chezmoi within a few hours and open a pull request in github.com/Homebrew/homebrew-core to bump the version. If needed, the pull request can be created with: $ brew bump-formula-pr --tag = v1.2.3 chezmoi Note chezmoi is in Scoop 's Main bucket. Scoop's automation will automatically detect new releases within a few hours. Signing chezmoi uses GoReleaser's support for signing to sign the checksums of its release assets with cosign . Details: The cosign private key was generated with cosign v1.12.1 on a private recently-installed Ubuntu 22.04.1 system with a single user and all available updates applied. The private key uses a long (more than 32 character) password generated locally by a password manager. The password-protected private key is stored in chezmoi's public GitHub repo. The private key's password is stored as a GitHub Actions secret and only available to the release step of release job of the main workflow. The cosign public key is included in the release assets and also uploaded to https://chezmoi.io/cosign.pub . Since https://chezmoi.io is served by GitHub pages , it probably has equivalent security to chezmoi's GitHub Releases page , which is also managed by GitHub.","title":"Releases"},{"location":"developer/releases/#releases","text":"Releases are managed with goreleaser .","title":"Releases"},{"location":"developer/releases/#testing","text":"To build a test release, without publishing, (Ubuntu Linux only) first ensure that the musl-tools and snapcraft packages are installed: $ sudo apt-get install musl-tools snapcraft Then run: $ make test-release","title":"Testing"},{"location":"developer/releases/#publishing","text":"Publish a new release by creating and pushing a tag, for example: $ git tag v1.2.3 $ git push --tags This triggers a GitHub Action that builds and publishes archives, packages, and snaps, creates a new GitHub Release , and deploys the website . Note Publishing Snaps requires a SNAPCRAFT_STORE_CREDENTIALS repository secret . Snapcraft store credentials periodically expire. Create new snapcraft store credentials by running: $ snapcraft export-login --snaps = chezmoi --channels = stable,candidate,beta,edge --acls = package_upload - Note brew automation will automatically detect new releases of chezmoi within a few hours and open a pull request in github.com/Homebrew/homebrew-core to bump the version. If needed, the pull request can be created with: $ brew bump-formula-pr --tag = v1.2.3 chezmoi Note chezmoi is in Scoop 's Main bucket. Scoop's automation will automatically detect new releases within a few hours.","title":"Publishing"},{"location":"developer/releases/#signing","text":"chezmoi uses GoReleaser's support for signing to sign the checksums of its release assets with cosign . Details: The cosign private key was generated with cosign v1.12.1 on a private recently-installed Ubuntu 22.04.1 system with a single user and all available updates applied. The private key uses a long (more than 32 character) password generated locally by a password manager. The password-protected private key is stored in chezmoi's public GitHub repo. The private key's password is stored as a GitHub Actions secret and only available to the release step of release job of the main workflow. The cosign public key is included in the release assets and also uploaded to https://chezmoi.io/cosign.pub . Since https://chezmoi.io is served by GitHub pages , it probably has equivalent security to chezmoi's GitHub Releases page , which is also managed by GitHub.","title":"Signing"},{"location":"developer/security/","text":"Security Supported versions Only the most recent version of chezmoi is supported with security updates. Reporting a vulnerability Please report vulnerabilities by opening a GitHub issue or sending an email to twpayne+chezmoi-security@gmail.com .","title":"Security"},{"location":"developer/security/#security","text":"","title":"Security"},{"location":"developer/security/#supported-versions","text":"Only the most recent version of chezmoi is supported with security updates.","title":"Supported versions"},{"location":"developer/security/#reporting-a-vulnerability","text":"Please report vulnerabilities by opening a GitHub issue or sending an email to twpayne+chezmoi-security@gmail.com .","title":"Reporting a vulnerability"},{"location":"developer/using-make/","text":"Building and installing with make chezmoi can be built with GNU make, assuming you have the Go toolchain installed. Running make will build a chezmoi binary in the current directory for the host OS and architecture. To embed version information in the binary and control installation the following variables are available: Variable Example Purpose $VERSION v2.0.0 Set version $COMMIT 3895680a ... Set the git commit at which the code was built $DATE 2019-11-23T18:29:25Z The time of the build $BUILT_BY homebrew The packaging system performing the build $PREFIX /usr Installation prefix $DESTDIR install-root Fake installation root Running make install will install the chezmoi binary in ${DESTDIR}${PREFIX}/bin .","title":"Using make"},{"location":"developer/using-make/#building-and-installing-with-make","text":"chezmoi can be built with GNU make, assuming you have the Go toolchain installed. Running make will build a chezmoi binary in the current directory for the host OS and architecture. To embed version information in the binary and control installation the following variables are available: Variable Example Purpose $VERSION v2.0.0 Set version $COMMIT 3895680a ... Set the git commit at which the code was built $DATE 2019-11-23T18:29:25Z The time of the build $BUILT_BY homebrew The packaging system performing the build $PREFIX /usr Installation prefix $DESTDIR install-root Fake installation root Running make install will install the chezmoi binary in ${DESTDIR}${PREFIX}/bin .","title":"Building and installing with make"},{"location":"developer/website/","text":"Website The website is generated with Material for MkDocs from the contents of the assets/chezmoi.io/docs/ directory. It hosted by GitHub pages from the gh-pages branch . Install Material for MkDocs and the required plugins with: $ pip3 install mkdocs-material mkdocs-mermaid2-plugin mkdocs-redirects mkdocs-simple-hooks Test the website locally by running: $ cd assets/chezmoi.io $ mkdocs serve and visiting https://127.0.0.1:8000/ . Deploy the website with: $ mkdocs gh-deploy","title":"Website"},{"location":"developer/website/#website","text":"The website is generated with Material for MkDocs from the contents of the assets/chezmoi.io/docs/ directory. It hosted by GitHub pages from the gh-pages branch . Install Material for MkDocs and the required plugins with: $ pip3 install mkdocs-material mkdocs-mermaid2-plugin mkdocs-redirects mkdocs-simple-hooks Test the website locally by running: $ cd assets/chezmoi.io $ mkdocs serve and visiting https://127.0.0.1:8000/ . Deploy the website with: $ mkdocs gh-deploy","title":"Website"},{"location":"links/articles-podcasts-and-videos/","text":"Articles, podcasts, and videos Tip Recommended article: Fedora Magazine: Take back your dotfiles with Chezmoi Tip Recommended video: chezmoi: manage your dotfiles across multiple, diverse machines, securely Tip Recommended podcast: Managing Dot Files and an Introduction to Chezmoi See mentions of chezmoi.io on Twitter , chezmoi dotfiles on Twitter , comments mentioning chezmoi on Hacker News , and chezmoi on Reddit . Date Version Format Link 2023-01-22 2.29.3 Text (JP) dotfile manager \u306e chezmoi \u306b\u79fb\u884c\u3057\u3066\u307f\u308b 2023-01-13 2.29.1 Text Making the most out of distrobox and toolbx 2023-01-12 2.29.1 Text (JP) Chezmoi\u3067\u304b\u3093\u305f\u3093\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0dotfiles\u7ba1\u7406\u306e\u30b9\u30b9\u30e1 2023-01-05 2.29.1 Text (JP) \u65e2\u5b58\u306e dotfiles \u3092 chezmoi \u3067\u7ba1\u7406\u3059\u308b 2022-09-28 2.24.0 Text Shit Hot Dotfiles 2022-09-13 2.22.1 Text (IT) Come installare Chezmoi: gestisci in modo sicuro i dotfile su pi\u00f9 macchine 2022-09-13 2.22.1 Video Using chezmoi to automate dotfiles / config files (+ my bashrc) 2022-08-05 2.20.0 Text (CN) \u4f7f\u7528chezmoi\u7ba1\u7406dotfiles 2022-06-11 2.17.1 Text (JP) chezmoi \u3067 Linux \u3068 macOS \u4e21\u65b9\u3067\u4f7f\u3048\u308b dotfiles \u3092\u4f5c\u308b 2022-06-02 2.17.1 Text Local Env as Code: Is it possible yet 2022-05-27 2.17.0 Audio F\u00e9d\u00e9rer une communaut\u00e9 technique autour d'un projet Open Source 2022-05-16 2.16.0 Text Chezmoi for DotFiles 2022-04-27 2.15.1 Video Easily moving Linux installs 2022-04-25 2.15.1 Text Easily moving Linux installs 2022-03-13 2.14.0 Text Tools I love: Chezmoi 2022-03-11 2.14.0 Audio The Real Python Podcast: Episode 101: Tools for Setting Up Python on a New Machine 2022-03-03 2.13.0 Text Local Environment-as-Code: Is It Possible Yet? 2022-02-22 2.12.1 Text (JP) chezmoi \u3092\u4f7f\u3063\u3066 VSCode devcontainer \u5bfe\u5fdc dotfiles \u3092\u4f5c\u308b 2022-02-17 2.12.0 Text (ES) Qu\u00e9 son y c\u00f3mo gestionar archivos dotfiles con chezmoi 2022-02-12 2.11.2 Text How To Manage Dotfiles With Chezmoi 2022-02-02 2.11.0 Text (FR) Controler ses dotfiles en environnement \u00e9ph\u00e9m\u00e8re 2022-02-01 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2022-01-26 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u7ba1\u7406\u3059\u308b 2022-01-12 2.9.5 Text (IT) Come funzionano i miei Mac 2021-12-23 2.9.3 Text Use Chezmoi to guarantee idempotency of terminal 2021-12-20 2.9.3 Text How chezmoi Implements Cross-Platform CI 2021-12-13 2.9.3 Text Managing Dotfiles With Chezmoi 2021-12-08 2.9.3 Video How Go makes chezmoi possible 2021-12-04 2.9.2 Text Advanced features of Chezmoi 2021-12-01 2.9.1 Text Chezmoi 2 2021-11-27 2.8.0 Video (TH) Command \u0e44\u0e23 2021-11-27 : \u0e22\u0e49\u0e32\u0e22 dotfiles \u0e44\u0e1b chezmoi 2021-11-26 2.8.0 Text Weekly Journal 47 - chezmoi, neovim 2021-10-26 2.7.3 Text (RU) \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a 2021-10-25 2.7.3 Text Share credentials across machines using chezmoi and bitwarden 2021-09-18 2.1.2 Audio/text PBS 125 of X \u2014 Chezmoi on Multiple Computers 2021-09-14 2.2.0 Text Managing preference plists under Chezmoi 2021-09-06 2.2.0 Video chezmoi: Organize your dotfiles across multiple computers 2021-09-06 2.2.0 Text chezmoi dotfile management 2021-09-04 2.2.0 Text Configuration Management 2021-09-04 2.1.2 Audio/text PBS 124 of X \u2014 Chezmoi Templates 2021-08-22 2.1.2 Audio/text PBS 123 of X \u2014 Backing up and Syncing Dot Files with Chezmoi 2021-08-08 2.1.2 Audio/text PBS 122 of X \u2014 Managing Dot Files with Chezmoi 2021-08-04 2.1.2 Text (PT) Como instalar o Chezmoi, um gerenciador de dotfiles, no Ubuntu, Linux Mint, Fedora, Debian 2021-07-23 2.1.2 Audio/text PBS 121 of X \u2014 Managing Dot Files and an Introduction to Chezmoi 2021-07-15 2.1.2 Text (CN) \u4f7f\u7528Chezmoi\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-05-14 2.0.12 Text A brief history of my dotfile management 2021-05-12 2.0.12 Text My Dotfiles Story: A Journey to Chezmoi 2021-05-10 2.0.11 Text Development Environment (2021) 2021-04-08 2.0.9 Text (FR) Bienvenue chez moi 2021-04-01 2.0.7 Text ChezMoi 2021-02-17 1.8.11 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2021-02-07 1.8.10 Text (JP) chezmoi\u59cb\u3081\u305f 2021-02-06 1.8.10 Video chezmoi: manage your dotfiles across multiple, diverse machines, securely 2021-01-29 1.8.10 Text (CN) \u7528 Chezmoi \u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-01-12 1.8.10 Text Automating the Setup of a New Mac With All Your Apps, Preferences, and Development Tools 2020-11-06 1.8.8 Text Chezmoi \u2013 Securely Manage dotfiles across multiple machines 2020-11-05 1.8.8 Text Using chezmoi to manage dotfiles 2020-10-05 1.8.6 Text Dotfiles with Chezmoi 2020-10-03 1.8.6 Text Chezmoi Merging 2020-08-13 1.8.3 Text Using BitWarden and Chezmoi to manage SSH keys 2020-08-09 1.8.3 Text Automating and testing dotfiles 2020-08-03 1.8.3 Text Automating a Linux in Windows Dev Setup 2020-07-06 1.8.3 Video Conf42: chezmoi: Manage your dotfiles across multiple machines, securely 2020-07-03 1.8.3 Text Feeling at home in a LXD container 2020-06-15 1.8.2 Text Dotfiles management using chezmoi - How I Use Linux Desktop at Work Part5 2020-04-27 1.8.0 Text Managing my dotfiles with chezmoi 2020-04-20 1.8.0 Text (FR) Gestion des dotfiles et des secrets avec chezmoi 2020-04-19 1.7.19 Text (FR) Git & dotfiles : versionner ses fichiers de configuration 2020-04-16 1.7.19 Text (FR) Chezmoi, visite guid\u00e9e 2020-04-17 1.7.17 Text (CN) \u7528 Chezmoi \u53d6\u56de\u4f60\u7684\u70b9\u6587\u4ef6 2020-04-03 1.7.17 Text Fedora Magazine: Take back your dotfiles with Chezmoi 2020-04-01 1.7.17 Text Managing dotfiles and secret with chezmoi 2020-03-12 1.7.16 Video Managing Dotfiles with ChezMoi 2019-11-20 1.7.2 Audio/video FLOSS weekly episode 556: chezmoi 2019-01-10 0.0.11 Text Linux Fu: The kitchen sync To add your article to this page please either open an issue or submit a pull request that modifies assets/chezmoi.io/docs/links/articles-podcasts-and-videos.md.yaml .","title":"Articles, podcasts, and videos"},{"location":"links/articles-podcasts-and-videos/#articles-podcasts-and-videos","text":"Tip Recommended article: Fedora Magazine: Take back your dotfiles with Chezmoi Tip Recommended video: chezmoi: manage your dotfiles across multiple, diverse machines, securely Tip Recommended podcast: Managing Dot Files and an Introduction to Chezmoi See mentions of chezmoi.io on Twitter , chezmoi dotfiles on Twitter , comments mentioning chezmoi on Hacker News , and chezmoi on Reddit . Date Version Format Link 2023-01-22 2.29.3 Text (JP) dotfile manager \u306e chezmoi \u306b\u79fb\u884c\u3057\u3066\u307f\u308b 2023-01-13 2.29.1 Text Making the most out of distrobox and toolbx 2023-01-12 2.29.1 Text (JP) Chezmoi\u3067\u304b\u3093\u305f\u3093\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0dotfiles\u7ba1\u7406\u306e\u30b9\u30b9\u30e1 2023-01-05 2.29.1 Text (JP) \u65e2\u5b58\u306e dotfiles \u3092 chezmoi \u3067\u7ba1\u7406\u3059\u308b 2022-09-28 2.24.0 Text Shit Hot Dotfiles 2022-09-13 2.22.1 Text (IT) Come installare Chezmoi: gestisci in modo sicuro i dotfile su pi\u00f9 macchine 2022-09-13 2.22.1 Video Using chezmoi to automate dotfiles / config files (+ my bashrc) 2022-08-05 2.20.0 Text (CN) \u4f7f\u7528chezmoi\u7ba1\u7406dotfiles 2022-06-11 2.17.1 Text (JP) chezmoi \u3067 Linux \u3068 macOS \u4e21\u65b9\u3067\u4f7f\u3048\u308b dotfiles \u3092\u4f5c\u308b 2022-06-02 2.17.1 Text Local Env as Code: Is it possible yet 2022-05-27 2.17.0 Audio F\u00e9d\u00e9rer une communaut\u00e9 technique autour d'un projet Open Source 2022-05-16 2.16.0 Text Chezmoi for DotFiles 2022-04-27 2.15.1 Video Easily moving Linux installs 2022-04-25 2.15.1 Text Easily moving Linux installs 2022-03-13 2.14.0 Text Tools I love: Chezmoi 2022-03-11 2.14.0 Audio The Real Python Podcast: Episode 101: Tools for Setting Up Python on a New Machine 2022-03-03 2.13.0 Text Local Environment-as-Code: Is It Possible Yet? 2022-02-22 2.12.1 Text (JP) chezmoi \u3092\u4f7f\u3063\u3066 VSCode devcontainer \u5bfe\u5fdc dotfiles \u3092\u4f5c\u308b 2022-02-17 2.12.0 Text (ES) Qu\u00e9 son y c\u00f3mo gestionar archivos dotfiles con chezmoi 2022-02-12 2.11.2 Text How To Manage Dotfiles With Chezmoi 2022-02-02 2.11.0 Text (FR) Controler ses dotfiles en environnement \u00e9ph\u00e9m\u00e8re 2022-02-01 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2022-01-26 2.10.1 Text (JP) chezmoi \u3067 dotfiles \u3092\u7ba1\u7406\u3059\u308b 2022-01-12 2.9.5 Text (IT) Come funzionano i miei Mac 2021-12-23 2.9.3 Text Use Chezmoi to guarantee idempotency of terminal 2021-12-20 2.9.3 Text How chezmoi Implements Cross-Platform CI 2021-12-13 2.9.3 Text Managing Dotfiles With Chezmoi 2021-12-08 2.9.3 Video How Go makes chezmoi possible 2021-12-04 2.9.2 Text Advanced features of Chezmoi 2021-12-01 2.9.1 Text Chezmoi 2 2021-11-27 2.8.0 Video (TH) Command \u0e44\u0e23 2021-11-27 : \u0e22\u0e49\u0e32\u0e22 dotfiles \u0e44\u0e1b chezmoi 2021-11-26 2.8.0 Text Weekly Journal 47 - chezmoi, neovim 2021-10-26 2.7.3 Text (RU) \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a 2021-10-25 2.7.3 Text Share credentials across machines using chezmoi and bitwarden 2021-09-18 2.1.2 Audio/text PBS 125 of X \u2014 Chezmoi on Multiple Computers 2021-09-14 2.2.0 Text Managing preference plists under Chezmoi 2021-09-06 2.2.0 Video chezmoi: Organize your dotfiles across multiple computers 2021-09-06 2.2.0 Text chezmoi dotfile management 2021-09-04 2.2.0 Text Configuration Management 2021-09-04 2.1.2 Audio/text PBS 124 of X \u2014 Chezmoi Templates 2021-08-22 2.1.2 Audio/text PBS 123 of X \u2014 Backing up and Syncing Dot Files with Chezmoi 2021-08-08 2.1.2 Audio/text PBS 122 of X \u2014 Managing Dot Files with Chezmoi 2021-08-04 2.1.2 Text (PT) Como instalar o Chezmoi, um gerenciador de dotfiles, no Ubuntu, Linux Mint, Fedora, Debian 2021-07-23 2.1.2 Audio/text PBS 121 of X \u2014 Managing Dot Files and an Introduction to Chezmoi 2021-07-15 2.1.2 Text (CN) \u4f7f\u7528Chezmoi\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-05-14 2.0.12 Text A brief history of my dotfile management 2021-05-12 2.0.12 Text My Dotfiles Story: A Journey to Chezmoi 2021-05-10 2.0.11 Text Development Environment (2021) 2021-04-08 2.0.9 Text (FR) Bienvenue chez moi 2021-04-01 2.0.7 Text ChezMoi 2021-02-17 1.8.11 Text (JP) chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2021-02-07 1.8.10 Text (JP) chezmoi\u59cb\u3081\u305f 2021-02-06 1.8.10 Video chezmoi: manage your dotfiles across multiple, diverse machines, securely 2021-01-29 1.8.10 Text (CN) \u7528 Chezmoi \u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-01-12 1.8.10 Text Automating the Setup of a New Mac With All Your Apps, Preferences, and Development Tools 2020-11-06 1.8.8 Text Chezmoi \u2013 Securely Manage dotfiles across multiple machines 2020-11-05 1.8.8 Text Using chezmoi to manage dotfiles 2020-10-05 1.8.6 Text Dotfiles with Chezmoi 2020-10-03 1.8.6 Text Chezmoi Merging 2020-08-13 1.8.3 Text Using BitWarden and Chezmoi to manage SSH keys 2020-08-09 1.8.3 Text Automating and testing dotfiles 2020-08-03 1.8.3 Text Automating a Linux in Windows Dev Setup 2020-07-06 1.8.3 Video Conf42: chezmoi: Manage your dotfiles across multiple machines, securely 2020-07-03 1.8.3 Text Feeling at home in a LXD container 2020-06-15 1.8.2 Text Dotfiles management using chezmoi - How I Use Linux Desktop at Work Part5 2020-04-27 1.8.0 Text Managing my dotfiles with chezmoi 2020-04-20 1.8.0 Text (FR) Gestion des dotfiles et des secrets avec chezmoi 2020-04-19 1.7.19 Text (FR) Git & dotfiles : versionner ses fichiers de configuration 2020-04-16 1.7.19 Text (FR) Chezmoi, visite guid\u00e9e 2020-04-17 1.7.17 Text (CN) \u7528 Chezmoi \u53d6\u56de\u4f60\u7684\u70b9\u6587\u4ef6 2020-04-03 1.7.17 Text Fedora Magazine: Take back your dotfiles with Chezmoi 2020-04-01 1.7.17 Text Managing dotfiles and secret with chezmoi 2020-03-12 1.7.16 Video Managing Dotfiles with ChezMoi 2019-11-20 1.7.2 Audio/video FLOSS weekly episode 556: chezmoi 2019-01-10 0.0.11 Text Linux Fu: The kitchen sync To add your article to this page please either open an issue or submit a pull request that modifies assets/chezmoi.io/docs/links/articles-podcasts-and-videos.md.yaml .","title":"Articles, podcasts, and videos"},{"location":"links/dotfile-repos-using-chezmoi/","text":"Dotfile repos using chezmoi GitHub GitLab","title":"Dotfile repos using chezmoi"},{"location":"links/dotfile-repos-using-chezmoi/#dotfile-repos-using-chezmoi","text":"GitHub GitLab","title":"Dotfile repos using chezmoi"},{"location":"links/related-software/","text":"Related software Editor integration github.com/alker0/chezmoi.vim Intelligent VIM syntax highlighting when editing files in your source directory. Works with both chezmoi edit and editing files directly. github.com/tuh8888/chezmoi.el Convenience functions for interacting with chezmoi in Emacs. github.com/Lilja/vim-chezmoi A plugin for VIM to apply the dotfile you are editing on :w . Other github.com/hussainweb/ansible-role-chezmoi Installs chezmoi on Ubuntu and Debian servers. github.com/joke/asdf-chezmoi chezmoi plugin for asdf version manager. github.com/tcaxle/drapeau An add-on to synchronize your colorschemes across systems and allow easy colorscheme switching using chezmoi templates. github.com/VorpalBlade/chezmoi_modify_manager An add-on to deal with config files that contain a mix of settings and transient state, such as with GUI program settings files also containing recently used files and window positions.","title":"Related software"},{"location":"links/related-software/#related-software","text":"","title":"Related software"},{"location":"links/related-software/#editor-integration","text":"","title":"Editor integration"},{"location":"links/related-software/#githubcomalker0chezmoivim","text":"Intelligent VIM syntax highlighting when editing files in your source directory. Works with both chezmoi edit and editing files directly.","title":"github.com/alker0/chezmoi.vim"},{"location":"links/related-software/#githubcomtuh8888chezmoiel","text":"Convenience functions for interacting with chezmoi in Emacs.","title":"github.com/tuh8888/chezmoi.el"},{"location":"links/related-software/#githubcomliljavim-chezmoi","text":"A plugin for VIM to apply the dotfile you are editing on :w .","title":"github.com/Lilja/vim-chezmoi"},{"location":"links/related-software/#other","text":"","title":"Other"},{"location":"links/related-software/#githubcomhussainwebansible-role-chezmoi","text":"Installs chezmoi on Ubuntu and Debian servers.","title":"github.com/hussainweb/ansible-role-chezmoi"},{"location":"links/related-software/#githubcomjokeasdf-chezmoi","text":"chezmoi plugin for asdf version manager.","title":"github.com/joke/asdf-chezmoi"},{"location":"links/related-software/#githubcomtcaxledrapeau","text":"An add-on to synchronize your colorschemes across systems and allow easy colorscheme switching using chezmoi templates.","title":"github.com/tcaxle/drapeau"},{"location":"links/related-software/#githubcomvorpalbladechezmoi_modify_manager","text":"An add-on to deal with config files that contain a mix of settings and transient state, such as with GUI program settings files also containing recently used files and window positions.","title":"github.com/VorpalBlade/chezmoi_modify_manager"},{"location":"reference/","text":"Reference Manage your dotfiles across multiple machines, securely.","title":"Reference"},{"location":"reference/#reference","text":"Manage your dotfiles across multiple machines, securely.","title":"Reference"},{"location":"reference/application-order/","text":"Application order chezmoi is deterministic in its order of application. The order is: Read the source state. Read the destination state. Compute the target state. Run run_before_ scripts in alphabetical order. Update entries in the target state (files, directories, scripts, symlinks, etc.) in alphabetical order of their target name. Run run_after_ scripts in alphabetical order. Target names are considered after all attributes are stripped. Example Given create_alpha and modify_dot_beta in the source state, .beta will be updated before alpha because .beta sorts before alpha . chezmoi assumes that the source or destination states are not modified while chezmoi is being executed. This assumption permits significant performance improvements, including allowing chezmoi to only read files from the source and destination states if they are needed to compute the target state. chezmoi's behavior when the above assumptions are violated is undefined. For example, using a run_before_ script to update files in the source or destination states violates the assumption that the source and destination states do not change while chezmoi is running.","title":"Application order"},{"location":"reference/application-order/#application-order","text":"chezmoi is deterministic in its order of application. The order is: Read the source state. Read the destination state. Compute the target state. Run run_before_ scripts in alphabetical order. Update entries in the target state (files, directories, scripts, symlinks, etc.) in alphabetical order of their target name. Run run_after_ scripts in alphabetical order. Target names are considered after all attributes are stripped. Example Given create_alpha and modify_dot_beta in the source state, .beta will be updated before alpha because .beta sorts before alpha . chezmoi assumes that the source or destination states are not modified while chezmoi is being executed. This assumption permits significant performance improvements, including allowing chezmoi to only read files from the source and destination states if they are needed to compute the target state. chezmoi's behavior when the above assumptions are violated is undefined. For example, using a run_before_ script to update files in the source or destination states violates the assumption that the source and destination states do not change while chezmoi is running.","title":"Application order"},{"location":"reference/concepts/","text":"Concepts chezmoi computes the target state for the current machine and then updates the destination directory, where: The destination directory is the directory that chezmoi manages, usually your home directory, ~ . A target is a file, directory, or symlink in the destination directory. The destination state is the current state of all the targets in the destination directory. The source state declares the desired state of your home directory, including templates that use machine-specific data. It contains only regular files and directories. The source directory is where chezmoi stores the source state. By default it is ~/.local/share/chezmoi . The config file contains machine-specific data. By default it is ~/.config/chezmoi/chezmoi.toml . The target state is the desired state of the destination directory. It is computed from the source state, the config file, and the destination state. The target state includes regular files and directories, and may also include symbolic links, scripts to be run, and targets to be removed. The working tree is the git working tree. Normally it is the same as the source directory, but can be a parent of the source directory.","title":"Concepts"},{"location":"reference/concepts/#concepts","text":"chezmoi computes the target state for the current machine and then updates the destination directory, where: The destination directory is the directory that chezmoi manages, usually your home directory, ~ . A target is a file, directory, or symlink in the destination directory. The destination state is the current state of all the targets in the destination directory. The source state declares the desired state of your home directory, including templates that use machine-specific data. It contains only regular files and directories. The source directory is where chezmoi stores the source state. By default it is ~/.local/share/chezmoi . The config file contains machine-specific data. By default it is ~/.config/chezmoi/chezmoi.toml . The target state is the desired state of the destination directory. It is computed from the source state, the config file, and the destination state. The target state includes regular files and directories, and may also include symbolic links, scripts to be run, and targets to be removed. The working tree is the git working tree. Normally it is the same as the source directory, but can be a parent of the source directory.","title":"Concepts"},{"location":"reference/release-history/","text":"Release history 2.29.4 (2023-01-24) fix: Revert buggy diff library by @twpayne in #2707 docs: note about actual auth types for GitHub private repos by @Avendattor in #2690 New Contributors @Avendattor made their first contribution in #2690 Full Changelog: v2.29.3...v2.29.4 2.29.3 (2023-01-19) feat: Add --recursive flag to chattr command by @twpayne in #2697 feat: Check config file format in doctor command by @twpayne in #2696 docs: Fix typo in merge user guide by @mumumumu in #2698 fix: Support .zip files with empty internal directories by @szinn in #2701 fix: Only prompt once for KeePassXC password by @twpayne in #2704 fix: Remove problematic username guessing in init command by @twpayne in #2705 New Contributors @mumumumu made their first contribution in #2698 @szinn made their first contribution in #2701 Full Changelog: v2.29.2...v2.29.3 2.29.2 (2023-01-15) chore: Update goreleaser config for v1.14 by @twpayne in #2667 feat: Add keepassxc.prompt config variable by @jcapiitao in #2677 docs: Update documentation on encryption by @twpayne in #2683 chore: Update dependencies by @twpayne in #2679 chore: Fix umask tests by @twpayne in #2688 chore: Update dependencies by @twpayne in #2694 New Contributors @jcapiitao made their first contribution in #2677 Full Changelog: v2.29.1...v2.29.2 2.29.1 (2023-01-02) fix: Fix init --ssh by @twpayne in #2666 Full Changelog: v2.29.0...v2.29.1 2.29.0 (2023-01-01) feat: Allow .chezmoi{external,ignore,remove} files to have a .tmpl suffix by @twpayne in #2632 feat: Add support for source paths in managed command by @twpayne in #2633 chore: Update dependencies by @twpayne in #2634 docs: Fix passphrase-once encryption instructions by @twpayne in #2636 chore: Update dependencies by @twpayne in #2639 chore(deps): bump actions/cache from 3.0.11 to 3.2.2 by @dependabot in #2641 chore(deps): bump github/codeql-action from 2.1.29 to 2.1.37 by @dependabot in #2642 chore(deps): bump goreleaser/goreleaser-action from 3.2.0 to 4.1.0 by @dependabot in #2643 chore(deps): bump actions/setup-go from 3.3.1 to 3.5.0 by @dependabot in #2644 chore(deps): bump dessant/lock-threads from 3.0.0 to 4.0.0 by @dependabot in #2645 feat: Allow cd command to take the destination directory as an argument by @twpayne in #2648 fix: Improve error message when state database cannot be locked by @twpayne in #2651 fix: Fix authentication when git is not installed by @twpayne in #2650 fix: Fix bug where edit --watch only applied the first change by @twpayne in #2654 chore: Miscellaneous updates by @twpayne in #2655 feat: Add hexDecode and hexEncode template functions by @twpayne in #2658 chore(deps): bump actions/checkout from 3.1.0 to 3.2.0 by @dependabot in #2659 Full Changelog: v2.28.0...v2.29.0 2.28.0 (2022-12-18) feat: Add lstat template function by @twpayne in #2616 feat: Add --path-style option to managed and unmanaged commands by @twpayne in #2617 chore: Build with Go 1.19.4 by @twpayne in #2619 feat: Add verification of external checksums by @twpayne in #2621 chore: Update dependencies by @twpayne in #2623 Full Changelog: v2.27.3...v2.28.0 2.27.3 (2022-12-05) chore: Move GitHub Actions off soon-to-be-deprecated Ubuntu 18.04 by @twpayne in #2604 chore(deps): bump golangci/golangci-lint-action from 3.3.0 to 3.3.1 by @dependabot in #2605 chore(deps): bump github.com/Masterminds/sprig/v3 from 3.2.2 to 3.2.3 by @dependabot in #2607 chore(deps): bump reviewdog/action-misspell from 1.12.2 to 1.12.3 by @dependabot in #2606 chore: Update dependencies by @twpayne in #2611 fix: Don't attempt to run empty scripts by @twpayne in #2612 fix: Respect config file umask setting when creating entries by @twpayne in #2613 Full Changelog: v2.27.2...v2.27.3 2.27.2 (2022-11-25) fix: Make re-add command respect --interactive flag by @twpayne in #2569 feat: Add an optional path argument to the cd command by @twpayne in #2579 feat: Make it easier to use non-git VCSes by @twpayne in #2580 fix: Allow underscores in SourceHut usernames by @twpayne in #2582 fix: Respect diff filter in removes with external diff tool by @twpayne in #2592 chore: Release fixes by @twpayne in #2593 chore: Update dependencies by @twpayne in #2596 Full Changelog: v2.27.1...v2.27.2 2.27.1 (2022-11-13) fix: Don't show always scripts in apply --verbose when excluded from diffs by @twpayne in #2565 feat: Remember HTTP username in URL in init command by @twpayne in #2562 chore: Make generation of versioninfo.json work without tags or git repo by @twpayne in #2566 Full Changelog: v2.27.0...v2.27.1 2.27.0 (2022-11-09) fix: Revert cpina/github-action-push-to-another-repository version bump by @bradenhilton in #2527 chore: Install Go in test-website and deploy-website jobs by @twpayne in #2528 feat: Suppress newlines from onepasswordRead by @halostatue in #2532 chore(deps): bump golangci/golangci-lint-action from 3.2.0 to 3.3.0 by @dependabot in #2533 feat: Allow modify_ scripts to be executed as templates by @twpayne in #2529 chore: Blacklist buggy version of github.com/bmatcuk/doublestar/v4 by @twpayne in #2537 chore: Build with Go 1.19.3 by @twpayne in #2541 feat: Add line ending template directive by @twpayne in #2540 feat: Add setValueAtPath template function by @twpayne in #2542 fix: Don't merge non-files in merge-all command by @twpayne in #2543 feat: Add --script-contents flag to diff command by @twpayne in #2544 docs: Add line endings directive documentation by @bradenhilton in #2547 docs: Fix typos in Sourcehut repo patterns by @kjerstadius in #2552 chore: Better handle errors when globbing by @twpayne in #2538 feat: Add cat-config and dump-config commands by @twpayne in #2553 chore: Remove unused field by @twpayne in #2554 chore: Refactor handling of annotations by @twpayne in #2555 feat: Allow prompt*Once template functions to take paths by @twpayne in #2557 fix: Fix exclusion of externals by @twpayne in #2558 chore: Update dependencies by @twpayne in #2559 feat: Add completion template function by @twpayne in #2560 New Contributors @kjerstadius made their first contribution in #2552 Full Changelog: v2.26.0...v2.27.0 2.26.0 (2022-10-31) feat: Improve handling of include and exclude for externals and encrypted files by @twpayne in #2451 feat: Extend --include and --exclude flags to include templates by @twpayne in #2455 feat: Add per-template configurable delimiters by @twpayne in #2457 chore: Fix user guide link in support issue template by @bradenhilton in #2464 chore(deps): bump github/codeql-action from 2.1.26 to 2.1.27 by @dependabot in #2459 docs: Update homepage by @twpayne in #2458 chore(deps): bump dorny/paths-filter from 2.10.2 to 2.11.1 by @dependabot in #2460 chore(deps): bump actions/cache from 3.0.9 to 3.0.11 by @dependabot in #2461 chore(deps): bump sigstore/cosign-installer from 2.7.0 to 2.8.0 by @dependabot in #2462 chore(deps): bump cpina/github-action-push-to-another-repository from 9e487f29582587eeb4837c0552c886bb0644b6b9 to 940a2857e598a6392bd336330b07416c1ae8ea1f by @dependabot in #2466 chore: Update dependencies by @twpayne in #2465 chore(deps): bump actions/checkout from 3.0.2 to 3.1.0 by @dependabot in #2463 chore: Tweak template directive implementation by @twpayne in #2467 chore: Miscellaneous fixes by @twpayne in #2469 feat: Add option to exclude scripts that are always run by @twpayne in #2473 fix: Extend template directives functionality by @halostatue in #2471 chore: Update dependencies by @twpayne in #2474 docs: Add faq entry for templates pre-requisites by @felipecrs in #2476 docs: Add release notes and release history by @twpayne in #2477 docs: Add note on setting .ps1 interpreter to pwsh by @bradenhilton in #2478 chore: Fix comments that start from an incorrect name by @alexandear in #2481 chore: Add package descriptions by @twpayne in #2485 fix: Include git repo external state in state dump output by @twpayne in #2487 docs: Add FAQ entry on snap stdin/stdout redirect bug by @twpayne in #2488 chore: Use fs.ModePerm instead of 0o777 for all permissions by @twpayne in #2489 chore: GitHub Actions fixes by @twpayne in #2492 docs(bitwarden): Correct bitwardenFields example by @choznerol in #2493 feat: Populate VERSIONINFO on Windows builds by @bradenhilton in #2479 chore: Update dependencies by @twpayne in #2494 docs: Remove duplicate words by @bradenhilton in #2497 chore: Improve error messages from git-repo externals by @twpayne in #2501 fix: Construct templateDataMap manually by @halostatue in #2503 feat: Add --recurse-submodules flag to init command by @twpayne in #2511 feat: Add --recurse-submodules flag to update command by @twpayne in #2512 chore: Reorder eqFold template function reference page by @bradenhilton in #2513 chore: Fix refactored --include and --exclude flags by @twpayne in #2514 chore: Add test for .chezmoiignore and scripts by @twpayne in #2515 chore: Update dependencies by @twpayne in #2516 chore: Minor documentation tweaks by @twpayne in #2518 chore: Release improvements by @twpayne in #2517 chore(deps): bump goreleaser/goreleaser-action from 3.1.0 to 3.2.0 by @dependabot in #2519 chore(deps): bump actions/upload-artifact from 3.1.0 to 3.1.1 by @dependabot in #2520 chore(deps): bump actions/setup-go from 3.3.0 to 3.3.1 by @dependabot in #2522 chore(deps): bump github/codeql-action from 2.1.27 to 2.1.29 by @dependabot in #2523 chore(deps): bump sigstore/cosign-installer from 2.8.0 to 2.8.1 by @dependabot in #2521 Full Changelog: v2.25.0...v2.26.0 2.25.0 (2022-10-13) docs: Add FAQ entry on multiple source states by @twpayne in #2391 chore: Separate out test-release step by @twpayne in #2392 chore: Add check for keepassxc-cli version in keepassxcAttachment by @twpayne in #2397 chore: Fix typo in entrytypeset.go by @sm1999 in #2400 chore: Add test that chezmoi apply uses textconv by @twpayne in #2401 fix: Use textconv in interactive diffs by @twpayne in #2402 chore(deps): bump actions/cache from 3.0.8 to 3.0.9 by @dependabot in #2410 chore(deps): bump github/codeql-action from 2.1.21 to 2.1.26 by @dependabot in #2411 feat: Add shell completion for --include and --exclude flags by @twpayne in #2419 chore: Bump Go and golangci-lint versions by @twpayne in #2420 chore: Update dependencies by @twpayne in #2421 chore: Copy github.com/twpayne/go-shell into module by @twpayne in #2422 feat: Add eqFold template function by @bradenhilton in #2409 feat: Add scriptEnv configuration variable by @twpayne in #2423 chore: Set Go version in govulncheck by @twpayne in #2428 chore: Only read .chezmoiroot once by @twpayne in #2431 feat: Sign release assets by @twpayne in #2394 chore: Use build info to set commit and date, if available by @twpayne in #2434 chore: Use ReadDir to find config files and templates by @twpayne in #2435 chore: Use GitHub native changelogs for releases by @twpayne in #2438 feat: Use target paths in automatically generated commit messages by @twpayne in #2439 chore: Automatically deploy website after release by @twpayne in #2437 feat: 1Password account lookup table by @halostatue in #2425 chore: Refactor 1Password account map by @twpayne in #2440 docs: Use get.chezmoi.io for install links by @twpayne in #2441 feat: Add get.chezmoi.io/ps1 by @twpayne in #2443 chore: Fail if multiple config file templates or config files are found by @twpayne in #2444 fix: Make chattr {no,}encrypted decrypt and encrypt source file by @twpayne in #2447 chore: Update dependencies by @twpayne in #2448 feat: Expose template data in environment variables by @twpayne in #2429 chore: Use GitHub output in govulncheck workflow by @twpayne in #2450 Full Changelog: v2.24.0...v2.25.0 2.24.0 (2022-09-25) bb8d5794 docs: Add FAQ entry on --verbose and --debug flags fb595f2c docs: Add link to article 0f58586f docs: Elaborate on once vs onchange attributes b970bc17 feat: Add always/auto/never options to --refresh-externals flag 21e99c72 feat: Add option to suppress warnings a29abcf4 feat: Improve performance of the externals cache da407b60 fix: Avoid double read of source state in merge-all and status commands 1fbe862d fix: Preserve case in user template data 9dda54a5 fix: Respect .chezmoiroot in source-path command with no arguments 2.23.0 (2022-09-19) 6e49147b docs: Add hints about escaping diff and merge args in config file template f1b404d0 docs: Add link to video 2c3a349e docs: Change remote origin from ssh to https 4d686124 docs: Update symlink design question with docs on edit --watch 8b4b8563 feat: Add --progress flag to show progress when downloading externals ccb897c5 feat: Add passhole password manager support 994a0c73 feat: Always set and restore Windows console cf512599 feat: Use bubbletea for user input 8054dffc fix: Don't write file specified by --output atomically 80576f52 fix: Ignore commands when creating archives 83f01eb5 fix: Only read source state if needed in source-path command c1a53e1a fix: Treat git-repo externals as directories of include/exclude purposes 2.22.1 (2022-09-04) 64b9c1fa fix: Fix handling of newlines in comment template function 4950fc33 fix: Make includeTemplate function first search in .chezmoitemplates 2.22.0 (2022-09-01) 6625f291 docs: Add FAQ entry on sharing shell history 097a88c6 docs: Add note on script execution order 3b6edafe docs: Fix a coloring issue that lines and texts in Mermaid diagrams are hardly visible in dark mode 3e6e26d3 feat: Add includeTemplate template function bf5b6740 feat: Add initial fig support 41644bbc feat: Add support for loong64 architecture 7a525b79 fix: Apply changes to directories recursively when editing directories 03a91ca0 fix: Only use quotes if necessary in toIni template function 2.21.1 (2022-08-29) f4be0e07 docs: Add link to package installation 9f207f4f docs: Add summary paragraph c60b4067 feat: Add edit.apply configuration variable 75b0569a feat: Add secret.args configuration variable b59f1278 fix: Detect SSH clones from URL when using builtin git 4919c1ab fix: Fix panic when absolute paths are used in externals 8b420af1 fix: Respect format configuration variable in data, dump, and state commands 2.21.0 (2022-08-23) c8399bc2 docs: Add FAQ entry on init template functions e2ec7c53 docs: Add instructions for using chezmoi with Watchman dc2ec238 docs: Add link to repology.org 4d086c20 docs: Remove unmaintained Guix package 485850fd docs: Use install-from-git-working-copy in installation instructions 9e4629f9 feat: Add --interactive flag 86026221 feat: Add --prompt flag to init command f98264ba feat: Add --prompt* flags to init command 02b89540 feat: Add fromIni template function ffbb3671 feat: Add gitHubLatestTag template function ac0c7593 feat: Add initial --watch flag to edit command 3af5c7fa feat: Add toIni template function db4da31f feat: Improve support for external diff commands 84afa19e fix: Handle .chezmoiroot in init command 75833874 fix: Remove broken symbolic links in exact_ directories 2.20.0 (2022-07-29) 5fdc5807 docs: Add Termux package install instructions 150144e9 docs: Add dark mode option 24db0849 docs: Prioritize package installation over curl | sh installation 199d62e6 feat: Add comment template function c0e2f530 feat: Add generate command to generate install script 4dfd2064 feat: Add onepasswordRead template function 06b212b1 feat: Add promptBoolOnce, promptIntOnce, and promptStringOnce init template functions ebeb8df4 feat: Add replaceAllRegex template function 84e7a939 feat: Make managed command accept destination directory args f8eabef8 feat: Make unmanaged command accept destination directory args 9316c5a6 feat: Track source state origins more precisely 851efe3c fix: Fix dropping of input when prompting for multiple values from piped stdin 2.19.0 (2022-07-17) 47db4540 docs: Add section on muting gpg output 9dea4ea9 feat: Add fromToml and toToml template functions ac6af02d feat: Add support for AWS Secrets Manager 074899d6 feat: Allow dashes in keys in template data in config file 132d1843 fix: Fix FQDN hostname on FreeBSD 03eb6728 fix: Fix forget command when asked to forget an external 304f52ab fix: Fix merge command for encrypted files in subdirectories 50dd19c4 fix: make install creates the bin/ dir if necessary, and uses the unambiguous --target-directory form of install. 2.18.1 (2022-06-23) b944a845 docs: Add CPU cores/threads template 1c607344 docs: Improve documentation of chezmoi's concepts 2ee341c6 feat: Re-enable building of snaps 2.18.0 (2022-06-20) 817d3e7f feat: Stop building snaps\\n ab6bc8d9 feat: Make add command add empty files, remove --empty flag\\n 755e02f4 fix: Don't return an error when the user chooses quit from a prompt\\n b5543295 feat: Implement documented add --prompt flag\\n b95449f8 docs: Remove stray whitespace\\n ebeebcb0 docs: Add extra documentation to autotemplate\\n 991a6307 docs: Clarify what 'source state' means\\n 2421da82 fix: Check .chezmoiversion in init command\\n 25b32fbf feat: Give more context in Windows errors\\n 9605e40f feat: Make --autotemplate escape template markers\\n 2c895411 feat: Support determining FQDN via /etc/myname\\n 281e770a feat: Support multiple GPG recipients\\n cbed7199 feat: Include git working tree state in doctor output\\n 87c1a915 docs: Use modeline to set filetype in VIM\\n 1af05761 feat: Include last modified time of config file in doctor output\\n 44762fdf feat: Add quoteList template function\\n 2bf12108 feat: Add textconv configuration for friendlier binary diffs\\n 814f1f20 docs: Refactor Windows chassisType template\\n 7199cb29 docs: Add link to blog\\n d29344f0 fix: Improve quality of POSIX shell scripts\\n f2f8d87a docs: Add link to blog post\\n 2.17.1 (2022-05-30) 1f92965e docs: Add information about chezmoi_modify_manager 8b78d2bd docs: Add link to podcast fdd29a51 docs: Fix typo in kubeconfig documentation 7d2d6293 docs: Organize related software page into sub-sections 7084bd55 fix: Fix dump command in the presence of config file templates 2d272293 fix: Include git repo commands in dump command output 2.17.0 (2022-05-26) d178db41 feat: Add uid and gid template variables 658be534 feat: Add windowsVersion to builtin template data 21e2666e fix: Parse $EDITOR and $VISUAL environment variables as shell commands 2.16.0 (2022-05-19) e0b3ace7 feat: Add support for Keeper password manager c4a47794 feat: Build for mips64 and mips64le 17c480b2 feat: Build for riscv64 1a63dc28 feat: Complete auto bool, format, and mode flag values 187112da fix: Connect password manager std{in,err} to os.Std{in,err} 7485aeab fix: Don't complete _chezmoi in zsh completion ef2be283 fix: Fix use of slashes in glob on Windows 2.15.4 (2022-05-09) 8168ab95 docs: Add chezmoiexternal related links to user-guide/reference docs a0d699c2 docs: Add example of extracting selected files from external archive 47a29407 docs: Add some additional details to contributing-changes.md 1c11ff13 fix: Fix external archive, sub-directory include, no excludes 2.15.3 (2022-05-08) ccb709c4 docs: Add hint on random access in modify_ scripts b525c504 feat: Add --guess-repo option to init command 2.15.2 (2022-05-01) cbfe3885 docs: Add clarification about all lowercase custom data fields 84ac2e23 docs: Add guide on encrypting files with GPG and a passphrase 8552a4c8 docs: Add links to blog and video 7b83a170 docs: Add troubleshooting entry on scripts on Termux 4de3fdc7 docs: Document workaround for #1574 d5076094 docs: Minor tweaks 956b4493 docs: Use index function to access an item in the example 58f9f451 feat: Add glob template function fe0b6cf8 feat: Build with Go 1.18.1 eaa27b35 fix: Don't cache negative results of path lookups 2.15.1 (2022-04-10) d2974091 docs: Add section on understanding chezmoi's files and directories cd74d0c3 docs: Document KeepassXC with YubiKey limitations f0817a0d docs: Fix path to config file template 462e547e docs: Tidy up KeepassXC reference documentation 6cd2766e feat: Use diff.command for all verbose output 58c458cb fix: Fix apply --verbose when diff.command is set f45b73a7 fix: Fix concurrent map writes on sourcestate.ignoredRelPaths 95d52983 fix: Ignore exit status 1 from external diff commands 2.15.0 (2022-04-03) 2fa910f6 docs: Add command overview d051e7a3 docs: Add link to blog post d2a44173 docs: Add link to podcast ecdb07b6 docs: Adjust documents for 1Password CLI 2.0.0 changes 9b1b5fba docs: Document that the ioreg template function is deprecated 8e7bbde2 docs: Factor out GitHub template functions into a separate section 4cabbc2a docs: Factor out init template functions into a separate section 19e6d008 docs: Factor out password manager functions into separate sections f3ef8be2 docs: Improve FAQ entry on source state filenames cb02477f docs: Improve docs on empty files in chezmoi edit caa91200 docs: Update dconf example as dconf only reads stdin 08138ab8 docs: Use $VARIABLE instead of 3f035a6d feat: Add diff.reverse configuration variable d1374cf8 feat: Add ignored command 38be3850 feat: Add keepassxcAttachment template function 4e6b8438 feat: Build for s390x architecture 523fdb2b fix: Fix one line install instructions for Windows 8d052c0f fix: Fix op signin for 1Password CLI 2.0.0 8910adb4 fix: Fix parsing of multiline KeepassXC attributes a08c8919 fix: Fix use of drives as home directories on Windows b9995091 fix: Prefer id over label for onepasswordDetailsFields template function 2.14.0 (2022-03-09) a3a1e173 docs: Add contributors image 28c2718a docs: Add license to website 538b9824 docs: Add link to article 32c0f02d feat: Add include and exclude patterns to external archives ebfd5b28 feat: Add license command 5a143268 feat: Release raw binaries 2.13.1 (2022-03-04) dd0037b8 feat: Add scriptTempDir config var for temporary scripts 816e5eee feat: Change default Python interpreter to python3 a4d989b2 fix: Allow user and repo to set in install script e2e199bd fix: Fix confusing error message when using builtin git to init over SSH 2.13.0 (2022-02-26) e8ee359c docs: Add link to article 3f36946b docs: Document extracting a single file from an archive 843ba334 docs: Improve scripts user guide 585adb1f feat: Add initial git-repo external type e299d90d feat: Add option to exclude externals 5f39fec6 feat: Add status.exclude configuration variable 24513146 feat: Add verify.exclude configuration variable fd47686c feat: Allow overriding GitHub user in shell installer 08991d12 feat: Enable GNOME Keyring support on FreeBSD 881cb7e7 fix: Correctly cut hostname off at . character 2.12.1 (2022-02-20) 1fbc2ae6 feat: Be more strict about presence of source directory baac6fc2 feat: Support arguments in Windows SHELL environment variable 2.12.0 (2022-02-15) e9342a8d feat: Add target-path command d228a50d feat: add support for xz archives 6228e09c fix: Fix bug where chezmoi init --apply did not configure encryption 2.11.2 (2022-02-03) 13de45fd fix: Disable problematic concurrent source dir read 2.11.1 (2022-02-02) 46c6766d fix: Fix race condition with multiple .chezmoiignore files 2.11.0 (2022-02-02) c1271ff4 feat: Add initial support for 1Password CLI 2.0 86ec4b81 feat: Add remove_ attribute for directories dc919e6b feat: Include removed directories in diff output of external diff command 8a84b310 feat: Make chezmoi's core functionality available as a Go module 2.10.1 (2022-01-23) b4841ec9 fix: Fix add command when parent dir permissions have changed 71ca1f65 fix: Ignore files and directories beginning with . in .chezmoitemplates 2fd7a020 fix: Make data and execute-commands not depend on valid source state 2.10.0 (2022-01-16) 724227ba feat: Add chezmoi.io/get install URL 65b6cb31 feat: Add list command as an alias for managed ed62bbf4 feat: Append / to completed directories 5aca99ad feat: Disable custom completions by default 7cd21aa8 feat: Remove docs command 31298866 feat: Switch to Material for MkDocs for website 2.9.5 (2022-01-05) b9aeae9a feat: Add passFields template function 326b5788 feat: Prompt for 1password password if no session token is set 2b98c149 fix: Fix shell completion for relative paths 35af8627 fix: Make exit template function init only 2.9.4 (2021-12-19) e25d5012 feat: Add exit template function cdac4645 feat: Add secret keyring delete command e2899b81 feat: Improve inconsistent state error with removes 05e94c66 fix: Add missing --value flag to secret keyring set command 5b50963e fix: Avoid panic when unknown URL schemes are used 68fff1c1 fix: Fix include template function on Windows with absolute path 2.9.3 (2021-12-13) 126cb0c4 feat: Add --cache option and .chezmoi.cacheDir template variable 89aec79d feat: Add more intelligent completion of targets, attributes, and docs 66728aa8 feat: Follow symlinks in .chezmoitemplates e1f2d155 fix: Fix .chezmoiversion check when using dev version 2.9.2 (2021-12-02) 8e8ef0f2 fix: Don't mark .chezmoiscripts as suspicious in doctor command a2c5685a fix: Read .chezmoiversion before other files 2.9.1 (2021-11-30) ecb6c1d9 feat: Add .chezmoi.configFile template variable 3560b201 feat: Add .chezmoi.workingTree template variable d70de7ae feat: Extend upgrade command to work on more operating systems d23b428e fix: Check for .chezmoiversion outside .chezmoiroot ccf69713 fix: Fix use of .chezmoiroot in multiple commands 2.9.0 (2021-11-28) 219a09e2 feat: Add .chezmoiscripts directory ec2b92af feat: Add edit.hardlink config var and edit --hardlink flag 7d31ecbf feat: Add fromYaml template function 988fcdcf feat: Add state delete-bucket command ff1e81d9 feat: Add state get-bucket command da41e0fa feat: Add toYaml template function 98b6a393 feat: Apply diff.exclude to all diffs 33c3e979 feat: Make verbose settable in the config file 5672e1f9 fix: .chezmoiremove with * when destDir is / aac0fd6b fix: Handle symlinks in zip archives e7e6932f fix: Respect .chezmoiroot when generating config file 2.8.0 (2021-11-20) 9cbfdf6f feat: Add --persistent-state option for location of persistent state file cbac205c feat: Add --reverse option to diff command dec87894 feat: Add .chezmoi.executable template variable 8a6d4d76 feat: Add .chezmoiroot to allow source state to be subdir of source dir 518313bb feat: Add cache HTTP client to cache downloads in .chezmoiexternal. 8e1d6478 feat: Add gitHubLatestRelease template function ebacee73 feat: Add support for Homebrew on Linux to upgrade command 3a4c1d0b feat: Add upgrade method to doctor command output 90120fe2 feat: Caching the response of the GitHub API 240f7ecd feat: Make .chezmoidata. and .chezmoitemplates available in .chezmoiignore 53cfa6eb fix: Return unparsed gopass output in gopassRaw template func e9e4712a fix: Warn, don't fail, if age version cannot be parsed in doctor command 016da7a5 fix: lookPath panics when file does not exists 2.7.5 (2021-11-07) 2a39175b feat: Add pinentry as an option for reading passwords 823836ce feat: Extend chattr command to change target types bf8a1850 fix: Make chezmoi add command respect .chezmoiignore 2.7.4 (2021-11-02) 9d621f7a feat: Add .chezmoi.args template variable 27938e65 feat: Allow equivalent directory entries in source state and externals 61135287 feat: Create parent directories for externals if needed 83bad0ac fix: Fix upgrade command for non-amd64 packages 2.7.3 (2021-10-23) 5d2fb13e feat: Add Illumos support 14a475d1 feat: Add Solaris support 2.7.2 (2021-10-19) 67e08067 fix: Fix promptString default on Windows 2.7.1 (2021-10-17) 35eb6518 feat: Add default argument to promptBool template function 7e2e64dc feat: Add default argument to promptInt template function 951fc7e4 feat: Add default argument to promptString template function 87033e24 fix: Apply .chezmoiignore to externals 2.7.0 (2021-10-12) 91c91f06 docs: fix .chezmoiignore example 92ce33c1 feat: Add decrypt and encrypt template functions 42e8323f feat: Add merge-all command c8f113ff feat: Add onchange_ attribute for scripts f54deef4 feat: Improve messages and logging when using builtin git init 02abd9a4 fix: Allow create_ entries to be templates 20abba43 fix: Clarify behavior of run_once_ scripts ebc01497 fix: Fix status for onchange scripts 2.6.1 (2021-10-03) 8d9a89b0 feat: Re-enable building with Go 1.16 2.6.0 (2021-10-02) 29464c68 chore(deps): bump assets/chezmoi.io/themes/book c189d22f docs: Improve docs on externals 157b0b70 feat: Add --init flag to all relevant commands 78ae6c69 feat: Add refreshPeriod option to externals 3d18ae89 feat: Make chezmoi edit invoke editor with target filenames 8fda89b2 fix: Fix upgrade command on non-amd64 Linux machines 2.5.1 (2021-09-30) cbc2f1e7 docs: Add FAQ entry on diff colors not working fa09effd docs: fix error in HOWTO guide 55a4b93d feat: Add --init option to update command f42866bc feat: Add working tree config option ( #1459 ) f86d7b55 feat: Make chezmoi edit with no args open working tree ( #1455 ) b7fb2153 fix: Allow modify_ scripts to be encrypted 2.5.0 (2021-09-23) 48b80964 Add Vagrant-based tests to CI d439e7f2 Add doctor check for multiple config files a79ba2f0 Add example to onepasswordItemFields documentation 167638f0 Add filter option for externals ccf78c50 Add how-to entry on managing file permissions but not contents 74c06e49 Add link to podcast 9e26b17c Add readonly_ attribute for files and directories 47936f64 Add support for .chezmoiexternal files in subdirectories 22c3f68d Add support for readonly attribute to chattr command a9094639 Allow the format of external archives to be set explicitly 6f405244 Cache Vagrant Boxes in CI 6ec4d02f Change gitlab link for other people's dotfiles 4f1a9772 Detect archive format from content if needed 99968493 Detect when the source directory is already in a git working copy 4d76d938 Disable GPG tests on Windows 402c8cbe Enable age tests on Windows CI e79bbb14 Expand FAQ entry on build from source errors 0739933a Fix CLI flags not taking precedence over configuration 0bf08f4e Fix more command line flags overriding config vars cbc6b155 Fix permissions for CodeQL analysis 89a66fad Fix permissions in diff output when user sets a stricter umask 0fa5f5a2 Guess format of chezmoi archive from output filename b43e26ec Improve consistency of source state read from externals 188bae94 Improve internal logging infrastructure 47ce7384 Improve logging in Windows CI 717b5d10 Make Makefile more portable a86ca9e2 Merge test-release job into test-ubuntu 0695b0c3 Minor docs fixes 59cfe213 Only create .keep files when adding empty directories e6536275 Only warn if version or commit are not set in doctor command 839703d1 Propagate failures in Vagrant CI scripts ab2fa725 Reduce duplication of Go version in CI 69f6a33f Reduce duplication of versions in build and CI system b5bbe673 Revert \"Disable GPG tests on Windows\" e63d0e73 Separate OS-specific CI jobs 420ec58c Skp whitespace linting of temporary Vagrant files e94cd8b5 Support paths containing spaces in VIM integration 54608764 Tidy up error message when doctor command cannot parse version ea592671 Update Vagrant-based tests eaad1f6a Update dependencies 2.4.0 (2021-09-10) 736aaa1b Add decrypt command 0b2692ac Add doc on detemining whether the machine is a laptop or desktop ed65ef68 Add encrypt command 98b92c23 Add initial --use-builtin-age flag dd116f79 Build with Go 1.17.1 63610a43 Extend init command to guess the user's username for private repos 34ecd673 Fix internal capitalization of age da04181b Simplify internal use of auto bools 2ff41516 Update dependencies 2.3.1 (2021-09-08) 4fa36ee9 Add link to blog post 778fd4c3 Add link to podcast 89fd2382 Add new media links 60703f81 Add onepasswordItemFields template function 57ab1f25 Append path arguments to diff command if not provided by user a761f3fd Append path arguments to merge command if not provided by user 62e02ff1 Bump age to version 1.0.0 8370209c Bump golangci-lint to version 1.42.1 5a51c9e7 Conceal the user's username in doctor command output a318652c Require Go 1.17 to build and log Go version in debug mode 2.3.0 (2021-09-04) 7cee590e Add how-to entry on using private dotfile repos 9e77ea56 Add remove_ attribute ad1c938a Add support for zip archives to .chezmoiexternal 5c61b955 Add support for zip archives to import command 433bdcc5 Add umask check to doctor command 091979d5 Add undocumented --safe=false command line flag 2ff4214c Bump assets/chezmoi.io/themes/book from 50147be to a656d71 01ac1d0d Fix install from source documentation 8ca5448f Improve contributing docs 97a7e0ec Log debug information in chezmoi apply 0a2a40c5 Log version and args on startup in debug mode 767e8347 Remove accidentally unimplemented --remove option 570f91a1 Remove stale FIXMEs 2.2.0 (2021-08-30) c03209f Add .chezmoiexternal for external files and archives 0346200 Add support for encrypted externals 49c34ea Add tests for multiple OSes using Vagrant 08822e2 Check all shell scripts with shellcheck 9a9d2f2 Fix bug when using custom diff tool on a file in a subdirectory 0d82773 Make Makefile more consistent d6f48f4 Pass context when reading source state b06c2a6 Recognize .tbz2 files as archives e946bf5 Reduce test verbosity on Cirrus CI 3b84841 Remove Cirrus CI 434c29f Rename internal variables for consistency 78d52d2 Suppress initial branch name hints from git in chezmoi init 00763d2 Tidy up code structure 021eaf1 Tidy up documentation 4937ea6 Update dependencies a6e3d9a Update media links 2cec38f Update tests for OpenBSD tar output 2.1.6 (2021-08-22) 3c476d9 Add --recursive flag to remove command 461ea4a Add executable check to doctor command 20b323c Add link to podcast and notes bec5350 Add more explicit documentation on config file location 994e633 Add more related software 81094bf Add note on using -- in chattr 70efaab Add test of the output and fromJson template functions a25b911 Add windows/arm builds 137e07e Build with Go 1.17 11d84ed Bump golangci-lint to v1.42.0 6d5f658 Create .keep files when adding directories 4619b09 Fix bug where adding a dir with a trailing slash added it twice 8eef5e4 Fix creation of .keep files when umask is 002 5afe5a2 Improve how-to on diff and merge customization de5cb42 Improve type safety in encryption code f8d7368 Make remove command remove entries from persistent state ed95a58 Miscellaneous Go 1.17 fixes 5b0138a Tidy up suspicious entries list in doctor command dc319c4 Tidy up test scripts 5d2126b Tranparently decrypt files in merge command 2.1.5 (2021-08-11) 817e4d9 Add --config-type option so config file can be read from stdin 7b3e307 Add function for running idempotent commands 002742c Add initial suport for external diff tools e4ac1b5 Add symlink mode 7576466 Build with Go 1.16.7 182b937 Fix chezmoi execute-template --init to not read chezmoidata 60ae6b2 Fix spacing error in docs 8144975 Fix the FreeBSD installation method 0eb5348 Improve error messages for configurable merge tool arguments 3304f6a Improve internal testing functions 2726d9f Include .exe extension in Windows build artifact name 70a85f0 Normalize symlinks on Windows d79c30e Rename internal function for clarity cb4ee88 Tweak doc formatting 2.1.4 (2021-08-04) a4eeff4 Add inital undocumented mackup add command 1dfae81 Bump assets/chezmoi.io/themes/book from e939f40 to 50147be 42e1f2f Fix crash when color was set to auto in config file 49e9b46 Fix grammar 43a0f1e Fix some minor internal inconsistencies 91d10b0 Fix tag line in reference manual dc6011b Make order of arguments to merge command configurable b074718 Tidy up order of struct fields 23059eb Update contributing doc cdbc085 Update dependencies 2.1.3 (2021-07-31) 62bc51a Add VCSH to comparison chart 69dc0f3 Add hidden internal-test command for internal testing f9771a9 Add more media links f0e7dce Allow entering username/password when using builtin git e23dcc3 Bump golangci-lint to 1.41.1 bd9e485 Correct git archive import features 1d433a2 Fix formatting in comparison table bf77f76 Normalize cell length in Markdown table 9820eb2 Reduce test verbosity in CI 74811b2 Remove incorrectly documented short option dde40d0 Set the record straight on some bare-git features d4971ed Tidy up comparison table cfe9084 Tidy up repo guessing code 523496c Tidy up username and password requests when using builtin git b51c080 Update dependencies 4282879 Update dependencies f00f6b5 Update recommended podcast aae3a82 Use golang.org/x/sys/unix package where possible 79d5348 Use target name when editing files 47de173 Use terminal to read password on Windows 2.1.2 (2021-07-14) db62a0b Add FAQ entry on chezmoi cd 80d925f Add link to blog 4da300a Add more media entries acc950d Allow install of chezmoi from a powershell where StrictMode is on 19500e0 Allow source directory to be a symlink 7b572a8 Build with Go 1.16.6 1ba3727 Fix doctor check for suspicious entries 7c688ef Make .chezmoi.kernel template variable more generic dcf0ba1 Make .chezmoi.osRelease template variable more generic 38d163d Make modify scripts always overwrite the target without prompting 173ab68 Populate all default template variables 35de5ad Remove .chezmoi.homedir template variable bb0d23e Tidy up issue templates 2.1.1 (2021-07-11) 91c4031 Fix config file code snippet in HOWTO 0b499d7 Fix panic when destination directory is / 9660b12 Improve shell completions 9d02a5a Tidy up onepassword template functions f4e004a Update doc on how to migrate away from chezmoi 5705e04 Use fs.WalkDir function d1fef1c Use script extension to determine interpreter 2.1.0 (2021-07-02) d506456 Add .literal suffix to make all filenames representable 0f8a0aa Add gopassRaw template function 646f4f3 Add literal_ attribute to make more filenames representable e872fa3 Add mozillaInstallHash template function 7cac834 Add optional account arg to onepassword template functions 79ad5fe Add passRaw template function d84b0a7 Bump assets/chezmoi.io/themes/book from 4540d66 to e939f40 efc96d6 Tweak Go modules check 2.0.16 (2021-06-27) 7b57397 Add --config-path option to init command 12fbe0a Fix FreeBSD install instructions 32d4a92 Improve documentation of chezmoi edit 4100279 Include FreeBSD build in tests c5cb349 Make osRelease and kernelInfo template vars available on all systems where present 31a5fb7 Prioritize /etc/hosts over /etc/hostname for FQDN hostname ef49f6a Tweak FAQ on chezmoi edit a441236 Update dependencies e9c2155 Update dependencies 9bf5265 Update docs so that oh-my-zsh tarball goes to TMPDIR instead of HOME af34a92 Update golangci-lint to v1.41.0 2.0.15 (2021-06-17) d02e707 Update GoReleaser GitHub token 2.0.13 (2021-05-27) fba2ec9 Add --ssh option to init command to guess SSH repo URLs 6793811 Add .chezmoi.sourceFile template variable 811fb19 Add age howto 9efc082 Add findtypos check 8b35f3d Add forgotten --include option to add command a706029 Add how to for managing part of a file 2b546b7 Add how to for using chezmoi with brew bundle ca607a4 Add how to on running a script when another file's contents changes 0342271 Add link to github.com/hussainweb/ansible-role-chezmoi 56b3666 Add maximum width to docs output 9fbaba1 Add more media links 7839bfe Add re-add command d8f8add Add test for template data in chezmoi init --apply 7f8716a Add writeToStdout init template function 5497b85 Bump age version to 1.0.0-rc.2 in tests 918c2b7 Bump golangci-lint to v1.40.1 ca54fa3 Disable exhaustive linter bfc32b2 Ensure that parent directory exists in import examples c69e066 Fix security table of contents a69d2ff Fix typos bebdceb Fix typos and receiver names 6c952eb Format code blocks in documentation cdaa1d3 Improve code documentation 3539609 Improve consistency f0c11ce Improve consistency of reference documentation 09c3530 Include Linux OS release name and version in doctor output, if available 5023553 Make how to section on ignoring files easier to find 5eb6def Move cmd package to internal/cmd cf97df1 Move internal/cmd to internal/cmds 320cb8d Move security policy into docs 049d7e8 Move security policy into docs 3ca09db Only create templates with chezmoi add --autotemplate if a replacement occurred 98d9607 Reference .chezmoidata in template data documentation 1c0e836 Remove stale FAQ entry 802c6ca Remove stale docs on diff.format df0ea51 Remove unnecessary SourceRelPaths type ab16f1b Rename function argument for clarity 883a5f0 Reword intro commands c0a9fa4 Tidy up how to 8eb212c Tidy up symlink documentation 01c812b Tidy up tests 009a796 Tweak documentation 0e800ad Tweak examples and docs a little more 35ea315 Update Go to 1.16.4 cce08bb Update Windows Subsystem for Linux detection how to de341d2 Update dependencies b33ca40 Update golangci-lint to 1.40.0 2bededb Update link to path matching function 034b8d3 Use io/fs package instead of os 66fbcb6 Use neutral names in docs and tests b6ab19e Use pager for docs and make pagers more configurable 891e461 Use quote function instead of literal quotes in docs 7526fa5 Use stringSets for known filenames d858159 Use temporary files, instead of stdin/stdout, when calling gpg 2.0.12 (2021-05-10) 1393e41 Add Architecture guide 942d536 Add another method of detecting OS architecture for robustness da611c9 Bump chezmoi.io/themes/book from 1e4bcc2 to 6200450 3e562c5 Correct and template example in How To guide 8bbf1b8 Don't atempt to use reverse DNS to determine FQDN hostname ce2d86a Handle EINTR from syscall f188ab5 Improve error message when persistent state is locked 89d36ec Improve reliability of Powershell installer 18cf1ef Increase verbosity of tests in CI 06674ab Make chezmoi forget also remove entry from state bc2a07c Move VIM tip from reference to how-to aeb781e Remove debug code 6eb89ab Remove unnecessary AbsPaths type 155e53f Remove unnecessary RelPaths type 361ce17 Remove unnecessary typecasts f51fc68 Simplify EINTR handling b3529bf Sort unexported variables after exported ones fbf260f Suppress warnings in tests about git default branch name 9ae0d58 Tidy up flag parsing and help output bc48485 Update dependencies 08336ad Update dependencies 037a372 Update last written state when target and actual states are equivalent 3c273d6 Update rpm zsh completion directory to match recent Fedora versions. 3a06eb8 Use /etc/hostname to determine hostname, if available 421d43b Use c.errorf instead of cmd.Printf fb616d9 Validate generate config before writing it in init command 2.0.11 (2021-04-26) dfd8145 Add Makefile targets for coverage c2c5ff4 Add import --exclude option 546070b Add related software documentation 179cbfc Add wget one line install instructions ba3c28d Bump Go version to 1.16.3 on Cirrus CI 4a82d68 Do not follow symlinks if the file will be ignored anyway 1a7d396 Explicitly document need for data in template action 4ecd1db Extend include template function to handle absolute paths 4503be6 Fix checksums.txt upload step a7a8ae2 Fix panic when using diff --exclude a19217f Fix typos in comments 5d4f02c Fix typos in docs 07127cf Fix typos in test comments a48a9d8 Ignore whitespace errors in .vscode/settings.json 173732f Improve parsing of auto bools bdab05d Minor tidy-ups b9dcd48 Tidy up path handling 4c51578 Update dependencies 91a2e9f Warn user when add command would remove encrypted, private, or template attribute d2d96b0 Write prompts to stdout, even when --no-tty is specified b1501ad fix typo 2.0.10 (2021-04-15) 6a8855e Add add.templateSymlinks configuration variable e1612f6 Add diff.exclude configuration variable 9b7c35c Add editor config for PowerShell scripts acfec8e Add infrastructure to read entry type sets from config 1d42c99 Add init --data option c3b8073 Add mitigation for when actual state does not match persistent state e8229a9 Add state data, delete, get, and set subcommands 4459193 Add test for re-adding file with and without --encrypt 5331014 Add tests with different umask values 5f47aaa Added --template-symlinks-home and --template-symlinks-source 804e135 Consolidate symlink tests 93c53da Document one-line chezmoi and dotfiles install d41951f Don't assume that gpg is installed in tests 992b923 Make --exclude option per command instead of global b00710b Make --template-symlinks option a bool that checks source dir and home dir 8322943 Make chezmoi init --one-shot also include --purge-binary 38cb1d2 Only install glibc/musl-specific binaries when they are available 3782e93 Re-enable passing test e50575c Release both checksums.txt and chezmoi_${VERSION}_checksums.txt 141a9b1 Replace --template-symlinks-home and --template-symlinks-source with --template-symlinks=value 5920345 Revert to standard actions/cache 2436c92 Store actual umasks in state file 703be4e Tidy up table of configuration variables 45f6429 Tweak documentation 865c379 Update Go module version to match tag 8090122 Update dependencies c48de4c Update prefix documentation 8755cb6 Use default checksums file in install scripts 2.0.9 (2021-04-04) 505ca6a Fix import command when destination already exists d34a1b6 Update dependencies 2.0.8 (2021-04-03) 2cdbbd7 Add tests for symmetric GPG encryption e444344 Build with Go 1.16.3 6755586 Bump chezmoi.io/themes/book from 60dfd9a to 1e4bcc2 b6d33d9 Bump ludeeus/action-shellcheck from 1.0.0 to 1.1.0 0c37c54 Fix absolute path check 5e54964 Fix typo b990f3d Fix typos 7bce9fa Tidy up comparison doc 040ef45 Update PowerShell install script to use checksums.txt 351172f Update install script to use checksums.txt 5976c07 fix: gpg symmetric passing wrong arguments 2.0.7 (2021-03-31) 1ce1944 Restore original checksums filename 2.0.6 (2021-03-30) de636f1 Add System.IdempotentCmdCombinedOutput 2348d6a Check for libc version in upgrade command 406cdc5 Rename variables for consistency 58aac9b Restore build of non-libc-specific Linux archives 75681a7 Use emojis in comparison 2.0.5 (2021-03-29) 1a2e4e9 Add -Force option to Move-Item command. c1e5a8c Add darwin/arm64 to install script 3e7bbde Add link to blog post 5468d3d Add stdinIsATTY template function 5135e06 Correct function name in documentation 639adcf Fix issue in example for trying to use existing boolean vars first in How To section: First arg of get doesn't have to be in quotes. c6271ad Improve install script error handling d5e5afc Make .chezmoi.sourceDir template variable a string 83a1b65 Make install script install glibc or musl libc version as appropriate 382988d Only evaluate target states when needed 03a3780 Reduce severity of doctor warning if gpg is not installed b196247 Simplfy managed test 67c57d5 Split large functions into smaller functions f548ba3 Tidy up handling of script working directories e996856 Tidy up make generate target 30f1ab9 Unlock state when running editor or merge command ff4bf5a Update dependencies 0e824ff Update golangci-lint to 1.39.0 731a622 Use the first existing parent directory for a script's working directory. 2.0.4 (2021-03-24) 6dca5aa Add age binary check to doctor command 54ef893 Build libc-specific archives 2eb70bf Fix noupgrade build tags 1833b11 Make doctor command more friendly about missing binaries ae2f0d2 Only update state if target was actually changed b36175d Remove stale reference to go generate f918459 Update howto to use main instead of master 2.0.3 (2021-03-22) 17e4976 Document empty_ for file target types 0ee8476 Factor out GitHub client bccd093 Fix editing of encrypted files in subdirectories e35be17 Internal tidy-up 237b3f5 Remove noembeddocs and nodocs build tags 34782e1 Remove symlinks whose targets are empty 20c63f1 Restore upgrade command 2.0.2 (2021-03-19) 8c66bbc Add new attributes to chattr reference documentation. ded9ecc Add removeline test function 700db6e Add tests for --exclude=encrypted option 966d45a Connect stderr when invoking encryption tools 058497e Detect encryption if group set in config file 091028f Extend cat command to print scripts 5e5f377 Improve encryption integration tests 9bc28b7 Remove temporary version override 2.0.1 (2021-03-18) 0b8b5b0 Fix panic when displaying scripts in diffs 2ba9aed Include scripts to be run in diffs by default 316371f Use notepad.exe, not vi, as the default editor on Windows 2.0.0 (2021-03-17) ebdd6f4 Add chezmoi apply --source-path tests 7caf314 Build with Go 1.16.2 45f2ca4 Improve documentation of gitHubKeys template function cb43820 Improve error messages from 1Password template functions a665328 Initialize the keyring cache e9022e5 Minor documentation fixes 2ccc16a Only log when --debug is set 784a08c Preserve homedir template variable for backwards compatibility 09fb2cf Refresh github.com/actions/cache by changing key a8eb3a9 Tidy up changes doc for v2 6f459af Update FAQ for chezmoi v2 4cbc07b Update comparison doc for v2 1c68a53 Update dependencies 08aff38 Update documentation and release process for v2 release 9b6b8f1 Update quick start guide for chezmoi v2 1.8.11 (2021-02-05) 1.8.10 (2020-12-20) 1.8.9 (2020-11-20) 4fd06fa Merge pull request #936 from zb140/1password-cache-arg 1.8.8 (2020-10-31) 71e82db Merge pull request #924 from twpayne/templating-docs 1.8.7 (2020-10-10) 3b285d9 Fix release tests 1.8.6 (2020-09-28) cfa3fd2 Merge pull request #893 from twpayne/static-link-with-musl 1.8.5 (2020-08-22) c5dbedc Merge pull request #872 from twpayne/update-testscript 1.8.4 (2020-08-12) 99ef18b Merge pull request #834 from twpayne/codespaces 1.8.3 (2020-06-25) 6d2be34 Merge pull request #805 from twpayne/update-deps 1.8.2 (2020-06-09) 323cba5 Fix release job 1.8.1 (2020-05-06) 4def4f3 Fix typo cbf8d4a Merge pull request #731 from twpayne/faq-tidy d604fa5 Improve FAQ b962e36 Merge pull request #729 from twpayne/strings-builder 610701e Use strings.Builder instead of bytes.Buffer 0bc0257 Merge pull request #728 from twpayne/execute-template-improvements e3b3da1 Improve FAQ entry on managing files outside target directory 11aad4d Add --output option to execute-template d6b059c Merge pull request #724 from twpayne/octal-literals 604dca2 Format octal literals consistently b68bd53 Merge pull request #720 from twpayne/fix-git-diff-func-color e16ebda Fix color of hunk context in git format diffs 34fc1b5 Merge pull request #723 from twpayne/auto-escape-templates 7d8c6d2 Auto escape template delimiters when --autotemplate is set 36b1f44 Merge pull request #719 from twpayne/infrastructure-improvements 0cee057 Merge pull request #718 from twpayne/howto-external-modified e800dd0 Use Makefile for CI steps 4e9e654 Separate out local imports 09b38ce Improve how to for tracking externally modified files 5752e26 Merge pull request #717 from twpayne/no-color 519ec22 Update pull request template 590c721 Add support for NO_COLOR environment variable 70c4eda Merge pull request #714 from twpayne/improve-contributing 30a2b81 Remove old linter suppressions 57fbcb7 Make list of enabled linters explicit ec44e08 Improve infrastructure for contributors 3bad347 Add pull request template 81bfc76 Merge pull request #715 from twpayne/fix-git-status-parser 70e8e2c Enable autocommit and autopush for chattr command 94c02a0 Fix git status parsing for renames 175601e Merge pull request #709 from ihommani/master 31c646d Merge pull request #698 from twpayne/color-git-diff 810607c Add colored git diff support 93c03e7 Make --color option accept boolean values b640720 Merge pull request #712 from twpayne/generic-secret-string 1e699ea Make secret template function return a string, not a []byte c9081ac Merge pull request #710 from twpayne/gofumports-tidy e458bed Compact type declarations 6002344 Add images to illustrate chezmoi principles 8b5b0f5 Merge pull request #687 from twpayne/golangci-lint-next 9271f90 Merge pull request #707 from twpayne/no-dev-upgrade f10697b Update golangci-lint to version 1.25.0 1d7dc3d Don't attempt to upgrade dev versions without --force flag 0796dd8 Merge pull request #704 from twpayne/doublestar-glob ceb6307 Use doublestar for all globs 9f0b03e Merge pull request #703 from twpayne/go-generate-completions 0eb3917 Generate completions with go generate instead of make 3ea95e5 Add --output option to completion d256de8 Merge pull request #702 from twpayne/execute-template-init cd42fb0 Add --init and --promptString options to execute-template 1760187 Fix generated docs dd7edf8 Merge pull request #697 from stephengroat/patch-1 442c85d Merge pull request #699 from twpayne/gopass-version f8bd952 Update gopass version detection 124ab05 install from homebrew-core d2d43e9 Merge pull request #695 from twpayne/umask-docs f1cbbd6 Improve reference docs 3e6700e Add more documentation on umask 2d4f690 Merge pull request #689 from stephengroat/patch-1 bd72b50 Use goreleaser github action e0c120c Merge pull request #693 from twpayne/doublestar 67d5746 Use doublestar.PathMatch for path matching fd29c6e Merge pull request #692 from twpayne/fix-media-page fe13fc7 Fix media page 1.8.0 (2020-04-19) 017a83f Merge pull request #686 from twpayne/tidy-up-github-action 91581ec Tidy up GitHub Actions f642fb4 Merge pull request #685 from twpayne/media 35cc601 Update README.md 79b9ae0 Add media page c02d8e3 Merge pull request #684 from twpayne/gpgrecipient-warning 5e03393 Add warning when source version control system is not git 56436ac Add warning when config file uses gpgRecipient cc816d2 Merge pull request #679 from twpayne/fix-add-dir 89dc01b Add how-to entry about creating empty directories 8499f4d Create .keep files when adding directories non-recursively aba694f Merge pull request #678 from twpayne/git-diff cdb5a0a Add git diff format ca9d8d9 Merge pull request #674 from twpayne/diff-pager 14b1197 Add diff.pager config option edc0d55 Merge pull request #675 from twpayne/autotemplate-implies-template 5ba7692 Make --autotemplate imply --template 0b56b08 Merge pull request #676 from twpayne/fix-snap-path d2bb6fc Update path to goreleaser in GitHub action c603bb3 Merge pull request #672 from twpayne/managed 36bd3f4 Iterate on managed command 1d2c1d1 Merge pull request #671 from twpayne/document-lowercasing 08f2319 Document Viper's lowercasing of variable names 709b141 Merge pull request #670 from twpayne/investigate-668 854a931 Add test for adding empty directory without recursion c1c19fb Merge pull request #669 from twpayne/upgrade-deps 1489cac Upgrade dependencies 987450b Merge pull request #665 from remigourdon/add-managed-command 469ab7c Add managed command f89a8c3 Merge pull request #667 from seberm/feature/add-gpg-command-into-config 2fca0ae Add option to configure gpg command ecb873b Remove stray debug code 49fb084 List repos tagged with chezmoi by most recently updated first 6675562 Merge pull request #658 from twpayne/update-readme 8fc4d38 Update README.md 76e7e03 Merge pull request #657 from twpayne/symlink-template ba47581 Add separate config files how-to entry 1.7.19 (2020-04-06) c4dd796 Merge pull request #656 from twpayne/non-hermetic-functions 82f9922 Include non-hermetic text functions from Sprig 8d538be Merge pull request #653 from twpayne/purge e384392 Add purge command e6b1424 Merge pull request #652 from twpayne/dont-compress-docs 9e2879f Don't compress embedded assets 1767ad7 Merge pull request #651 from twpayne/template-docs 6914b1f Use TOML in reference manual example 53f92d5 Improve template documentation 4e46435 Merge pull request #649 from twpayne/fix-550 bcd0750 Fix behavior when adding an empty file without --empty d6f80bb Merge pull request #647 from twpayne/umask 42d04f7 Merge pull request #648 from twpayne/min-go-version 9b2f286 Use umask when creating any file or directory ca416df Ensure that chezmoi is built with Go version 1.13 or later e607dc8 Merge pull request #646 from twpayne/fix-link fced112 Fix link in quickstart guide 1.7.18 (2020-03-29) 8284da7 Update contributing guide with new version embedding mechanism 6ebf442 Merge pull request #644 from twpayne/fix-version 1257ea8 Refactor version number embedding f92a292 Bump golangci-lint to 1.24.0 2db0aad Update chezmoi.io home page to match README.md b1a341b Merge pull request #641 from ihommani/639_enhancement_documentation f9ad39a [639_enhancement] Fix features part documentation 453d152 Merge pull request #640 from twpayne/trim-space bd78980 Strip leading and trailing space from values read from user 96e0dea Merge pull request #635 from ptxmac/windows-trim fe98dde Revert \"Only run CI on pushes\" 7985de8 Regenerate documentation da30f18 Merge pull request #638 from nawordar/patch-1 b90fc91 Change . to dot_ in symlink template example 568fb50 Improve windows support by removing carriage return from prompts 1.7.17 (2020-03-21) db03a2b Merge pull request #634 from twpayne/ignore-lookupgroupid-errors d22a3cf Only set group value if user.LookupGroupId succeeds d0ab459 Merge pull request #633 from twpayne/allow-kernel-fail 74297e8 Make reading /proc/sys/kernel more tolerant of errors d289303 Merge pull request #631 from twpayne/update-dependencies f671329 Update dependencies 208de3a Merge pull request #630 from twpayne/template-options 4926a16 Add option to set template options a75a1f7 Switch to functional options for TargetState 21f46e0 Merge pull request #629 from twpayne/execute-template b047430 Add execute-template command 79d7ddf Export TargetState.ExecuteTemplateData 771e4e7 Merge pull request #626 from twpayne/editor-with-args d65ec45 Allow EDITOR and VISUAL to include arguments 733b547 Merge pull request #624 from twpayne/add-thanks-faq a4e76f3 Add thanks FAQ entry 298c27f Merge pull request #623 from twpayne/mark-auto-commit-stable 6d450c1 Mark autoCommit and autoPush as stable cda7249 Merge pull request #622 from twpayne/document-ignore e3caa96 Improve documentation of .chezmoiignore efddb59 Only run CI on pushes ae4bbc9 Merge pull request #620 from twpayne/refresh-readme 07fb826 Refresh documentation ec3b896 Merge pull request #618 from twpayne/go-1.14 ea3d8d2 Add freebsd/arm64 and openbsd/arm64 builds 098c28c Build with Go 1.14 e05e396 Bump golangci-lint version to 1.23.8 1.7.16 (2020-03-04) ce06ed9 Merge pull request #617 from twpayne/fix-commit-message-template-path eb0129f Fix path to commit message template asset b03639b Tidy up link fixes 37c54ae Add missing punctuation 509b93a Merge pull request #616 from twpayne/fix-chezmoi.io-links 37d35c8 Fix links on chezmoi.io 1.7.15 (2020-02-26) a7b5607 Merge pull request #612 from twpayne/revert-assets 1403b64 Revert \"Move completions into assets directory\" 1.7.14 (2020-02-25) 559da47 Tidy up release process 9f8b2b6 Merge pull request #610 from twpayne/bump-dependencies 0d429c8 Bump dependencies 7192a91 Revert \"Move cmd into internal directory\" 106aef2 Merge pull request #609 from twpayne/misc-fixes 2d466db Move scripts into assets directory 5317fe6 Move cmd into internal directory b34673d Move completions into assets directory 40d92cc Move templates into assets directory c74392a Move images into assets directory 4fc9f6b Tighten up return type d3ff731 Merge pull request #608 from twpayne/lastpass-raw c39b714 Add lastpassRaw template function ff00fed Fix documentation for lastpass note parsing 2c3f7e2 Merge pull request #606 from twpayne/improve-docs 2fbaf35 Improve docs 0cd7bdc Merge pull request #605 from twpayne/strip-symlink-template-whitespace 49ba065 Improve template documentation 251f698 Trim whitespace from evaluated symlink templates 948f293 Merge pull request #603 from twpayne/renable-snap-bash-completion 8840ecf Revert \"Temporarily disable bash completion in snaps\" a9e7cb7 Switch from godoc.org to pkg.go.dev 0b2decb Merge pull request #602 from twpayne/doc-cleanups 27790db Use cobra.Command.Printf instead of Config.warn da9d72a Add custom help command d847c8f Make short helps more consistent 3259503 Fix more typos and clean up docs 3114a51 Fix typo 08cabca Merge pull request #597 from twpayne/cd-command-config 6114041 Add cd.command configuration variable 34c402b Merge pull request #600 from MunifTanjim/docs/fix-reference-sourceDir-default-value 62c9d45 Fix sourceDir default value in docs b7b8e1e Tidy up issue templates 1.7.13 (2020-02-13) ed3584c Temporarily disable bash completion in snaps c11e4c9 Merge pull request #595 from twpayne/fix-594 23bda0a Include relative path in template name 37096b0 Merge pull request #592 from twpayne/update-toml 5d20cbf Use github.com/pelletier/go-toml to handle TOML 1624695 Merge pull request #591 from twpayne/functional-config-options cd49a3f Use standard directories in all tests dc82787 Make tests more verbose by default 1b50624 Simplify I/O handling in Config 4610fec Use newTestConfig function in tests 8bea1b2 Add newTestConfig function c475c5e Use functional options to construct Configs 552151d Don't include destination directory in dump output 5e8b893 Merge pull request #590 from twpayne/template-funcs-in-config-template 8771b2d Make all template functions available in config file template 0d8ddd6 Merge pull request #588 from twpayne/misc-fixes c62befa Bump golangci-lint to v1.23.3 de3d05b Check more errors b3dfbea Use more specific receiver 64a30b2 Avoid unnecessary calls to Stat before MkdirAll a65f193 Use Config.warn consistently 3e2fd5b Merge pull request #587 from twpayne/format-assets 02ae747 Compress assets as much as possible 840d00e Wrap generated code at 80 columns 7ac364b Tidy up contributing docs 61a5942 Merge pull request #586 from twpayne/remove-empty-symlinks a13cff2 If a symlink is empty, remove the target c39c254 Merge pull request #584 from twpayne/no-large-diffs bde4d3e Don't print diffs if file is larger than 1MB ecfba0e Merge pull request #582 from twpayne/use-issue-templates f03e442 Link to issue templates in documentation 17ceb5f When looking for an entry, return an error if it does not exist ( #581 ) a5785d3 When looking for an entry, return an error if it does not exist 5099fed Merge pull request #579 from twpayne/upgrade-checksum 7b6fa02 Fix upgrade checksum filename 1.7.12 (2020-01-24) bed22fc Rename internal command for consistency ( #576 ) ac77728 Simplify code generation 395b450 Rename internal command for consistency e938d4c Remove debug code 52e49ad Improve packaging of assets ( #575 ) 7c6d8e7 Improve install-tools target ca61c8d Improve packaging of assets 92deba6 Update dependencies ( #571 ) c8f7305 Update dependencies fe7728e Merge pull request #569 from twpayne/linux-install c9df290 Add NixOS Linux install instructions 1d1230d Update Alpine Linux install instructions 888736a Add note about installation instructions to contributing guide ae3666b Merge pull request #568 from twpayne/issue-templates 0659f65 Tidy up issue template markdown e536db5 Merge pull request #567 from twpayne/support-request 0782706 Add support request issue template 7b5f645 Merge pull request #565 from twpayne/fix-install.sh 699d0b5 Remove no-longer-correct action to build install.sh c882899 Restore default arm builds ddde88b Merge pull request #563 from ndt/patch-1 31d9a40 Update install.sh 185e2c9 Merge pull request #562 from twpayne/commit-faq b5cfe03 Add FAQ entry on committing changes 65694b2 Update tables of contents 48c0d31 Merge pull request #560 from twpayne/source-alias 4ab59df Add hg command c8010c2 Add git command f30445b Document aliases 372c392 Merge pull request #559 from twpayne/zsh-completions 9795d04 Add zsh completions for positional arguments 2d5a384 Fix missing Oxford comma f9bd8bb Don't compute full target state in data command ( #557 ) 1b630ce Don't compute full target state in data command f563a08 Merge pull request #556 from twpayne/windows-colors 6cec157 Enable virtual terminal processing on Windows 0b3aa77 Use golang.org/x/crypto/ssh/terminal instead of github.com/mattn/go-isatty 1.7.11 (2020-01-09) acf3478 Merge pull request #553 from twpayne/keepassxc-show-protected ff4f8d9 Pass --show-protected to keepassxc-cli version 2.5.2 or later 3788d1b Merge pull request #549 from twpayne/improve-template-docs 16e1fa9 Validate variable names in config data 73d2aa7 Improve template how-to cf6b4a7 Merge pull request #543 from twpayne/release-improvements 87881f2 Consolidate GitHub Actions 92ce3c4 Add arm7 builds 1f01859 Tidy up goreleaser config 4be8957 Bump golangci-lint to version 1.22.2 3e733b1 Merge pull request #547 from twpayne/update-glamour 128c291 Use Glamour's ASCII style for rendering docs 3df4931 Fix use of autotemplate in how-to doc ( #546 ) ac494ee Fix use of autotemplate in how-to doc acdd04d Use more reliable install-from-source method ( #541 ) f6fb2dc Use more reliable install-from-source method 73d325e Render docs with github.com/charmbracelet/glamour ( #537 ) 0d2c73d Render long help and docs with github.com/charmbracelet/glamour ea4b6c4 Fix autotemplate docs 1.7.10 (2019-12-27) 74f6b5b Added kernel information to data d318b14 Consolidate data source files b603f77 Don't automatically assign bug label in bug report template 4f65240 Only set osRelease on Linux a402f9e Remove stale entry from .gitignore e271597 Treat adding an empty file without --empty as remove a698afe Treat adding an empty file without --empty as remove ( #536 ) db2e446 Trigger CI on pull requests 6559538 Tweak markdown to avoid Hugo bug b4f0cbc Update homepage in snaps and brews b10aa9f Use standard source directory in tests 14a9c3b typo 1.7.9 (2019-12-20) 8908b55 Do not print idempotent commands in verbose mode a1caca6 Don't add files if template would be overwritten 91e562a Don't quote shell args just because of equals signs 2992fce Don't quote shell args just because of equals signs ( #515 ) 8cea741 Improve contributing docs 5b488de Improve contributing docs ( #516 ) 2a164f9 Iterate on GitHub Actions 90c506b Iterate on infrastructure ( #524 ) 5d16890 Preserve but don't enforce private on Windows d58df90 Quote command args in debug mode 035e416 Reformat tables of content with latest Markdown plugin 61611b5 Simplify generated help template ac4f8d0 Update Alpine Linux install instructions 7d84ccf Update Alpine Linux install instructions ( #514 ) ddd0b62 Update all dependencies e349fef Update all dependencies ( #520 ) 5f6943c Update install.sh d6970d1 Update issue templates 8825d44 Use go/format instead of gofmt 7a41df2 Use go:generate more idiomatically 6a9256a Use more specific command for generating help 1.7.8 (2019-12-13) d106ef6 Include generate step in release builds 1.7.7 (2019-12-10) de86467 Use GORELEASER_GITHUB_TOKEN for releases 1.7.6 (2019-12-10) e74485f Add Alpine Linux installation instructions cd50d7b Add ShellQuoteArgs 954b51a Add contributing guide for documentation changes ce5d509 Add link to Windows binaries and GitHub releases page f93c255 Add updating chezmoi.io to contributing docs a0e061a Correct use of setup 123fb2a Enable dupl linter 1db6960 Export MaybeShellQuote e20f00a Fix website automation for when gh-pages branch does not exist f1b4221 Fixed a type in completion example d3c75da Fixed a type in completion example ( #508 ) 5a687a2 Improve documentation ( #509 ) fa8e001 Improve install docs ( #506 ) a23c640 Improve template errors ( #504 ) 34b3fb2 Indent all YAML files consistently ff7dd1b Miscellaneous fixes ( #505 ) c5d9ce0 Omit unknown components from --version output a5321f6 Prepare docs for next release addb0cb Prepare docs for next release ( #511 ) cf457c4 Quote command arguments if needed in template error messages a4c459e Release future Windows binaries in zip archives bcebd2f Set GITHUB_TOKEN for releases 993f87d Switch to GitHub Actions 91e32c3 Switch to GitHub Actions ( #494 ) de4e40b Tidy up package install table eaf7294 Update argument name for consistency with docs d4e1c1b Warn when skipping add of ignored files 4403954 Warn when skipping add of ignored files ( #510 ) 1.7.5 (2019-12-02) 243ccc1 Add onepasswordDocument template function 55ecebe Add onepasswordDocument template function ( #503 ) ebe4695 Use more robust shell quoting algorithm 1.7.4 (2019-12-01) 13398a8 Add runtime.GOOS and runtime.GOARCH to doctor check 97258b3 Add runtime.GOOS and runtime.GOARCH to doctor check ( #498 ) 770d34e Avoid duplicated first arg in verbose mode 51ca763 Drop coveralls daf6a0e Drop coveralls ( #497 ) 5f98352 Fix links on chezmoi.io 5966624 Fix links on chezmoi.io ( #499 ) fce5ec0 Use go-shell with 32-bit support 2246c5d Use go-shell with 32-bit support ( #500 ) 1.7.3 (2019-11-23) 47bb3ce Add --debug flag 4122f12 Add DebugMutator 40fb730 Add FAQ entry on running a command when a file changes 953879e Add FAQ entry on running a command when a file changes ( #469 ) 7d52ca8 Add IdempotentCmdOutput and RunCmd to Mutator 413c8ec Add book theme 948f479 Add content doc dependency on generator 9ea31ce Add debug code ( #478 ) 387cffa Add how to handle externally modified config files 1b655f9 Add how to handle externally modified config files ( #487 ) 1e020e2 Add how to import Oh My Zsh documentation f40fb42 Add how to import Oh My Zsh documentation ( #480 ) 3468c22 Add initial www.chezmoi.io 680cbae Add initial www.chezmoi.io content 616c63a Add smoketest target as default ee0e99b Add sourceDir to default template data 7acba23 Add sourceDir to default template data ( #485 ) add120d Add www.chezmoi.io automation 89e2713 Add www.chezmoi.io website ( #471 ) 7ceb1a9 Build improvements ( #488 ) 011b72c Bump golangci-lint to version 1.21.0 574e74e Clarify Go modules requirement in docs 97987b6 Clarify upgrade command 5dedfdf Disable flaky tests on Windows a362775 Disable flaky tests on Windows ( #491 ) 496c985 Document --debug flag df35378 Don't include tables of contents on chezmoi.io eccc569 Fix debug logging e38d210 Fix debug logging ( #482 ) 9cfd78d Fix grammar and receiver name 4d678ce Fix links on chezmoi.io ( #493 ) 8d0a21e Fix logging ( #481 ) c6af790 Fix logging with --debug and --verbose flags ddac85f Fix typo i make every day, and therefore see everywhere. 7a5c063 Fix typo i make every day, and therefore see everywhere. ( #466 ) 6329176 Improve install docs 51946fa Improve onepassword documentation fde5551 Improve onepassword documentation ( #476 ) 5db37d9 Move fs and mutator into config c5cfcea Only create source parent directory if it does not exist 0840ede Only create source parent directory if it does not exist ( #484 ) 84350bf Quote arguments in verbose mode if necessary 4b04b24 Quote arguments in verbose mode if necessary ( #486 ) f111abd Refactor GitHub Actions 8473c3f Refactor GitHub Actions ( #465 ) df05dff Rename LoggingMutator to VerboseMutator 32359e3 Update modules b286352 Update modules ( #470 ) 05bd6e2 Update reference manual table of contents 07ecbef Use IdempotentCmdOutput in template functions cc9ee40 Use consistent receiver name 62fcb3a Use go vet in golangci-lint 3167f57 Use https://chezmoi.io/ as base URL 7469b97 Use https://chezmoi.io/ as base URL ( #473 ) 0e62d4d Use run instead of exec 1.7.2 (2019-10-17) 2445864 Add autocommit and autopush 41c4fdc Add autocommit and autopush ( #432 ) a7bc3b7 Add git status parser f1f9391 Add lines function 963985f Add shell check to doctor command 5033a31 Bump golangci-lint to version 1.20.0 066c9a5 Update dependencies to latest versions 1.7.1 (2019-10-13) 88b48f4 Disable source state private check on Windows 0f7bda1 Disable source state private check on Windows ( #456 ) f425bc6 Use Go 1.13's wrapped errors 688bc14 Use Go 1.13's wrapped errors ( #453 ) 1.7.0 (2019-10-10) f2cd6e9 Add FAQ entry on source/target filename bijection 2d7d593 Add FAQ entry on source/target filename bijection ( #442 ) 9c67b56 Add GitHub Actions 90d5323 Add gopass support 5fda365 Add gopass.command reference fd38084 Allow persistent state to be opened in read-only mode 9e2ceb7 Don't export internal package a90b01f Fix line-ending-dependent tests on Windows 37ac582 Fix symlink test on Windows 1929a0f Improve detection of the user's shell fd991e7 Improve detection of the user's shell ( #446 ) b5b46db Only lock persistent state when writes are needed ( #441 ) ce09d0d Only open persistent state in read-write mode if needed 3924950 Remove stray debug code 7939fd6 Switch to github.com/pkg/diff 8835998 Unify and improve GitHub workflows c79de4c Unify and improve GitHub workflows ( #450 ) ec449db Update contributing docs a1c7969 Update github.com/twpayne/go-acl to use latest version of golang.org/x/sys 4255f83 Update install.sh from latest godownloader f51a1ce Update install.sh from latest godownloader ( #452 ) f17d668 Update table of contents 681116a Use gpg.recipient in docs, instead of deprecated gpgRecipient eca92ce Use latest golangci-lint release f6a0cd2 Use latest version of github.com/Masterminds/sprig 1.6.5 (2019-09-20) 3733485 Add nodocs and noembeddocs build tags ( #431 ) ad21e43 Add nodocs build tag dbe4b67 Add noembeddocs build tag 1.6.4 (2019-09-19) e1410ab Make --follow a global option 5212eb3 Make --follow a global option ( #430 ) 1.6.3 (2019-09-17) 034ba74 Add Scoop support 9fa8675 Add Scoop support ( #429 ) 850dd8c Execute templates after editing c4190f5 Execute templates after editing ( #428 ) fd24e09 Pin golangci-lint to version 1.18.0 1335bef Pin golangci-lint to version 1.18.0 ( #426 ) 1.6.2 (2019-09-10) c29d46c Add Windows build test on Travis 085c025 Add config file template test 8144046 Add init test 283d98e Add init test ( #419 ) 4203598 Add keepassxcAttribute template function 6ccd08c Add keepassxcAttribute template function ( #418 ) d628770 Build with Go 1.13 97dac6f Disable funlen linter 5056d8a Disable funlen linter ( #420 ) e5d4962 Ignore chezmoi.exe 9c02816 Ignore chezmoi.exe ( #421 ) 95759d7 Improve README.md 1dea364 Improve README.md ( #407 ) a08bb5a Re-generate tables of contents 2b5ec69 Remove stray double quote 8ae43e6 Thread fs to exec 1656bf6 Tidy up tables ef1229e Tidy up tables and table of contents ( #414 ) 78dda03 Updated install script to be in line with shlib/uname_os.sh 44e4a24 Use an interface to abstract VCSes 1.6.1 (2019-08-11) 140201c Add preview update doc ( #391 ) c157439 Add preview update to HOWTO.md 4c3f2e9 Add \u2018Bug Report\u2019 Issue Template d918f7e Disable autotemplate by default 716bd09 Document PrivacyStater 1792d38 Document PrivacyStater ( #402 ) 7d513f3 Don't run scripts in diff mode 1e70622 Factor out common struct aab0d2c Fix 397 ( #405 ) 76a691e Remove AppVeyor a947359 Remove AppVeyor ( #403 ) 327a26d Update tables of contents with latest VSCode Markdown helper 1.6.0 (2019-07-08) b989fa6 Add AppVeyor CI for Windows b32874c Add AppVeyor CI for Windows ( #385 ) 00c05f3 Add CI for OS X 1c7c29e Add Windows release ( #390 ) 8539a1d Add bash completion in snap package ( #362 ) d64fbb1 Add bash completion to snap package f88c88a Add some more template dir tests f007172 Build releases for Windows 835ab33 Disable upgrade command on Windows 1be0691 Don't use github.com/google/renameio on Windows 533b454 Fix IsPrivate 77b8641 Fix IsPrivate ( #386 ) f276df1 Fix Windows IsPrivate to check explicit file permissions instead of effective permissions. 4953b05 Fix execution with partial templates 8e29647 Fix execution with partial templates ( #388 ) 612d56e Fix test filenames 47313ac Fix whitespace in build tags cbfea11 Improve Windows support ( #381 ) 6cbde10 No upgrade on windows ( #378 ) c46bed5 Re-enable the add --recursive tests on Windows 131ed26 Skip add --recursive tests on Windows 6cdf740 Tidy up comments 4b38c75 Update dependencies f6ed345 Update go.mod 2800d6a Use fork of github.com/hectane/go-acl while waiting for upstream to merge 8c81e98 Use latest github.com/twpayne/go-vfs b42b08f Use latest github.com/twpayne/go-vfs c6b5ebd Use latest github.com/twpayne/go-vfs ( #380 ) bff3e1e Use latest modules for Windows support ( #377 ) 1.5.10 (2019-06-29) 8f2f3e0 Add all logo images ca11320 Add all logo images ( #372 ) bfa0198 Add docs command f776ef5 Add docs command ( #374 ) 514bd77 Document where one line install script will install binary 6323f53 Don't execute templates when editing source state 355f650 Don't execute templates when editing source state ( #370 ) fa1d828 Fix issue 336 comments ( #368 ) 9301869 Fix template error messages ( #371 ) 0ea0cca Make remove command prompt by default a2fc377 Make remove command prompt by default ( #375 ) abaabcb Open source directory with editor when edit is run with no arguments 7f1d926 Remove go mod tidy test from CI c711405 Use goreleaser's fine-grained control for releases 542a132 Use goreleaser's fine-grained control for releases ( #376 ) 89ed284 Use text/template's error reporting mechanism 1.5.9 (2019-06-24) 79e568d Add Linuxbrew to install doc 01eaf98 Add Linuxbrew to install doc ( #365 ) 0a74170 Document script shebangs and executable bits f6a8d97 Initialize persistent state even when no config file exists 909c6ac Initialize persistent state even when no config file exists ( #367 ) 1.5.8 (2019-06-22) c829084 Fix unterminated string 5baa07a Fix unterminated string 1440388 Fix unterminated string ( #364 ) 1.5.7 (2019-06-22) 008513f Add --follow option to add command 4906a84 Add bash and fish completions to deb and rpm packages 3805756 Add common templates 822ed49 Add doctor binary check 76f0952 Add issue 353 test 78b908d Add logo to README.md dc31e18 Add logo to README.md ( #350 ) 6fdcc6e Add missing -f 15187ed Add note about completions 5bdbde1 Add note about including version numbers 4db775f Add remove functionality fe8bfc1 Add shell completions a199a64 Add square logo 1817afd Add support for Arch Linux to upgrade command 18ae3c4 Add support for gpg symmetric encryption 25feb88 Add symmetric encryption ( #333 ) 9ed9fd0 Add test for issue #353 2ff163b Clean up whitespace cdfb0c6 Connect gpg to terminal for encryption and decryption 9215412 Correct capitalization of GitHub 4586dfb Correct capitalization of GitHub ( #334 ) 58a7446 Correct order of arguments c91bc9d Document that fish completion exists in REFERENCE.md 5603bef Document that fish completion exists in REFERENCE.md ( #346 ) ea294a3 Documentation cleanups ( #358 ) e90a576 Exec new version after upgrade 36ff00e Exec new version after upgrade ( #335 ) 1e9ba2f Factor out GPG dc52690 Factor out getVersionFromOutput 7a50dd7 Factor out gpgBinaryCheck 6c4353c Fix arch install command be10fe9 Fix formatting d7af42c Fix typos 96f0847 Fix typos ( #337 ) 64d52b4 Ignore downloaded binaries 938185b Improve quick start guide 2983fc8 Improve quick start guide ( #359 ) eb861e7 Improve secret management explanation df82247 Improve section title 483fe60 Improve use of ReadOnlyFS b815ed3 Improve use of goreleaser ( #349 ) 4174a0b Include completions in archives 6c00d56 Install completions ( #343 ) 5a60e95 Install golangci-lint with goreleaser 89ecc76 Install improvements ( #351 ) 119cae6 Install package binaries in /usr/bin, not /usr/local/bin 39fc02f Install shell completions in homebrew 794a1a1 Install zsh completions f1372a4 Install zsh completions ( #361 ) e498d91 Logo 9c9f5ef Make default data available in config file templates 136d229 Pass through stderr output from secret commands 884747e Pass through stderr output from secret commands ( #338 ) e7324df Re-enable update-install.sh target 6a16044 Refactor apply tests 5ac2f33 Refresh install guide b9baa5e Relax gpg version check regexp 8467697 Remove stale sentence 47d2b78 Remove unused tool 508d459 Rename completion files e3814f2 Rename logo files fc84b92 Run apply multiple times to check for idempotency d45c23d Update brews in goreleaser config 8759d79 Update go-github to v26 297567d Update goreleaser configuration a319f04 Update install.sh from goreleaser 8c614a6 Update tables of contents 8e92a90 Update tables of contents 8b91858 Upload Logo ( #348 ) 6ecbff8 Use consistent email in tests 957535f Use consistent path to state database in tests a590114 Use consistent values in tests ( #360 ) d37888f Use tagged version of bolt 6eb98eb chezmoi is now available in official Arch repository 78f646b upload 1.5.6 (2019-06-06) 02b902d Add GitHub Release badge 2566544 Add doctor version check d17f54f Add doctor version check ( #318 ) e3b79bb Add fish completion support a4aaed0 Add fish completion support ( #320 ) e40b797 Add fish to completion command description f01f715 Add golangci-lint configuration e34b215 Add install-tools target f2cf3b8 Disable warning about computed URL fa33f40 Don't use a singleton NullMutator instance e2edc9e Don't use references to range-scoped variables 1abbee1 Explain how to customise the merge tool e7576f4 Improve documentation ae968e3 Make script state bucket a parameter, not a global 23c0169 Mark snap releases as stable 36bbdcd Mark snap releases as stable ( #317 ) fd8a72e Remove Go Report Card badge 802b3b1 Remove pre-release-checks target f4c9963 Resolve all lint problems and enable more linters ( #310 ) f7ca727 Update badges ( #311 ) a324c18 Update contribution docs de73d1b Update contribution docs ( #309 ) dac85d2 Update go.mod 3073691 Update snap install instructions with beta channel b006026 Update snap install instructions with beta channel ( #307 ) 1b047e6 Use latest go-difflib with improved colors 377bed9 Use latest go-difflib with improved colors ( #328 ) 24cb155 Use latest go-vfs with Windows support 6963cb9 Use latest go-vfs with Windows support ( #319 ) b0182fe Use relative package paths in documentation 07244d3 Use simpler interfaces where possible dadd7fa go mod tidy to make CI happy 1.5.5 (2019-05-18) 19f1d3d Work around snap not creating XDG_RUNTIME_DIR 4fb74c9 Work around snap not creating XDG_RUNTIME_DIR ( #306 ) 1.5.4 (2019-05-18) 013e289 Ensure that dist directory is empty before releasing 7d37a3b Release fixes ( #304 ) 60ed2ec Update README.md 1.5.3 (2019-05-18) 2b5e1a0 Add KeePassXC support a840bcc Add KeePassXC support ( #293 ) 46822f2 Add gpg doctor check fa87510 Add install.sh 1904a34 Add install.sh ( #299 ) 476b614 Add snap support to upgrade command 121950c Allow file checks to be skipped db75551 Build snap packages a192eb6 Build snap packages ( #298 ) e5bc9db Disable update of install script from buggy godownloader f921559 Fix godownloader-generated install script 590d0ae Goreleaser tweaks ( #301 ) 8b823e8 Misc fixes ( #296 ) d31de11 Move goreleaser config to default location 74befd1 Move goreleaser config to default location ( #300 ) 4db9935 Quote number used as string 2b6cd27 Remove bzr support 239d33a Remove bzr support ( #294 ) 54b09c2 Rework installation ( #302 ) c65f96f Rework installation documentation 8194f9f Strip any leading v when parsing version 9ca08a2 Update archives stanza ffd20c6 Update reference table of contents 8d068c1 Use short URL in installation docs 1.5.2 (2019-05-15) 8bd7bc9 Add BoltPersistentState ffc67b4 Add PersistentState a03f4f3 Add go mod tidy check to CI c07dde5 Add go mod tidy check to CI ( #290 ) 5f9b01d Add initial script documentation d75c32b Add script support 8088850 Add script support ( #287 ) 2cd7d3c Documentation fixes ( #286 ) 3efc5c2 Factor out ApplyOptions 0adef48 Fix typo in comment fe1cee7 Fix typo in reference 9d4dba1 Go mod workarounds ( #291 ) e7e0188 Remove CVS and Subversion support skeleton ( #288 ) 4810ef1 Remove CVS support skeleton 309f340 Remove Subversion support skeleton 9f1d435 Sort fields 32e5d4e Update reference table of contents 6630266 Use github.com/twpayne/go-difflib instead of github.com/pmezard/go-difflib ef59741 Use latest go.etcd.io/bbolt at HEAD instead of fork 1.5.1 (2019-05-08) e224be0 Add missing newline 770ca59 Add pre-release-checks target 6917265 Add pre-release-checks target ( #282 ) 7b61b9f Document pre-release-checks target 9f0d52c Fixed typo in 1Password instructions b6f35e5 Fixed typo in 1Password instructions ( #285 ) 1e7327f Misc fixes ( #281 ) 4f8ae57 Pre-allocate array 68eea80 Reduce interface requirements fbde75f Remove unnecessary gofumpt 54fd0a8 Remove unnecessary return value a984e58 Update mercurial support 8d7d5b6 Use smaller interface 1.5.0 (2019-05-03) 67e6861 Add FAQ entry on origin of chezmoi 0f11911 Add another source-path example 4ce6c61 Add colored diff support f22c1e7 Add example extraction 6ff9ad9 Add excluded ignores 5293105 Add explicit test for #192 1664463 Add generated long help infrastructure e845ac9 Add golangci-lint check f0bcb41 Add initial REFERENCE.md a41c2d3 Add internal extract-long-help tool c866b0c Add internal extract-markdown-ast tool 40abd64 Add long help for all commands 188b88d Add make targets for common tasks 14410e0 Add merge command 993f6a9 Add merge command check to doctor 91071ec Add minimum version assertion to source state 011ba83 Add minimum version check and document special files ( #272 ) 555f8ad Add missing backquote 087d9cf Add missing closing double-quote afdcb33 Add more documentation to README.md 0f6f7eb Add more questions 693ca87 Add note about golangci-lint and gofumpt bc2f2a9 Add note about upgrade to installation doc c0706ce Add note on packaging 34c3f4d Add noupgrade build tag cae1e1d Add noupgrade build tag ( #276 ) 1632584 Add reference manual and long help for all commands ( #258 ) 61f8309 Add table of contents 0553dd9 Add tables of contents 92d520c Add upgrade command 7810b62 Add upgrade command ( #265 ) 738fcd8 Add warning if source VCS command is not supported 4f57699 Change indent to two spaces to match Cobra 1ebf43c Check config file for errors after edit-config 2cb4272 Cosmetic fixes cb554ed De-duplicate goreleaser build ids 467a1d6 De-duplicate goreleaser build ids ( #277 ) a7bfe73 Doc improvements ( #267 ) 4d3e7de Document goinstaller installation d1ef895 Document gpgRecipient bbd1b81 Document merge commands ad89352 Document special files 1415432 Download modules first f322a1c Factor out Encrypt 72318e5 Factor out TargetState.Decrypt ad7a836 Fix FAQ link 8c27153 Fix FAQ link ( #260 ) cedee29 Fix caching of generic secret command output 58bf7e9 Fix calculation of current source dir mode df5c96a Fix destination flag name 2d1ba6e Fix formatting of chattr reference 7606f5e Fix grammar d98b524 Fix grammar ( #280 ) 3273255 Fix grammar in comment 19f9fa0 Fix remaining documentation FIXMEs e4f023c Fix typo 6b4e503 Fix typo c836187 Fixed link to quick start guide ef5d496 Fixed link to quick start guide ( #270 ) 2f94aa5 Generalize chattr implementation 1fa49ba Improve detection of imperfectly-formatted code 066884c Improve documentation ( #259 ) b9d6d87 Improve readability of helps.gen.go and fix examples of last command d25e457 Improve reference manual documentation 87cec4f Make code pass golangci-lint 68b2c6a Make edit work on plaintext, not ciphertext 87571b4 Misc fixes ( #263 ) 4901baf Misc fixes ( #266 ) bf7a42f Misc fixes ( #273 ) add797b More cosmetic fixes 7923310 Move documentation into docs 20c3538 Propagate Encrypted state 259c5f9 Put flags after arguments for consistency with Cobra and add more examples 038e7b5 Refactor documentation 8bcff93 Reformat paragraph fa72a55 Remove --umask flag 6e95959 Remove link to godoc.org 4ac4708 Remove list of template variables e330084 Remove pets vs. cattle comment ac75e01 Remove snap infrastructure 99513e3 Remove snap infrastructure ( #269 ) c56f61d Remove some obvious comments 81d16a0 Remove underscores from filenames 9077575 Rename HOW-TO.md to HOWTO.md f16c811 Rewrite single-case switch as if b60b022 Simplify logic 467ab16 Sort variables b9fe1c9 Split installation and quick start guides ca98784 Support encrypt attribute in chattr 854cfd5 Tolerate config file errors for certain commands b03d480 Update cmd/helps.gen.go f21f9e2 Update long help c86e2ba Upgrade by replacement if executable is in temp dir 696c2f6 Upgrade improvements ( #278 ) da941b8 Use command variable name for commands consistently 5a9f735 Use make targets in CI b3e445f Use mvdan.cc/gofumpt 9d08f18 Verify checksums when upgrading 1.4.2 (2019-04-14) 295da27 Abstract out stdin, stdout, and stderr for testing 5fabcff Add apply test a24348b Add archive test da6ac24 Add bash & zsh completion ba462c6 Add coverage badge 7c8e4b6 Add destination directory is a symlink test dbc942d Add dump test 67bc2e0 Add golint test adcd979 Add import test c0f657a Add note about pets vs. cattle 7bf62ae Add permValue test 57d009a Add ppc64 architectures to README.md 9f1232f Add snap generation and tidy up YAML files be5e240 Attempt to build snap 9092c62 Combine coverage profiles for more accurate coverage 3273eee Disable Go modules when installing linters 9619ed6 Disable snapcraft support and re-enable ppc64, ppc64le, and arm 98ec39e Don't trust golang.org/x/lint/golint 2eb4227 Export TemplateSuffix 86859d9 Factor out coverage targets into Makefile 7d0bf1d Fix cosmetics bc2edae Fixes from PR review comments 7e53826 Hint at #243 a12313c Implement config file creation from template during init command b7e2346 Make default config file format TOML 6e5813c Remove golint checks while golint is broken eb1c302 Require Go 1.12 93c585d Respect umask in dump command 99068b9 Run gofumpt -s 0109341 Switch to github.com/stretchr/testify for testing 80e441b Tidy up .goreleaser.yaml 31d5fea Tidy up .goreleaser.yaml 4ae22b9 Tidy up config file creation in init 43c26fc Use github.com/twpayne/go-xdg v3 56c0b00 Use github.com/twpayne/go-xdg/v2 9aa00ca Use vfs.Contains f8b2094 add a space before ; fi c53640c add missing ; fi to .travis.yml 5e0b43b disable goveralls on pull requests 7b72952 don't run on PRs instead of exclusively running on them 6374b6c fixing go vet error 1.4.1 (2019-03-20) 30bfacf Add git as a dependency for rpm and deb packages 8f40f2e Add ppc64 and ppc64le to goreleaser target b8bbd12 Fix #198 - Use os.UserHomeDir() instead of custom function d7e76e8 Fix new issue link in CONTRIBUTING 1.4.0 (2019-03-14) c827046 Add Mutator.Stat 8d8fb55 Add TOML as an output format e13bb89 Add gpg encryption 6075a02 Add manage as an alias for add 8406817 Add unmanage as an alias for forget e47c444 Add unmanaged command, fixes #186 cd3d86b Add userHomeDir 4cfdaac Change example configs to TOML and reformat 93d03aa Check lastpass CLI version on first call da8098b Create directory for config file before editing if needed b324637 Fix all markdownlint warnings, except one 72690a6 Fix double word in init help 201e7a5 Fix that accomodates blank lines and comments 4d32cde Make hostname only first part of hostname and add fullHostname 249e2b9 Make it clearer that the rpm packages work on OpenSUSE f2dfbb8 Only display text diffs b477972 Reduce number of semver libraries 02636ad Remove NullMutator d63c406 Remove unused function arguments 306df8b Return ErrNotExist from nullMutator.Stat b41824c Return an error instead of panicking 035988d Revert \"Remove NullMutator\" 9fea286 Revert \"Use vfs.ReadOnlyFS's instead of NullMutators\" 90d4274 Spell out lastpass --json arg ab807b1 Test to demonstrate parsing error ab1de29 Use latest github.com/twpayne/go-xdg 19947c8 Use latest version of github.com/twpayne/go-vfs 2a72a34 Use renameio correctly across multiple filesystems b1cddc3 Use userHomeDir instead of github.com/mitchellh/go-homedir 5bf7ead Use vfs.MkdirAll 18366aa Use vfs.ReadOnlyFS's instead of NullMutators 1.3.0 (2019-01-30) 7f4bd2d Add Config.getVCSInfo f385ec1 Add ID as a well-known abbreviation 4daf21d Add check for generic secret command 32146ce Add check for suspicious filenames b3e8085 Add first run git init instructions to README 9b7b268 Add hermetic text functions from sprig, fixes #184 595dcf1 Add init command 2ef2695 Add stow-to-chezmoi.sh migration script 013e419 Add update command, fixes #159 6a1a0ea Always print permissions with three digits 1ef4f89 Consider files only containing whitespace as empty abbc0c1 Don't make init command apply by default 3cc895d Emphasize flexibility first 4dee096 Ensure that source directory exists in cd command f9290fc Factor out doctorCheck interface ed27b49 Factor out doctorCheckResult 1679704 Factor out ensureSourceDirectory a3830ca Factor out runDoctorCheck bd21ee6 Factor out vcs_infos.go 4633ca1 Fix dump command with targets cf18630 Fix handling of missing directories 18911f1 Fix source directory errors in documentation, fixes #171 85b7ece Fix template in example, fixes #161 f7edc93 Fix typos in README.md 68a304c Include args in usage d249d15 Init new repo when init is called with no args 792c631 Make source VCS pull command configurable 47b305a Mention init command in README.md dfd18a1 Minor documentation change 7abd4cc Parse permissions in octal 2d3eff1 Refactor doctor command to include versions, fixes #160 b8aabb0 Refactor getting started documentation 9abe99d Refactor init command 204a5a7 Remove evident comment fc71c55 Remove unnecessary os.FileInfo.Mode() calls d7be60a Rename onepassword config var to match command 13f5d47 Replace Command with Cmd in internal structure names 61ffbf4 Respect umask when creating source directory cf305f8 Store config file in config struct e0410cd Tidy up doctor check reporting b97f37d Update description 96797da fix: several plausible failure modes for the script during routine running 1.2.0 (2019-01-18) 367c0d5 Add 1Password support, fixes #135 acbf852 Add advantages 0494cb8 Add doctor command 36cd576 Add generic secret manager support, fixes #51 932a8e9 Add support for \"secret\" command namespace 290d13e Add support for passwordstore e4c8d41 Better position transparency benefit bf45f84 Call pass show explicitly 2ff85c2 Document pass support, fixes #139 333066e Don't disable secret manager commands if binary is not present abf762f Don't export internal config structures 3a63e45 Include binary names in secret manager descriptions 209c1e2 Move keyring command into secret command f2ac9c3 Only add commands that have installed executables 015609d Re-order features based on feedback 24f7131 Remove --bitwarden-session flag 95c14a3 Rename Funcs to TemplateFuncs 718ae00 Rename field for consistency fe18833 Rename source files to match command structure 24c94fe Scan pass output up to the first newline, rather than splitting 1.1.0 (2019-01-16) a8aeb1b Add 'Why use chezmoi?' section abfe150 Add --prompt flag to add command, refs #123 d676fc6 Add chezmoi in the news section 55746d9 Add data command bbb5b2a Add link to Hacker News discussion 55bfe71 Add link to dotfiles.github.io 8677883 Add link to lobste.rs discussion fe39c57 Add link to reddit.com discussion 39c2645 Add missing dollar 8919b6c Add note about data command bf690dd Add os-release parser 341b99f Add osRelease to .chezmoi data, fixes #126 4044b1e Add table of packages 7a88b12 Add test for CGO 1fe3fe0 Add vault support, fixes #120 e0b7bad Avoid potential out-of-range access if string is empty d1ee299 Convert OS release map keys outside getOSRelease c1525d8 Convert os-release keys to JSON-like keys 61f7659 Correct source flag 9921965 Document .chezmoi.osRelease 8cc9fdd Don't add ignored files, fixes #124 4fecad4 Don't delete ignored files in exact directories 99e138e Don't duplicate licence text 34eb20d Extract target dir names when computing ignore pattern 6ac240c Factor out formatMap 6ffb4f1 Fix typo bf67981 Ignore errors from user.LookupGroupId if CGO is disabled, fixes #125 877f0cb Make error messages more consistent 53c20a0 Preserve existing directories in source state instead of renaming them 15a1cd2 Use latest version of github.com/twpayne/go-vfs 125f4ba Wrap comment 9cec1f6 dirNames: use make for init slice of string 1.0.0 (2019-01-13) d855c1e Add printing of symlinks to cat command 5529485 Don't check for config files in old locations, fixes #113 05935b1 Remove note about versioning af4b714 Use DestDir instead of TargetDir in code 7484973 Use consistent terminology in help and doc 0.0.15 (2019-01-13) fc3be3e Add CONTRIBUTING.md 2f90eef Add initial chattr test dd7e6c1 Add more tests for chattr on file 744d2cf Add octalIntValue dfc456e Add tests for chattr on symlink f9fefac Allow no- prefix to remove attributes 6ffae71 Fix chattr -private on directories 619b2ed Fix chattr of files in directories, fixes #103 60a26df Print umask in octal in help, fixes #107 c42eecf Remove FIXMEs that are now Github issues 0d8551c Remove stale FIXME 32ce15c Remove unused cobra.Command argument 1c8d357 Reorganize functions 1704912 Respect .chezmoiignore in Entry.ConcreteValue 4612ada Respect .chezmoiignore in Entry.Evaluate 84c41c7 Respect .chezmoiignore in Entry.archive d8f8445 Sort functions alphabetically 0.0.14 (2019-01-12) 20ed7e2 Set version in linux-amd64 release 0.0.13 (2019-01-12) d66bf04 Add .chezmoiignore support, fixes #91 ac412b6 Add PatternSet 9c6cedf Avoid duplicate filename in template errors 17a590c Avoid infinite loop when template value is empty 81eba36 Remove stale comment 60cb5ff Sort entries in test cab2f01 Use latest github.com/twpayne/go-vfs 0.0.12 (2019-01-11) 4e07b0e Add alphabetical test 721df9f Add edit-config command, fixes #90 bb05d54 Add inWord e4f1ca1 Add link to github.com/twpayne/dotfiles 9219d3f Compute valueRegexp when needed 0ec171a Factor out execEditor and runEditor 355aef8 Fix README.md formatting 555ea41 Improve variable substitution, fixes #89 6230dbf Use a tagged version of github.com/google/renameio 313c04b Use subtests in autotemplate tests 0.0.11 (2019-01-05) 02bcd30 Add exact support to chattr 7bb40c2 Add support for exact directories, fixes #11 447e244 Correct path to source directory 532d788 Ensure directory exists before creating .keep file 2abc9a9 Factor out AddOptions e66da3c Factor out ImportTAROptions ba1c8fa Reformat test b28a722 Remove default values a8c5ca1 Remove early reference to go-keyring 5004108 Rename jenkins to user 12d817d Shorten description 7f621cb Use interface{} for root values consistently 0.0.10 (2018-12-22) 5301881 Add --bitwarden-session flag cbd9256 Add initial Bitwarden support d068f60 Automatically parse Lastpass note values 6147683 Compute name argument fe723f8 Correct error text bbaf694 Correct variable name 4f2ddb2 Factor out addDir d9d79dd Factor out addFile 52c1768 Factor out addSymlink 66cb18c Move DirAttributes in to dir.go 703bfd6 Move FileAttributes into file.go 5e7036a Move TargetState tests into target_state_test.go c198aa1 Pass os.FileInfo to TargetState.addFile instead of perm and empty 4b9114a Reformat tests 9264001 Remove last trace of ParsedSourceDirName 72c8d6f Remove unnecessary masks 06559bc Remove unreachable code 7f9cabc Rename DirName to Name 2631a87 Rename FileName to Name c59600e Rename LinkName to linkname 04e1423 Rename ParsedSourceDirName to DirAttributes c2da0c0 Rename ParsedSourceFileName to FileAttributes 7f3b2a8 Rename TargetState.Import to ImportTAR a2bbef6 Rename internal variable 38cd4da Unify error messages across password managers 3db61d1 Use os.FileMode.Perm() consistently 0.0.9 (2018-12-16) 39e003c Don't assume that config file exists, fixes #73 3a4ea33 Don't use cgo on linux_i386 0c6aca4 Enable CGO on Linux 5aa794d Make description consistent 4c8054f Make parameter documentation more consistent 4021463 Make usage error output less verbose f6ae4f3 Prefix errors with chezmoi: 2e007a3 Refresh go modules with latest versions 4c7aa0c Remove old version infrastructure 1ddcc7e Revert \"Ignore group lookup errors, fixes #65\" 28346cc Use cobra's --version flag 0.0.8 (2018-12-14) 3913e51 Add archive documentation 13edec3 Document cd command 8e9ec60 Ignore group lookup errors, fixes #65 6449e9c Support XDG Base Directory Specification, fixes #19 0.0.7 (2018-12-14) baddf0f Generate unified diffs 52feafc Remove remaining references to Windows while Windows is unsupported 52566d9 Remove stray bracket 144b125 Restore default source VCS command 9629996 Update description to emphasize security 0.0.6 (2018-12-11) fd2f39b Add --recursive flag 6a33cdc Add Actuator.Rename f5fcdb1 Add Dir.Private c1d38dd Add Entry.ConcreteValue 842097f Add Entry.TargetName 22c530a Add FIXMEs for flags to add f1832ca Add File.Executable 66c2461 Add File.Private 20543f8 Add File.Template 15a3826 Add Symlink.Template ec77a95 Add TargetState.AddArchive 31481f7 Add YAML output 91be5c7 Add cd command 0b84bf5 Add chattr command, fixes #2 e26f3ec Add import command, fixes #50 42ecba3 Add package aliases 240ac97 Add source-path command 1f5eba6 Add test to exercise some commands 5bef462 Add type field 4556383 Apply umask last consistently 08a5345 Avoid overwriting argument before first use 8f570ef Bump version of github.com/twpayne/go-vfs 9cbae2a Check format before computing concrete value e8b97cb Clarify LastPass example a78af0e Correct function documentation 5d3ae7d Delete 'practical' section that is explained elsewhere d9fb233 Depersonalize template example bcf98b1 Disable Windows releases 242e549 Document exported struct 97818e0 Dump source and target paths, not names d7e1697 Dump state in JSON format instead of spew 6053e48 Evaluate entries before dumping them d4f8beb Export Entry.Evaluate a05d9c1 Export ParseSourceDirName 8660cb7 Export ParseSourceFileName 165397a Export ParsedSourceDirName e9e4d77 Export ParsedSourceFileName 9925c08 Factor out dir.go efd6dde Factor out file.go 2a6990d Factor out symlink.go 34a1cba Factor out target_state.go 7879a59 Fix capitalization 9312f94 Fix removal of target in remove command 4037322 Format github.com links consistently 166688c Improve short descriptions of commands b3625b2 Make it explicit that error is ignored 9db2ce1 Make it explicit that errors are ignored 5910f22 Make the NullActuator a singleton ae51ba4 Print source dir if no targets are specified c4bad5b Qualify .netrc example a8fcaa9 Quote permissions ad8add0 Refactor individual Entry application 9dc8b10 Remove --source-vcs flag ea5d380 Remove TargetState.AllEntries a35fbb4 Remove docker image building code 01086cc Remove fixed FIXME b62ac56 Remove uneccessary 'note that's 1750988 Remove unused field 307f767 Rename Symlink.Target to Symlink.LinkName bd27c36 Rename TargetState.AddArchive to TargetState.Import 55a947a Rename actuator to mutator ff58780 Rename variable for clarity 9b0e724 Replace getSourceNames with getEntries 2effdf7 Use absolute path to ignore dist directory 4387aa1 Use angle brackets for all examples 764263b Use dir, file, symlink order consistently ca06a88 Use getEntries and Entry.TargetName is remove command 615c3bd Use getEntries in cat command 4e74b17 Use getEntries in chattr command e375f25 Use getEntries in dump command 1d97198 Use targetName in archive 1804974 Use variable name ts for target state consistently a341f75 Use vfs.ReadOnlyFS to ensure all changes are made via an Actuator 0.0.5 (2018-12-02) 083d25d Add --apply, --diff, and --prompt flags to edit command, fixes #28 5527d94 Add TargetState.ApplyOne a8670c4 Add prompt f644bf2 Cache keyring lookups 53a12d1 Cache lastpass lookups 900a2e3 Extend apply command to take a list of targets, fixes #3 db96d06 Extend diff command to take a list of targets, fixes #4 a324b0b Extend verify command to take a list of targets, fixes #5 7e98072 Factor out Config.applyArgs 89440ce Make runRemoveCommand a method on Config c37b9ad Remove trailing E from function names 0.0.4 (2018-11-30) a2e6e88 Add LastPass integration 377d68e Add graceful template error handling mechanism cbb5b2d Add installation docs referring to Goreleaser-generated artefacts and Homebrew formula 377999a Add lastpass command as a wrapper for lpass 496c2ba Documentation tweaks 06f8e7a Ensure Go modules are enabled in before hook 273e14f Factor out keyringFunc e612476 Handle errors gracefully in keyring 841d2e7 Handle errors gracefully in lastpass d88b705 Make CI output less verbose 7992f60 Make template execution more strict 4c7aece Only read files and evaluate templates when required a436144 Remove GO111MODULES b45c5ad Set GO111MODULE in .travis.yml 0.0.3 (2018-11-30) cfab91b Add newline at end of file 8e8d142 Use Go 1.11.x explicitly","title":"Release history"},{"location":"reference/release-history/#release-history","text":"","title":"Release history"},{"location":"reference/release-history/#2294-2023-01-24","text":"fix: Revert buggy diff library by @twpayne in #2707 docs: note about actual auth types for GitHub private repos by @Avendattor in #2690 New Contributors @Avendattor made their first contribution in #2690 Full Changelog: v2.29.3...v2.29.4","title":"2.29.4 (2023-01-24)"},{"location":"reference/release-history/#2293-2023-01-19","text":"feat: Add --recursive flag to chattr command by @twpayne in #2697 feat: Check config file format in doctor command by @twpayne in #2696 docs: Fix typo in merge user guide by @mumumumu in #2698 fix: Support .zip files with empty internal directories by @szinn in #2701 fix: Only prompt once for KeePassXC password by @twpayne in #2704 fix: Remove problematic username guessing in init command by @twpayne in #2705 New Contributors @mumumumu made their first contribution in #2698 @szinn made their first contribution in #2701 Full Changelog: v2.29.2...v2.29.3","title":"2.29.3 (2023-01-19)"},{"location":"reference/release-history/#2292-2023-01-15","text":"chore: Update goreleaser config for v1.14 by @twpayne in #2667 feat: Add keepassxc.prompt config variable by @jcapiitao in #2677 docs: Update documentation on encryption by @twpayne in #2683 chore: Update dependencies by @twpayne in #2679 chore: Fix umask tests by @twpayne in #2688 chore: Update dependencies by @twpayne in #2694 New Contributors @jcapiitao made their first contribution in #2677 Full Changelog: v2.29.1...v2.29.2","title":"2.29.2 (2023-01-15)"},{"location":"reference/release-history/#2291-2023-01-02","text":"fix: Fix init --ssh by @twpayne in #2666 Full Changelog: v2.29.0...v2.29.1","title":"2.29.1 (2023-01-02)"},{"location":"reference/release-history/#2290-2023-01-01","text":"feat: Allow .chezmoi{external,ignore,remove} files to have a .tmpl suffix by @twpayne in #2632 feat: Add support for source paths in managed command by @twpayne in #2633 chore: Update dependencies by @twpayne in #2634 docs: Fix passphrase-once encryption instructions by @twpayne in #2636 chore: Update dependencies by @twpayne in #2639 chore(deps): bump actions/cache from 3.0.11 to 3.2.2 by @dependabot in #2641 chore(deps): bump github/codeql-action from 2.1.29 to 2.1.37 by @dependabot in #2642 chore(deps): bump goreleaser/goreleaser-action from 3.2.0 to 4.1.0 by @dependabot in #2643 chore(deps): bump actions/setup-go from 3.3.1 to 3.5.0 by @dependabot in #2644 chore(deps): bump dessant/lock-threads from 3.0.0 to 4.0.0 by @dependabot in #2645 feat: Allow cd command to take the destination directory as an argument by @twpayne in #2648 fix: Improve error message when state database cannot be locked by @twpayne in #2651 fix: Fix authentication when git is not installed by @twpayne in #2650 fix: Fix bug where edit --watch only applied the first change by @twpayne in #2654 chore: Miscellaneous updates by @twpayne in #2655 feat: Add hexDecode and hexEncode template functions by @twpayne in #2658 chore(deps): bump actions/checkout from 3.1.0 to 3.2.0 by @dependabot in #2659 Full Changelog: v2.28.0...v2.29.0","title":"2.29.0 (2023-01-01)"},{"location":"reference/release-history/#2280-2022-12-18","text":"feat: Add lstat template function by @twpayne in #2616 feat: Add --path-style option to managed and unmanaged commands by @twpayne in #2617 chore: Build with Go 1.19.4 by @twpayne in #2619 feat: Add verification of external checksums by @twpayne in #2621 chore: Update dependencies by @twpayne in #2623 Full Changelog: v2.27.3...v2.28.0","title":"2.28.0 (2022-12-18)"},{"location":"reference/release-history/#2273-2022-12-05","text":"chore: Move GitHub Actions off soon-to-be-deprecated Ubuntu 18.04 by @twpayne in #2604 chore(deps): bump golangci/golangci-lint-action from 3.3.0 to 3.3.1 by @dependabot in #2605 chore(deps): bump github.com/Masterminds/sprig/v3 from 3.2.2 to 3.2.3 by @dependabot in #2607 chore(deps): bump reviewdog/action-misspell from 1.12.2 to 1.12.3 by @dependabot in #2606 chore: Update dependencies by @twpayne in #2611 fix: Don't attempt to run empty scripts by @twpayne in #2612 fix: Respect config file umask setting when creating entries by @twpayne in #2613 Full Changelog: v2.27.2...v2.27.3","title":"2.27.3 (2022-12-05)"},{"location":"reference/release-history/#2272-2022-11-25","text":"fix: Make re-add command respect --interactive flag by @twpayne in #2569 feat: Add an optional path argument to the cd command by @twpayne in #2579 feat: Make it easier to use non-git VCSes by @twpayne in #2580 fix: Allow underscores in SourceHut usernames by @twpayne in #2582 fix: Respect diff filter in removes with external diff tool by @twpayne in #2592 chore: Release fixes by @twpayne in #2593 chore: Update dependencies by @twpayne in #2596 Full Changelog: v2.27.1...v2.27.2","title":"2.27.2 (2022-11-25)"},{"location":"reference/release-history/#2271-2022-11-13","text":"fix: Don't show always scripts in apply --verbose when excluded from diffs by @twpayne in #2565 feat: Remember HTTP username in URL in init command by @twpayne in #2562 chore: Make generation of versioninfo.json work without tags or git repo by @twpayne in #2566 Full Changelog: v2.27.0...v2.27.1","title":"2.27.1 (2022-11-13)"},{"location":"reference/release-history/#2270-2022-11-09","text":"fix: Revert cpina/github-action-push-to-another-repository version bump by @bradenhilton in #2527 chore: Install Go in test-website and deploy-website jobs by @twpayne in #2528 feat: Suppress newlines from onepasswordRead by @halostatue in #2532 chore(deps): bump golangci/golangci-lint-action from 3.2.0 to 3.3.0 by @dependabot in #2533 feat: Allow modify_ scripts to be executed as templates by @twpayne in #2529 chore: Blacklist buggy version of github.com/bmatcuk/doublestar/v4 by @twpayne in #2537 chore: Build with Go 1.19.3 by @twpayne in #2541 feat: Add line ending template directive by @twpayne in #2540 feat: Add setValueAtPath template function by @twpayne in #2542 fix: Don't merge non-files in merge-all command by @twpayne in #2543 feat: Add --script-contents flag to diff command by @twpayne in #2544 docs: Add line endings directive documentation by @bradenhilton in #2547 docs: Fix typos in Sourcehut repo patterns by @kjerstadius in #2552 chore: Better handle errors when globbing by @twpayne in #2538 feat: Add cat-config and dump-config commands by @twpayne in #2553 chore: Remove unused field by @twpayne in #2554 chore: Refactor handling of annotations by @twpayne in #2555 feat: Allow prompt*Once template functions to take paths by @twpayne in #2557 fix: Fix exclusion of externals by @twpayne in #2558 chore: Update dependencies by @twpayne in #2559 feat: Add completion template function by @twpayne in #2560 New Contributors @kjerstadius made their first contribution in #2552 Full Changelog: v2.26.0...v2.27.0","title":"2.27.0 (2022-11-09)"},{"location":"reference/release-history/#2260-2022-10-31","text":"feat: Improve handling of include and exclude for externals and encrypted files by @twpayne in #2451 feat: Extend --include and --exclude flags to include templates by @twpayne in #2455 feat: Add per-template configurable delimiters by @twpayne in #2457 chore: Fix user guide link in support issue template by @bradenhilton in #2464 chore(deps): bump github/codeql-action from 2.1.26 to 2.1.27 by @dependabot in #2459 docs: Update homepage by @twpayne in #2458 chore(deps): bump dorny/paths-filter from 2.10.2 to 2.11.1 by @dependabot in #2460 chore(deps): bump actions/cache from 3.0.9 to 3.0.11 by @dependabot in #2461 chore(deps): bump sigstore/cosign-installer from 2.7.0 to 2.8.0 by @dependabot in #2462 chore(deps): bump cpina/github-action-push-to-another-repository from 9e487f29582587eeb4837c0552c886bb0644b6b9 to 940a2857e598a6392bd336330b07416c1ae8ea1f by @dependabot in #2466 chore: Update dependencies by @twpayne in #2465 chore(deps): bump actions/checkout from 3.0.2 to 3.1.0 by @dependabot in #2463 chore: Tweak template directive implementation by @twpayne in #2467 chore: Miscellaneous fixes by @twpayne in #2469 feat: Add option to exclude scripts that are always run by @twpayne in #2473 fix: Extend template directives functionality by @halostatue in #2471 chore: Update dependencies by @twpayne in #2474 docs: Add faq entry for templates pre-requisites by @felipecrs in #2476 docs: Add release notes and release history by @twpayne in #2477 docs: Add note on setting .ps1 interpreter to pwsh by @bradenhilton in #2478 chore: Fix comments that start from an incorrect name by @alexandear in #2481 chore: Add package descriptions by @twpayne in #2485 fix: Include git repo external state in state dump output by @twpayne in #2487 docs: Add FAQ entry on snap stdin/stdout redirect bug by @twpayne in #2488 chore: Use fs.ModePerm instead of 0o777 for all permissions by @twpayne in #2489 chore: GitHub Actions fixes by @twpayne in #2492 docs(bitwarden): Correct bitwardenFields example by @choznerol in #2493 feat: Populate VERSIONINFO on Windows builds by @bradenhilton in #2479 chore: Update dependencies by @twpayne in #2494 docs: Remove duplicate words by @bradenhilton in #2497 chore: Improve error messages from git-repo externals by @twpayne in #2501 fix: Construct templateDataMap manually by @halostatue in #2503 feat: Add --recurse-submodules flag to init command by @twpayne in #2511 feat: Add --recurse-submodules flag to update command by @twpayne in #2512 chore: Reorder eqFold template function reference page by @bradenhilton in #2513 chore: Fix refactored --include and --exclude flags by @twpayne in #2514 chore: Add test for .chezmoiignore and scripts by @twpayne in #2515 chore: Update dependencies by @twpayne in #2516 chore: Minor documentation tweaks by @twpayne in #2518 chore: Release improvements by @twpayne in #2517 chore(deps): bump goreleaser/goreleaser-action from 3.1.0 to 3.2.0 by @dependabot in #2519 chore(deps): bump actions/upload-artifact from 3.1.0 to 3.1.1 by @dependabot in #2520 chore(deps): bump actions/setup-go from 3.3.0 to 3.3.1 by @dependabot in #2522 chore(deps): bump github/codeql-action from 2.1.27 to 2.1.29 by @dependabot in #2523 chore(deps): bump sigstore/cosign-installer from 2.8.0 to 2.8.1 by @dependabot in #2521 Full Changelog: v2.25.0...v2.26.0","title":"2.26.0 (2022-10-31)"},{"location":"reference/release-history/#2250-2022-10-13","text":"docs: Add FAQ entry on multiple source states by @twpayne in #2391 chore: Separate out test-release step by @twpayne in #2392 chore: Add check for keepassxc-cli version in keepassxcAttachment by @twpayne in #2397 chore: Fix typo in entrytypeset.go by @sm1999 in #2400 chore: Add test that chezmoi apply uses textconv by @twpayne in #2401 fix: Use textconv in interactive diffs by @twpayne in #2402 chore(deps): bump actions/cache from 3.0.8 to 3.0.9 by @dependabot in #2410 chore(deps): bump github/codeql-action from 2.1.21 to 2.1.26 by @dependabot in #2411 feat: Add shell completion for --include and --exclude flags by @twpayne in #2419 chore: Bump Go and golangci-lint versions by @twpayne in #2420 chore: Update dependencies by @twpayne in #2421 chore: Copy github.com/twpayne/go-shell into module by @twpayne in #2422 feat: Add eqFold template function by @bradenhilton in #2409 feat: Add scriptEnv configuration variable by @twpayne in #2423 chore: Set Go version in govulncheck by @twpayne in #2428 chore: Only read .chezmoiroot once by @twpayne in #2431 feat: Sign release assets by @twpayne in #2394 chore: Use build info to set commit and date, if available by @twpayne in #2434 chore: Use ReadDir to find config files and templates by @twpayne in #2435 chore: Use GitHub native changelogs for releases by @twpayne in #2438 feat: Use target paths in automatically generated commit messages by @twpayne in #2439 chore: Automatically deploy website after release by @twpayne in #2437 feat: 1Password account lookup table by @halostatue in #2425 chore: Refactor 1Password account map by @twpayne in #2440 docs: Use get.chezmoi.io for install links by @twpayne in #2441 feat: Add get.chezmoi.io/ps1 by @twpayne in #2443 chore: Fail if multiple config file templates or config files are found by @twpayne in #2444 fix: Make chattr {no,}encrypted decrypt and encrypt source file by @twpayne in #2447 chore: Update dependencies by @twpayne in #2448 feat: Expose template data in environment variables by @twpayne in #2429 chore: Use GitHub output in govulncheck workflow by @twpayne in #2450 Full Changelog: v2.24.0...v2.25.0","title":"2.25.0 (2022-10-13)"},{"location":"reference/release-history/#2240-2022-09-25","text":"bb8d5794 docs: Add FAQ entry on --verbose and --debug flags fb595f2c docs: Add link to article 0f58586f docs: Elaborate on once vs onchange attributes b970bc17 feat: Add always/auto/never options to --refresh-externals flag 21e99c72 feat: Add option to suppress warnings a29abcf4 feat: Improve performance of the externals cache da407b60 fix: Avoid double read of source state in merge-all and status commands 1fbe862d fix: Preserve case in user template data 9dda54a5 fix: Respect .chezmoiroot in source-path command with no arguments","title":"2.24.0 (2022-09-25)"},{"location":"reference/release-history/#2230-2022-09-19","text":"6e49147b docs: Add hints about escaping diff and merge args in config file template f1b404d0 docs: Add link to video 2c3a349e docs: Change remote origin from ssh to https 4d686124 docs: Update symlink design question with docs on edit --watch 8b4b8563 feat: Add --progress flag to show progress when downloading externals ccb897c5 feat: Add passhole password manager support 994a0c73 feat: Always set and restore Windows console cf512599 feat: Use bubbletea for user input 8054dffc fix: Don't write file specified by --output atomically 80576f52 fix: Ignore commands when creating archives 83f01eb5 fix: Only read source state if needed in source-path command c1a53e1a fix: Treat git-repo externals as directories of include/exclude purposes","title":"2.23.0 (2022-09-19)"},{"location":"reference/release-history/#2221-2022-09-04","text":"64b9c1fa fix: Fix handling of newlines in comment template function 4950fc33 fix: Make includeTemplate function first search in .chezmoitemplates","title":"2.22.1 (2022-09-04)"},{"location":"reference/release-history/#2220-2022-09-01","text":"6625f291 docs: Add FAQ entry on sharing shell history 097a88c6 docs: Add note on script execution order 3b6edafe docs: Fix a coloring issue that lines and texts in Mermaid diagrams are hardly visible in dark mode 3e6e26d3 feat: Add includeTemplate template function bf5b6740 feat: Add initial fig support 41644bbc feat: Add support for loong64 architecture 7a525b79 fix: Apply changes to directories recursively when editing directories 03a91ca0 fix: Only use quotes if necessary in toIni template function","title":"2.22.0 (2022-09-01)"},{"location":"reference/release-history/#2211-2022-08-29","text":"f4be0e07 docs: Add link to package installation 9f207f4f docs: Add summary paragraph c60b4067 feat: Add edit.apply configuration variable 75b0569a feat: Add secret.args configuration variable b59f1278 fix: Detect SSH clones from URL when using builtin git 4919c1ab fix: Fix panic when absolute paths are used in externals 8b420af1 fix: Respect format configuration variable in data, dump, and state commands","title":"2.21.1 (2022-08-29)"},{"location":"reference/release-history/#2210-2022-08-23","text":"c8399bc2 docs: Add FAQ entry on init template functions e2ec7c53 docs: Add instructions for using chezmoi with Watchman dc2ec238 docs: Add link to repology.org 4d086c20 docs: Remove unmaintained Guix package 485850fd docs: Use install-from-git-working-copy in installation instructions 9e4629f9 feat: Add --interactive flag 86026221 feat: Add --prompt flag to init command f98264ba feat: Add --prompt* flags to init command 02b89540 feat: Add fromIni template function ffbb3671 feat: Add gitHubLatestTag template function ac0c7593 feat: Add initial --watch flag to edit command 3af5c7fa feat: Add toIni template function db4da31f feat: Improve support for external diff commands 84afa19e fix: Handle .chezmoiroot in init command 75833874 fix: Remove broken symbolic links in exact_ directories","title":"2.21.0 (2022-08-23)"},{"location":"reference/release-history/#2200-2022-07-29","text":"5fdc5807 docs: Add Termux package install instructions 150144e9 docs: Add dark mode option 24db0849 docs: Prioritize package installation over curl | sh installation 199d62e6 feat: Add comment template function c0e2f530 feat: Add generate command to generate install script 4dfd2064 feat: Add onepasswordRead template function 06b212b1 feat: Add promptBoolOnce, promptIntOnce, and promptStringOnce init template functions ebeb8df4 feat: Add replaceAllRegex template function 84e7a939 feat: Make managed command accept destination directory args f8eabef8 feat: Make unmanaged command accept destination directory args 9316c5a6 feat: Track source state origins more precisely 851efe3c fix: Fix dropping of input when prompting for multiple values from piped stdin","title":"2.20.0 (2022-07-29)"},{"location":"reference/release-history/#2190-2022-07-17","text":"47db4540 docs: Add section on muting gpg output 9dea4ea9 feat: Add fromToml and toToml template functions ac6af02d feat: Add support for AWS Secrets Manager 074899d6 feat: Allow dashes in keys in template data in config file 132d1843 fix: Fix FQDN hostname on FreeBSD 03eb6728 fix: Fix forget command when asked to forget an external 304f52ab fix: Fix merge command for encrypted files in subdirectories 50dd19c4 fix: make install creates the bin/ dir if necessary, and uses the unambiguous --target-directory form of install.","title":"2.19.0 (2022-07-17)"},{"location":"reference/release-history/#2181-2022-06-23","text":"b944a845 docs: Add CPU cores/threads template 1c607344 docs: Improve documentation of chezmoi's concepts 2ee341c6 feat: Re-enable building of snaps","title":"2.18.1 (2022-06-23)"},{"location":"reference/release-history/#2180-2022-06-20","text":"817d3e7f feat: Stop building snaps\\n ab6bc8d9 feat: Make add command add empty files, remove --empty flag\\n 755e02f4 fix: Don't return an error when the user chooses quit from a prompt\\n b5543295 feat: Implement documented add --prompt flag\\n b95449f8 docs: Remove stray whitespace\\n ebeebcb0 docs: Add extra documentation to autotemplate\\n 991a6307 docs: Clarify what 'source state' means\\n 2421da82 fix: Check .chezmoiversion in init command\\n 25b32fbf feat: Give more context in Windows errors\\n 9605e40f feat: Make --autotemplate escape template markers\\n 2c895411 feat: Support determining FQDN via /etc/myname\\n 281e770a feat: Support multiple GPG recipients\\n cbed7199 feat: Include git working tree state in doctor output\\n 87c1a915 docs: Use modeline to set filetype in VIM\\n 1af05761 feat: Include last modified time of config file in doctor output\\n 44762fdf feat: Add quoteList template function\\n 2bf12108 feat: Add textconv configuration for friendlier binary diffs\\n 814f1f20 docs: Refactor Windows chassisType template\\n 7199cb29 docs: Add link to blog\\n d29344f0 fix: Improve quality of POSIX shell scripts\\n f2f8d87a docs: Add link to blog post\\n","title":"2.18.0 (2022-06-20)"},{"location":"reference/release-history/#2171-2022-05-30","text":"1f92965e docs: Add information about chezmoi_modify_manager 8b78d2bd docs: Add link to podcast fdd29a51 docs: Fix typo in kubeconfig documentation 7d2d6293 docs: Organize related software page into sub-sections 7084bd55 fix: Fix dump command in the presence of config file templates 2d272293 fix: Include git repo commands in dump command output","title":"2.17.1 (2022-05-30)"},{"location":"reference/release-history/#2170-2022-05-26","text":"d178db41 feat: Add uid and gid template variables 658be534 feat: Add windowsVersion to builtin template data 21e2666e fix: Parse $EDITOR and $VISUAL environment variables as shell commands","title":"2.17.0 (2022-05-26)"},{"location":"reference/release-history/#2160-2022-05-19","text":"e0b3ace7 feat: Add support for Keeper password manager c4a47794 feat: Build for mips64 and mips64le 17c480b2 feat: Build for riscv64 1a63dc28 feat: Complete auto bool, format, and mode flag values 187112da fix: Connect password manager std{in,err} to os.Std{in,err} 7485aeab fix: Don't complete _chezmoi in zsh completion ef2be283 fix: Fix use of slashes in glob on Windows","title":"2.16.0 (2022-05-19)"},{"location":"reference/release-history/#2154-2022-05-09","text":"8168ab95 docs: Add chezmoiexternal related links to user-guide/reference docs a0d699c2 docs: Add example of extracting selected files from external archive 47a29407 docs: Add some additional details to contributing-changes.md 1c11ff13 fix: Fix external archive, sub-directory include, no excludes","title":"2.15.4 (2022-05-09)"},{"location":"reference/release-history/#2153-2022-05-08","text":"ccb709c4 docs: Add hint on random access in modify_ scripts b525c504 feat: Add --guess-repo option to init command","title":"2.15.3 (2022-05-08)"},{"location":"reference/release-history/#2152-2022-05-01","text":"cbfe3885 docs: Add clarification about all lowercase custom data fields 84ac2e23 docs: Add guide on encrypting files with GPG and a passphrase 8552a4c8 docs: Add links to blog and video 7b83a170 docs: Add troubleshooting entry on scripts on Termux 4de3fdc7 docs: Document workaround for #1574 d5076094 docs: Minor tweaks 956b4493 docs: Use index function to access an item in the example 58f9f451 feat: Add glob template function fe0b6cf8 feat: Build with Go 1.18.1 eaa27b35 fix: Don't cache negative results of path lookups","title":"2.15.2 (2022-05-01)"},{"location":"reference/release-history/#2151-2022-04-10","text":"d2974091 docs: Add section on understanding chezmoi's files and directories cd74d0c3 docs: Document KeepassXC with YubiKey limitations f0817a0d docs: Fix path to config file template 462e547e docs: Tidy up KeepassXC reference documentation 6cd2766e feat: Use diff.command for all verbose output 58c458cb fix: Fix apply --verbose when diff.command is set f45b73a7 fix: Fix concurrent map writes on sourcestate.ignoredRelPaths 95d52983 fix: Ignore exit status 1 from external diff commands","title":"2.15.1 (2022-04-10)"},{"location":"reference/release-history/#2150-2022-04-03","text":"2fa910f6 docs: Add command overview d051e7a3 docs: Add link to blog post d2a44173 docs: Add link to podcast ecdb07b6 docs: Adjust documents for 1Password CLI 2.0.0 changes 9b1b5fba docs: Document that the ioreg template function is deprecated 8e7bbde2 docs: Factor out GitHub template functions into a separate section 4cabbc2a docs: Factor out init template functions into a separate section 19e6d008 docs: Factor out password manager functions into separate sections f3ef8be2 docs: Improve FAQ entry on source state filenames cb02477f docs: Improve docs on empty files in chezmoi edit caa91200 docs: Update dconf example as dconf only reads stdin 08138ab8 docs: Use $VARIABLE instead of 3f035a6d feat: Add diff.reverse configuration variable d1374cf8 feat: Add ignored command 38be3850 feat: Add keepassxcAttachment template function 4e6b8438 feat: Build for s390x architecture 523fdb2b fix: Fix one line install instructions for Windows 8d052c0f fix: Fix op signin for 1Password CLI 2.0.0 8910adb4 fix: Fix parsing of multiline KeepassXC attributes a08c8919 fix: Fix use of drives as home directories on Windows b9995091 fix: Prefer id over label for onepasswordDetailsFields template function","title":"2.15.0 (2022-04-03)"},{"location":"reference/release-history/#2140-2022-03-09","text":"a3a1e173 docs: Add contributors image 28c2718a docs: Add license to website 538b9824 docs: Add link to article 32c0f02d feat: Add include and exclude patterns to external archives ebfd5b28 feat: Add license command 5a143268 feat: Release raw binaries","title":"2.14.0 (2022-03-09)"},{"location":"reference/release-history/#2131-2022-03-04","text":"dd0037b8 feat: Add scriptTempDir config var for temporary scripts 816e5eee feat: Change default Python interpreter to python3 a4d989b2 fix: Allow user and repo to set in install script e2e199bd fix: Fix confusing error message when using builtin git to init over SSH","title":"2.13.1 (2022-03-04)"},{"location":"reference/release-history/#2130-2022-02-26","text":"e8ee359c docs: Add link to article 3f36946b docs: Document extracting a single file from an archive 843ba334 docs: Improve scripts user guide 585adb1f feat: Add initial git-repo external type e299d90d feat: Add option to exclude externals 5f39fec6 feat: Add status.exclude configuration variable 24513146 feat: Add verify.exclude configuration variable fd47686c feat: Allow overriding GitHub user in shell installer 08991d12 feat: Enable GNOME Keyring support on FreeBSD 881cb7e7 fix: Correctly cut hostname off at . character","title":"2.13.0 (2022-02-26)"},{"location":"reference/release-history/#2121-2022-02-20","text":"1fbc2ae6 feat: Be more strict about presence of source directory baac6fc2 feat: Support arguments in Windows SHELL environment variable","title":"2.12.1 (2022-02-20)"},{"location":"reference/release-history/#2120-2022-02-15","text":"e9342a8d feat: Add target-path command d228a50d feat: add support for xz archives 6228e09c fix: Fix bug where chezmoi init --apply did not configure encryption","title":"2.12.0 (2022-02-15)"},{"location":"reference/release-history/#2112-2022-02-03","text":"13de45fd fix: Disable problematic concurrent source dir read","title":"2.11.2 (2022-02-03)"},{"location":"reference/release-history/#2111-2022-02-02","text":"46c6766d fix: Fix race condition with multiple .chezmoiignore files","title":"2.11.1 (2022-02-02)"},{"location":"reference/release-history/#2110-2022-02-02","text":"c1271ff4 feat: Add initial support for 1Password CLI 2.0 86ec4b81 feat: Add remove_ attribute for directories dc919e6b feat: Include removed directories in diff output of external diff command 8a84b310 feat: Make chezmoi's core functionality available as a Go module","title":"2.11.0 (2022-02-02)"},{"location":"reference/release-history/#2101-2022-01-23","text":"b4841ec9 fix: Fix add command when parent dir permissions have changed 71ca1f65 fix: Ignore files and directories beginning with . in .chezmoitemplates 2fd7a020 fix: Make data and execute-commands not depend on valid source state","title":"2.10.1 (2022-01-23)"},{"location":"reference/release-history/#2100-2022-01-16","text":"724227ba feat: Add chezmoi.io/get install URL 65b6cb31 feat: Add list command as an alias for managed ed62bbf4 feat: Append / to completed directories 5aca99ad feat: Disable custom completions by default 7cd21aa8 feat: Remove docs command 31298866 feat: Switch to Material for MkDocs for website","title":"2.10.0 (2022-01-16)"},{"location":"reference/release-history/#295-2022-01-05","text":"b9aeae9a feat: Add passFields template function 326b5788 feat: Prompt for 1password password if no session token is set 2b98c149 fix: Fix shell completion for relative paths 35af8627 fix: Make exit template function init only","title":"2.9.5 (2022-01-05)"},{"location":"reference/release-history/#294-2021-12-19","text":"e25d5012 feat: Add exit template function cdac4645 feat: Add secret keyring delete command e2899b81 feat: Improve inconsistent state error with removes 05e94c66 fix: Add missing --value flag to secret keyring set command 5b50963e fix: Avoid panic when unknown URL schemes are used 68fff1c1 fix: Fix include template function on Windows with absolute path","title":"2.9.4 (2021-12-19)"},{"location":"reference/release-history/#293-2021-12-13","text":"126cb0c4 feat: Add --cache option and .chezmoi.cacheDir template variable 89aec79d feat: Add more intelligent completion of targets, attributes, and docs 66728aa8 feat: Follow symlinks in .chezmoitemplates e1f2d155 fix: Fix .chezmoiversion check when using dev version","title":"2.9.3 (2021-12-13)"},{"location":"reference/release-history/#292-2021-12-02","text":"8e8ef0f2 fix: Don't mark .chezmoiscripts as suspicious in doctor command a2c5685a fix: Read .chezmoiversion before other files","title":"2.9.2 (2021-12-02)"},{"location":"reference/release-history/#291-2021-11-30","text":"ecb6c1d9 feat: Add .chezmoi.configFile template variable 3560b201 feat: Add .chezmoi.workingTree template variable d70de7ae feat: Extend upgrade command to work on more operating systems d23b428e fix: Check for .chezmoiversion outside .chezmoiroot ccf69713 fix: Fix use of .chezmoiroot in multiple commands","title":"2.9.1 (2021-11-30)"},{"location":"reference/release-history/#290-2021-11-28","text":"219a09e2 feat: Add .chezmoiscripts directory ec2b92af feat: Add edit.hardlink config var and edit --hardlink flag 7d31ecbf feat: Add fromYaml template function 988fcdcf feat: Add state delete-bucket command ff1e81d9 feat: Add state get-bucket command da41e0fa feat: Add toYaml template function 98b6a393 feat: Apply diff.exclude to all diffs 33c3e979 feat: Make verbose settable in the config file 5672e1f9 fix: .chezmoiremove with * when destDir is / aac0fd6b fix: Handle symlinks in zip archives e7e6932f fix: Respect .chezmoiroot when generating config file","title":"2.9.0 (2021-11-28)"},{"location":"reference/release-history/#280-2021-11-20","text":"9cbfdf6f feat: Add --persistent-state option for location of persistent state file cbac205c feat: Add --reverse option to diff command dec87894 feat: Add .chezmoi.executable template variable 8a6d4d76 feat: Add .chezmoiroot to allow source state to be subdir of source dir 518313bb feat: Add cache HTTP client to cache downloads in .chezmoiexternal. 8e1d6478 feat: Add gitHubLatestRelease template function ebacee73 feat: Add support for Homebrew on Linux to upgrade command 3a4c1d0b feat: Add upgrade method to doctor command output 90120fe2 feat: Caching the response of the GitHub API 240f7ecd feat: Make .chezmoidata. and .chezmoitemplates available in .chezmoiignore 53cfa6eb fix: Return unparsed gopass output in gopassRaw template func e9e4712a fix: Warn, don't fail, if age version cannot be parsed in doctor command 016da7a5 fix: lookPath panics when file does not exists","title":"2.8.0 (2021-11-20)"},{"location":"reference/release-history/#275-2021-11-07","text":"2a39175b feat: Add pinentry as an option for reading passwords 823836ce feat: Extend chattr command to change target types bf8a1850 fix: Make chezmoi add command respect .chezmoiignore","title":"2.7.5 (2021-11-07)"},{"location":"reference/release-history/#274-2021-11-02","text":"9d621f7a feat: Add .chezmoi.args template variable 27938e65 feat: Allow equivalent directory entries in source state and externals 61135287 feat: Create parent directories for externals if needed 83bad0ac fix: Fix upgrade command for non-amd64 packages","title":"2.7.4 (2021-11-02)"},{"location":"reference/release-history/#273-2021-10-23","text":"5d2fb13e feat: Add Illumos support 14a475d1 feat: Add Solaris support","title":"2.7.3 (2021-10-23)"},{"location":"reference/release-history/#272-2021-10-19","text":"67e08067 fix: Fix promptString default on Windows","title":"2.7.2 (2021-10-19)"},{"location":"reference/release-history/#271-2021-10-17","text":"35eb6518 feat: Add default argument to promptBool template function 7e2e64dc feat: Add default argument to promptInt template function 951fc7e4 feat: Add default argument to promptString template function 87033e24 fix: Apply .chezmoiignore to externals","title":"2.7.1 (2021-10-17)"},{"location":"reference/release-history/#270-2021-10-12","text":"91c91f06 docs: fix .chezmoiignore example 92ce33c1 feat: Add decrypt and encrypt template functions 42e8323f feat: Add merge-all command c8f113ff feat: Add onchange_ attribute for scripts f54deef4 feat: Improve messages and logging when using builtin git init 02abd9a4 fix: Allow create_ entries to be templates 20abba43 fix: Clarify behavior of run_once_ scripts ebc01497 fix: Fix status for onchange scripts","title":"2.7.0 (2021-10-12)"},{"location":"reference/release-history/#261-2021-10-03","text":"8d9a89b0 feat: Re-enable building with Go 1.16","title":"2.6.1 (2021-10-03)"},{"location":"reference/release-history/#260-2021-10-02","text":"29464c68 chore(deps): bump assets/chezmoi.io/themes/book c189d22f docs: Improve docs on externals 157b0b70 feat: Add --init flag to all relevant commands 78ae6c69 feat: Add refreshPeriod option to externals 3d18ae89 feat: Make chezmoi edit invoke editor with target filenames 8fda89b2 fix: Fix upgrade command on non-amd64 Linux machines","title":"2.6.0 (2021-10-02)"},{"location":"reference/release-history/#251-2021-09-30","text":"cbc2f1e7 docs: Add FAQ entry on diff colors not working fa09effd docs: fix error in HOWTO guide 55a4b93d feat: Add --init option to update command f42866bc feat: Add working tree config option ( #1459 ) f86d7b55 feat: Make chezmoi edit with no args open working tree ( #1455 ) b7fb2153 fix: Allow modify_ scripts to be encrypted","title":"2.5.1 (2021-09-30)"},{"location":"reference/release-history/#250-2021-09-23","text":"48b80964 Add Vagrant-based tests to CI d439e7f2 Add doctor check for multiple config files a79ba2f0 Add example to onepasswordItemFields documentation 167638f0 Add filter option for externals ccf78c50 Add how-to entry on managing file permissions but not contents 74c06e49 Add link to podcast 9e26b17c Add readonly_ attribute for files and directories 47936f64 Add support for .chezmoiexternal files in subdirectories 22c3f68d Add support for readonly attribute to chattr command a9094639 Allow the format of external archives to be set explicitly 6f405244 Cache Vagrant Boxes in CI 6ec4d02f Change gitlab link for other people's dotfiles 4f1a9772 Detect archive format from content if needed 99968493 Detect when the source directory is already in a git working copy 4d76d938 Disable GPG tests on Windows 402c8cbe Enable age tests on Windows CI e79bbb14 Expand FAQ entry on build from source errors 0739933a Fix CLI flags not taking precedence over configuration 0bf08f4e Fix more command line flags overriding config vars cbc6b155 Fix permissions for CodeQL analysis 89a66fad Fix permissions in diff output when user sets a stricter umask 0fa5f5a2 Guess format of chezmoi archive from output filename b43e26ec Improve consistency of source state read from externals 188bae94 Improve internal logging infrastructure 47ce7384 Improve logging in Windows CI 717b5d10 Make Makefile more portable a86ca9e2 Merge test-release job into test-ubuntu 0695b0c3 Minor docs fixes 59cfe213 Only create .keep files when adding empty directories e6536275 Only warn if version or commit are not set in doctor command 839703d1 Propagate failures in Vagrant CI scripts ab2fa725 Reduce duplication of Go version in CI 69f6a33f Reduce duplication of versions in build and CI system b5bbe673 Revert \"Disable GPG tests on Windows\" e63d0e73 Separate OS-specific CI jobs 420ec58c Skp whitespace linting of temporary Vagrant files e94cd8b5 Support paths containing spaces in VIM integration 54608764 Tidy up error message when doctor command cannot parse version ea592671 Update Vagrant-based tests eaad1f6a Update dependencies","title":"2.5.0 (2021-09-23)"},{"location":"reference/release-history/#240-2021-09-10","text":"736aaa1b Add decrypt command 0b2692ac Add doc on detemining whether the machine is a laptop or desktop ed65ef68 Add encrypt command 98b92c23 Add initial --use-builtin-age flag dd116f79 Build with Go 1.17.1 63610a43 Extend init command to guess the user's username for private repos 34ecd673 Fix internal capitalization of age da04181b Simplify internal use of auto bools 2ff41516 Update dependencies","title":"2.4.0 (2021-09-10)"},{"location":"reference/release-history/#231-2021-09-08","text":"4fa36ee9 Add link to blog post 778fd4c3 Add link to podcast 89fd2382 Add new media links 60703f81 Add onepasswordItemFields template function 57ab1f25 Append path arguments to diff command if not provided by user a761f3fd Append path arguments to merge command if not provided by user 62e02ff1 Bump age to version 1.0.0 8370209c Bump golangci-lint to version 1.42.1 5a51c9e7 Conceal the user's username in doctor command output a318652c Require Go 1.17 to build and log Go version in debug mode","title":"2.3.1 (2021-09-08)"},{"location":"reference/release-history/#230-2021-09-04","text":"7cee590e Add how-to entry on using private dotfile repos 9e77ea56 Add remove_ attribute ad1c938a Add support for zip archives to .chezmoiexternal 5c61b955 Add support for zip archives to import command 433bdcc5 Add umask check to doctor command 091979d5 Add undocumented --safe=false command line flag 2ff4214c Bump assets/chezmoi.io/themes/book from 50147be to a656d71 01ac1d0d Fix install from source documentation 8ca5448f Improve contributing docs 97a7e0ec Log debug information in chezmoi apply 0a2a40c5 Log version and args on startup in debug mode 767e8347 Remove accidentally unimplemented --remove option 570f91a1 Remove stale FIXMEs","title":"2.3.0 (2021-09-04)"},{"location":"reference/release-history/#220-2021-08-30","text":"c03209f Add .chezmoiexternal for external files and archives 0346200 Add support for encrypted externals 49c34ea Add tests for multiple OSes using Vagrant 08822e2 Check all shell scripts with shellcheck 9a9d2f2 Fix bug when using custom diff tool on a file in a subdirectory 0d82773 Make Makefile more consistent d6f48f4 Pass context when reading source state b06c2a6 Recognize .tbz2 files as archives e946bf5 Reduce test verbosity on Cirrus CI 3b84841 Remove Cirrus CI 434c29f Rename internal variables for consistency 78d52d2 Suppress initial branch name hints from git in chezmoi init 00763d2 Tidy up code structure 021eaf1 Tidy up documentation 4937ea6 Update dependencies a6e3d9a Update media links 2cec38f Update tests for OpenBSD tar output","title":"2.2.0 (2021-08-30)"},{"location":"reference/release-history/#216-2021-08-22","text":"3c476d9 Add --recursive flag to remove command 461ea4a Add executable check to doctor command 20b323c Add link to podcast and notes bec5350 Add more explicit documentation on config file location 994e633 Add more related software 81094bf Add note on using -- in chattr 70efaab Add test of the output and fromJson template functions a25b911 Add windows/arm builds 137e07e Build with Go 1.17 11d84ed Bump golangci-lint to v1.42.0 6d5f658 Create .keep files when adding directories 4619b09 Fix bug where adding a dir with a trailing slash added it twice 8eef5e4 Fix creation of .keep files when umask is 002 5afe5a2 Improve how-to on diff and merge customization de5cb42 Improve type safety in encryption code f8d7368 Make remove command remove entries from persistent state ed95a58 Miscellaneous Go 1.17 fixes 5b0138a Tidy up suspicious entries list in doctor command dc319c4 Tidy up test scripts 5d2126b Tranparently decrypt files in merge command","title":"2.1.6 (2021-08-22)"},{"location":"reference/release-history/#215-2021-08-11","text":"817e4d9 Add --config-type option so config file can be read from stdin 7b3e307 Add function for running idempotent commands 002742c Add initial suport for external diff tools e4ac1b5 Add symlink mode 7576466 Build with Go 1.16.7 182b937 Fix chezmoi execute-template --init to not read chezmoidata 60ae6b2 Fix spacing error in docs 8144975 Fix the FreeBSD installation method 0eb5348 Improve error messages for configurable merge tool arguments 3304f6a Improve internal testing functions 2726d9f Include .exe extension in Windows build artifact name 70a85f0 Normalize symlinks on Windows d79c30e Rename internal function for clarity cb4ee88 Tweak doc formatting","title":"2.1.5 (2021-08-11)"},{"location":"reference/release-history/#214-2021-08-04","text":"a4eeff4 Add inital undocumented mackup add command 1dfae81 Bump assets/chezmoi.io/themes/book from e939f40 to 50147be 42e1f2f Fix crash when color was set to auto in config file 49e9b46 Fix grammar 43a0f1e Fix some minor internal inconsistencies 91d10b0 Fix tag line in reference manual dc6011b Make order of arguments to merge command configurable b074718 Tidy up order of struct fields 23059eb Update contributing doc cdbc085 Update dependencies","title":"2.1.4 (2021-08-04)"},{"location":"reference/release-history/#213-2021-07-31","text":"62bc51a Add VCSH to comparison chart 69dc0f3 Add hidden internal-test command for internal testing f9771a9 Add more media links f0e7dce Allow entering username/password when using builtin git e23dcc3 Bump golangci-lint to 1.41.1 bd9e485 Correct git archive import features 1d433a2 Fix formatting in comparison table bf77f76 Normalize cell length in Markdown table 9820eb2 Reduce test verbosity in CI 74811b2 Remove incorrectly documented short option dde40d0 Set the record straight on some bare-git features d4971ed Tidy up comparison table cfe9084 Tidy up repo guessing code 523496c Tidy up username and password requests when using builtin git b51c080 Update dependencies 4282879 Update dependencies f00f6b5 Update recommended podcast aae3a82 Use golang.org/x/sys/unix package where possible 79d5348 Use target name when editing files 47de173 Use terminal to read password on Windows","title":"2.1.3 (2021-07-31)"},{"location":"reference/release-history/#212-2021-07-14","text":"db62a0b Add FAQ entry on chezmoi cd 80d925f Add link to blog 4da300a Add more media entries acc950d Allow install of chezmoi from a powershell where StrictMode is on 19500e0 Allow source directory to be a symlink 7b572a8 Build with Go 1.16.6 1ba3727 Fix doctor check for suspicious entries 7c688ef Make .chezmoi.kernel template variable more generic dcf0ba1 Make .chezmoi.osRelease template variable more generic 38d163d Make modify scripts always overwrite the target without prompting 173ab68 Populate all default template variables 35de5ad Remove .chezmoi.homedir template variable bb0d23e Tidy up issue templates","title":"2.1.2 (2021-07-14)"},{"location":"reference/release-history/#211-2021-07-11","text":"91c4031 Fix config file code snippet in HOWTO 0b499d7 Fix panic when destination directory is / 9660b12 Improve shell completions 9d02a5a Tidy up onepassword template functions f4e004a Update doc on how to migrate away from chezmoi 5705e04 Use fs.WalkDir function d1fef1c Use script extension to determine interpreter","title":"2.1.1 (2021-07-11)"},{"location":"reference/release-history/#210-2021-07-02","text":"d506456 Add .literal suffix to make all filenames representable 0f8a0aa Add gopassRaw template function 646f4f3 Add literal_ attribute to make more filenames representable e872fa3 Add mozillaInstallHash template function 7cac834 Add optional account arg to onepassword template functions 79ad5fe Add passRaw template function d84b0a7 Bump assets/chezmoi.io/themes/book from 4540d66 to e939f40 efc96d6 Tweak Go modules check","title":"2.1.0 (2021-07-02)"},{"location":"reference/release-history/#2016-2021-06-27","text":"7b57397 Add --config-path option to init command 12fbe0a Fix FreeBSD install instructions 32d4a92 Improve documentation of chezmoi edit 4100279 Include FreeBSD build in tests c5cb349 Make osRelease and kernelInfo template vars available on all systems where present 31a5fb7 Prioritize /etc/hosts over /etc/hostname for FQDN hostname ef49f6a Tweak FAQ on chezmoi edit a441236 Update dependencies e9c2155 Update dependencies 9bf5265 Update docs so that oh-my-zsh tarball goes to TMPDIR instead of HOME af34a92 Update golangci-lint to v1.41.0","title":"2.0.16 (2021-06-27)"},{"location":"reference/release-history/#2015-2021-06-17","text":"d02e707 Update GoReleaser GitHub token","title":"2.0.15 (2021-06-17)"},{"location":"reference/release-history/#2013-2021-05-27","text":"fba2ec9 Add --ssh option to init command to guess SSH repo URLs 6793811 Add .chezmoi.sourceFile template variable 811fb19 Add age howto 9efc082 Add findtypos check 8b35f3d Add forgotten --include option to add command a706029 Add how to for managing part of a file 2b546b7 Add how to for using chezmoi with brew bundle ca607a4 Add how to on running a script when another file's contents changes 0342271 Add link to github.com/hussainweb/ansible-role-chezmoi 56b3666 Add maximum width to docs output 9fbaba1 Add more media links 7839bfe Add re-add command d8f8add Add test for template data in chezmoi init --apply 7f8716a Add writeToStdout init template function 5497b85 Bump age version to 1.0.0-rc.2 in tests 918c2b7 Bump golangci-lint to v1.40.1 ca54fa3 Disable exhaustive linter bfc32b2 Ensure that parent directory exists in import examples c69e066 Fix security table of contents a69d2ff Fix typos bebdceb Fix typos and receiver names 6c952eb Format code blocks in documentation cdaa1d3 Improve code documentation 3539609 Improve consistency f0c11ce Improve consistency of reference documentation 09c3530 Include Linux OS release name and version in doctor output, if available 5023553 Make how to section on ignoring files easier to find 5eb6def Move cmd package to internal/cmd cf97df1 Move internal/cmd to internal/cmds 320cb8d Move security policy into docs 049d7e8 Move security policy into docs 3ca09db Only create templates with chezmoi add --autotemplate if a replacement occurred 98d9607 Reference .chezmoidata in template data documentation 1c0e836 Remove stale FAQ entry 802c6ca Remove stale docs on diff.format df0ea51 Remove unnecessary SourceRelPaths type ab16f1b Rename function argument for clarity 883a5f0 Reword intro commands c0a9fa4 Tidy up how to 8eb212c Tidy up symlink documentation 01c812b Tidy up tests 009a796 Tweak documentation 0e800ad Tweak examples and docs a little more 35ea315 Update Go to 1.16.4 cce08bb Update Windows Subsystem for Linux detection how to de341d2 Update dependencies b33ca40 Update golangci-lint to 1.40.0 2bededb Update link to path matching function 034b8d3 Use io/fs package instead of os 66fbcb6 Use neutral names in docs and tests b6ab19e Use pager for docs and make pagers more configurable 891e461 Use quote function instead of literal quotes in docs 7526fa5 Use stringSets for known filenames d858159 Use temporary files, instead of stdin/stdout, when calling gpg","title":"2.0.13 (2021-05-27)"},{"location":"reference/release-history/#2012-2021-05-10","text":"1393e41 Add Architecture guide 942d536 Add another method of detecting OS architecture for robustness da611c9 Bump chezmoi.io/themes/book from 1e4bcc2 to 6200450 3e562c5 Correct and template example in How To guide 8bbf1b8 Don't atempt to use reverse DNS to determine FQDN hostname ce2d86a Handle EINTR from syscall f188ab5 Improve error message when persistent state is locked 89d36ec Improve reliability of Powershell installer 18cf1ef Increase verbosity of tests in CI 06674ab Make chezmoi forget also remove entry from state bc2a07c Move VIM tip from reference to how-to aeb781e Remove debug code 6eb89ab Remove unnecessary AbsPaths type 155e53f Remove unnecessary RelPaths type 361ce17 Remove unnecessary typecasts f51fc68 Simplify EINTR handling b3529bf Sort unexported variables after exported ones fbf260f Suppress warnings in tests about git default branch name 9ae0d58 Tidy up flag parsing and help output bc48485 Update dependencies 08336ad Update dependencies 037a372 Update last written state when target and actual states are equivalent 3c273d6 Update rpm zsh completion directory to match recent Fedora versions. 3a06eb8 Use /etc/hostname to determine hostname, if available 421d43b Use c.errorf instead of cmd.Printf fb616d9 Validate generate config before writing it in init command","title":"2.0.12 (2021-05-10)"},{"location":"reference/release-history/#2011-2021-04-26","text":"dfd8145 Add Makefile targets for coverage c2c5ff4 Add import --exclude option 546070b Add related software documentation 179cbfc Add wget one line install instructions ba3c28d Bump Go version to 1.16.3 on Cirrus CI 4a82d68 Do not follow symlinks if the file will be ignored anyway 1a7d396 Explicitly document need for data in template action 4ecd1db Extend include template function to handle absolute paths 4503be6 Fix checksums.txt upload step a7a8ae2 Fix panic when using diff --exclude a19217f Fix typos in comments 5d4f02c Fix typos in docs 07127cf Fix typos in test comments a48a9d8 Ignore whitespace errors in .vscode/settings.json 173732f Improve parsing of auto bools bdab05d Minor tidy-ups b9dcd48 Tidy up path handling 4c51578 Update dependencies 91a2e9f Warn user when add command would remove encrypted, private, or template attribute d2d96b0 Write prompts to stdout, even when --no-tty is specified b1501ad fix typo","title":"2.0.11 (2021-04-26)"},{"location":"reference/release-history/#2010-2021-04-15","text":"6a8855e Add add.templateSymlinks configuration variable e1612f6 Add diff.exclude configuration variable 9b7c35c Add editor config for PowerShell scripts acfec8e Add infrastructure to read entry type sets from config 1d42c99 Add init --data option c3b8073 Add mitigation for when actual state does not match persistent state e8229a9 Add state data, delete, get, and set subcommands 4459193 Add test for re-adding file with and without --encrypt 5331014 Add tests with different umask values 5f47aaa Added --template-symlinks-home and --template-symlinks-source 804e135 Consolidate symlink tests 93c53da Document one-line chezmoi and dotfiles install d41951f Don't assume that gpg is installed in tests 992b923 Make --exclude option per command instead of global b00710b Make --template-symlinks option a bool that checks source dir and home dir 8322943 Make chezmoi init --one-shot also include --purge-binary 38cb1d2 Only install glibc/musl-specific binaries when they are available 3782e93 Re-enable passing test e50575c Release both checksums.txt and chezmoi_${VERSION}_checksums.txt 141a9b1 Replace --template-symlinks-home and --template-symlinks-source with --template-symlinks=value 5920345 Revert to standard actions/cache 2436c92 Store actual umasks in state file 703be4e Tidy up table of configuration variables 45f6429 Tweak documentation 865c379 Update Go module version to match tag 8090122 Update dependencies c48de4c Update prefix documentation 8755cb6 Use default checksums file in install scripts","title":"2.0.10 (2021-04-15)"},{"location":"reference/release-history/#209-2021-04-04","text":"505ca6a Fix import command when destination already exists d34a1b6 Update dependencies","title":"2.0.9 (2021-04-04)"},{"location":"reference/release-history/#208-2021-04-03","text":"2cdbbd7 Add tests for symmetric GPG encryption e444344 Build with Go 1.16.3 6755586 Bump chezmoi.io/themes/book from 60dfd9a to 1e4bcc2 b6d33d9 Bump ludeeus/action-shellcheck from 1.0.0 to 1.1.0 0c37c54 Fix absolute path check 5e54964 Fix typo b990f3d Fix typos 7bce9fa Tidy up comparison doc 040ef45 Update PowerShell install script to use checksums.txt 351172f Update install script to use checksums.txt 5976c07 fix: gpg symmetric passing wrong arguments","title":"2.0.8 (2021-04-03)"},{"location":"reference/release-history/#207-2021-03-31","text":"1ce1944 Restore original checksums filename","title":"2.0.7 (2021-03-31)"},{"location":"reference/release-history/#206-2021-03-30","text":"de636f1 Add System.IdempotentCmdCombinedOutput 2348d6a Check for libc version in upgrade command 406cdc5 Rename variables for consistency 58aac9b Restore build of non-libc-specific Linux archives 75681a7 Use emojis in comparison","title":"2.0.6 (2021-03-30)"},{"location":"reference/release-history/#205-2021-03-29","text":"1a2e4e9 Add -Force option to Move-Item command. c1e5a8c Add darwin/arm64 to install script 3e7bbde Add link to blog post 5468d3d Add stdinIsATTY template function 5135e06 Correct function name in documentation 639adcf Fix issue in example for trying to use existing boolean vars first in How To section: First arg of get doesn't have to be in quotes. c6271ad Improve install script error handling d5e5afc Make .chezmoi.sourceDir template variable a string 83a1b65 Make install script install glibc or musl libc version as appropriate 382988d Only evaluate target states when needed 03a3780 Reduce severity of doctor warning if gpg is not installed b196247 Simplfy managed test 67c57d5 Split large functions into smaller functions f548ba3 Tidy up handling of script working directories e996856 Tidy up make generate target 30f1ab9 Unlock state when running editor or merge command ff4bf5a Update dependencies 0e824ff Update golangci-lint to 1.39.0 731a622 Use the first existing parent directory for a script's working directory.","title":"2.0.5 (2021-03-29)"},{"location":"reference/release-history/#204-2021-03-24","text":"6dca5aa Add age binary check to doctor command 54ef893 Build libc-specific archives 2eb70bf Fix noupgrade build tags 1833b11 Make doctor command more friendly about missing binaries ae2f0d2 Only update state if target was actually changed b36175d Remove stale reference to go generate f918459 Update howto to use main instead of master","title":"2.0.4 (2021-03-24)"},{"location":"reference/release-history/#203-2021-03-22","text":"17e4976 Document empty_ for file target types 0ee8476 Factor out GitHub client bccd093 Fix editing of encrypted files in subdirectories e35be17 Internal tidy-up 237b3f5 Remove noembeddocs and nodocs build tags 34782e1 Remove symlinks whose targets are empty 20c63f1 Restore upgrade command","title":"2.0.3 (2021-03-22)"},{"location":"reference/release-history/#202-2021-03-19","text":"8c66bbc Add new attributes to chattr reference documentation. ded9ecc Add removeline test function 700db6e Add tests for --exclude=encrypted option 966d45a Connect stderr when invoking encryption tools 058497e Detect encryption if group set in config file 091028f Extend cat command to print scripts 5e5f377 Improve encryption integration tests 9bc28b7 Remove temporary version override","title":"2.0.2 (2021-03-19)"},{"location":"reference/release-history/#201-2021-03-18","text":"0b8b5b0 Fix panic when displaying scripts in diffs 2ba9aed Include scripts to be run in diffs by default 316371f Use notepad.exe, not vi, as the default editor on Windows","title":"2.0.1 (2021-03-18)"},{"location":"reference/release-history/#200-2021-03-17","text":"ebdd6f4 Add chezmoi apply --source-path tests 7caf314 Build with Go 1.16.2 45f2ca4 Improve documentation of gitHubKeys template function cb43820 Improve error messages from 1Password template functions a665328 Initialize the keyring cache e9022e5 Minor documentation fixes 2ccc16a Only log when --debug is set 784a08c Preserve homedir template variable for backwards compatibility 09fb2cf Refresh github.com/actions/cache by changing key a8eb3a9 Tidy up changes doc for v2 6f459af Update FAQ for chezmoi v2 4cbc07b Update comparison doc for v2 1c68a53 Update dependencies 08aff38 Update documentation and release process for v2 release 9b6b8f1 Update quick start guide for chezmoi v2","title":"2.0.0 (2021-03-17)"},{"location":"reference/release-history/#1811-2021-02-05","text":"","title":"1.8.11 (2021-02-05)"},{"location":"reference/release-history/#1810-2020-12-20","text":"","title":"1.8.10 (2020-12-20)"},{"location":"reference/release-history/#189-2020-11-20","text":"4fd06fa Merge pull request #936 from zb140/1password-cache-arg","title":"1.8.9 (2020-11-20)"},{"location":"reference/release-history/#188-2020-10-31","text":"71e82db Merge pull request #924 from twpayne/templating-docs","title":"1.8.8 (2020-10-31)"},{"location":"reference/release-history/#187-2020-10-10","text":"3b285d9 Fix release tests","title":"1.8.7 (2020-10-10)"},{"location":"reference/release-history/#186-2020-09-28","text":"cfa3fd2 Merge pull request #893 from twpayne/static-link-with-musl","title":"1.8.6 (2020-09-28)"},{"location":"reference/release-history/#185-2020-08-22","text":"c5dbedc Merge pull request #872 from twpayne/update-testscript","title":"1.8.5 (2020-08-22)"},{"location":"reference/release-history/#184-2020-08-12","text":"99ef18b Merge pull request #834 from twpayne/codespaces","title":"1.8.4 (2020-08-12)"},{"location":"reference/release-history/#183-2020-06-25","text":"6d2be34 Merge pull request #805 from twpayne/update-deps","title":"1.8.3 (2020-06-25)"},{"location":"reference/release-history/#182-2020-06-09","text":"323cba5 Fix release job","title":"1.8.2 (2020-06-09)"},{"location":"reference/release-history/#181-2020-05-06","text":"4def4f3 Fix typo cbf8d4a Merge pull request #731 from twpayne/faq-tidy d604fa5 Improve FAQ b962e36 Merge pull request #729 from twpayne/strings-builder 610701e Use strings.Builder instead of bytes.Buffer 0bc0257 Merge pull request #728 from twpayne/execute-template-improvements e3b3da1 Improve FAQ entry on managing files outside target directory 11aad4d Add --output option to execute-template d6b059c Merge pull request #724 from twpayne/octal-literals 604dca2 Format octal literals consistently b68bd53 Merge pull request #720 from twpayne/fix-git-diff-func-color e16ebda Fix color of hunk context in git format diffs 34fc1b5 Merge pull request #723 from twpayne/auto-escape-templates 7d8c6d2 Auto escape template delimiters when --autotemplate is set 36b1f44 Merge pull request #719 from twpayne/infrastructure-improvements 0cee057 Merge pull request #718 from twpayne/howto-external-modified e800dd0 Use Makefile for CI steps 4e9e654 Separate out local imports 09b38ce Improve how to for tracking externally modified files 5752e26 Merge pull request #717 from twpayne/no-color 519ec22 Update pull request template 590c721 Add support for NO_COLOR environment variable 70c4eda Merge pull request #714 from twpayne/improve-contributing 30a2b81 Remove old linter suppressions 57fbcb7 Make list of enabled linters explicit ec44e08 Improve infrastructure for contributors 3bad347 Add pull request template 81bfc76 Merge pull request #715 from twpayne/fix-git-status-parser 70e8e2c Enable autocommit and autopush for chattr command 94c02a0 Fix git status parsing for renames 175601e Merge pull request #709 from ihommani/master 31c646d Merge pull request #698 from twpayne/color-git-diff 810607c Add colored git diff support 93c03e7 Make --color option accept boolean values b640720 Merge pull request #712 from twpayne/generic-secret-string 1e699ea Make secret template function return a string, not a []byte c9081ac Merge pull request #710 from twpayne/gofumports-tidy e458bed Compact type declarations 6002344 Add images to illustrate chezmoi principles 8b5b0f5 Merge pull request #687 from twpayne/golangci-lint-next 9271f90 Merge pull request #707 from twpayne/no-dev-upgrade f10697b Update golangci-lint to version 1.25.0 1d7dc3d Don't attempt to upgrade dev versions without --force flag 0796dd8 Merge pull request #704 from twpayne/doublestar-glob ceb6307 Use doublestar for all globs 9f0b03e Merge pull request #703 from twpayne/go-generate-completions 0eb3917 Generate completions with go generate instead of make 3ea95e5 Add --output option to completion d256de8 Merge pull request #702 from twpayne/execute-template-init cd42fb0 Add --init and --promptString options to execute-template 1760187 Fix generated docs dd7edf8 Merge pull request #697 from stephengroat/patch-1 442c85d Merge pull request #699 from twpayne/gopass-version f8bd952 Update gopass version detection 124ab05 install from homebrew-core d2d43e9 Merge pull request #695 from twpayne/umask-docs f1cbbd6 Improve reference docs 3e6700e Add more documentation on umask 2d4f690 Merge pull request #689 from stephengroat/patch-1 bd72b50 Use goreleaser github action e0c120c Merge pull request #693 from twpayne/doublestar 67d5746 Use doublestar.PathMatch for path matching fd29c6e Merge pull request #692 from twpayne/fix-media-page fe13fc7 Fix media page","title":"1.8.1 (2020-05-06)"},{"location":"reference/release-history/#180-2020-04-19","text":"017a83f Merge pull request #686 from twpayne/tidy-up-github-action 91581ec Tidy up GitHub Actions f642fb4 Merge pull request #685 from twpayne/media 35cc601 Update README.md 79b9ae0 Add media page c02d8e3 Merge pull request #684 from twpayne/gpgrecipient-warning 5e03393 Add warning when source version control system is not git 56436ac Add warning when config file uses gpgRecipient cc816d2 Merge pull request #679 from twpayne/fix-add-dir 89dc01b Add how-to entry about creating empty directories 8499f4d Create .keep files when adding directories non-recursively aba694f Merge pull request #678 from twpayne/git-diff cdb5a0a Add git diff format ca9d8d9 Merge pull request #674 from twpayne/diff-pager 14b1197 Add diff.pager config option edc0d55 Merge pull request #675 from twpayne/autotemplate-implies-template 5ba7692 Make --autotemplate imply --template 0b56b08 Merge pull request #676 from twpayne/fix-snap-path d2bb6fc Update path to goreleaser in GitHub action c603bb3 Merge pull request #672 from twpayne/managed 36bd3f4 Iterate on managed command 1d2c1d1 Merge pull request #671 from twpayne/document-lowercasing 08f2319 Document Viper's lowercasing of variable names 709b141 Merge pull request #670 from twpayne/investigate-668 854a931 Add test for adding empty directory without recursion c1c19fb Merge pull request #669 from twpayne/upgrade-deps 1489cac Upgrade dependencies 987450b Merge pull request #665 from remigourdon/add-managed-command 469ab7c Add managed command f89a8c3 Merge pull request #667 from seberm/feature/add-gpg-command-into-config 2fca0ae Add option to configure gpg command ecb873b Remove stray debug code 49fb084 List repos tagged with chezmoi by most recently updated first 6675562 Merge pull request #658 from twpayne/update-readme 8fc4d38 Update README.md 76e7e03 Merge pull request #657 from twpayne/symlink-template ba47581 Add separate config files how-to entry","title":"1.8.0 (2020-04-19)"},{"location":"reference/release-history/#1719-2020-04-06","text":"c4dd796 Merge pull request #656 from twpayne/non-hermetic-functions 82f9922 Include non-hermetic text functions from Sprig 8d538be Merge pull request #653 from twpayne/purge e384392 Add purge command e6b1424 Merge pull request #652 from twpayne/dont-compress-docs 9e2879f Don't compress embedded assets 1767ad7 Merge pull request #651 from twpayne/template-docs 6914b1f Use TOML in reference manual example 53f92d5 Improve template documentation 4e46435 Merge pull request #649 from twpayne/fix-550 bcd0750 Fix behavior when adding an empty file without --empty d6f80bb Merge pull request #647 from twpayne/umask 42d04f7 Merge pull request #648 from twpayne/min-go-version 9b2f286 Use umask when creating any file or directory ca416df Ensure that chezmoi is built with Go version 1.13 or later e607dc8 Merge pull request #646 from twpayne/fix-link fced112 Fix link in quickstart guide","title":"1.7.19 (2020-04-06)"},{"location":"reference/release-history/#1718-2020-03-29","text":"8284da7 Update contributing guide with new version embedding mechanism 6ebf442 Merge pull request #644 from twpayne/fix-version 1257ea8 Refactor version number embedding f92a292 Bump golangci-lint to 1.24.0 2db0aad Update chezmoi.io home page to match README.md b1a341b Merge pull request #641 from ihommani/639_enhancement_documentation f9ad39a [639_enhancement] Fix features part documentation 453d152 Merge pull request #640 from twpayne/trim-space bd78980 Strip leading and trailing space from values read from user 96e0dea Merge pull request #635 from ptxmac/windows-trim fe98dde Revert \"Only run CI on pushes\" 7985de8 Regenerate documentation da30f18 Merge pull request #638 from nawordar/patch-1 b90fc91 Change . to dot_ in symlink template example 568fb50 Improve windows support by removing carriage return from prompts","title":"1.7.18 (2020-03-29)"},{"location":"reference/release-history/#1717-2020-03-21","text":"db03a2b Merge pull request #634 from twpayne/ignore-lookupgroupid-errors d22a3cf Only set group value if user.LookupGroupId succeeds d0ab459 Merge pull request #633 from twpayne/allow-kernel-fail 74297e8 Make reading /proc/sys/kernel more tolerant of errors d289303 Merge pull request #631 from twpayne/update-dependencies f671329 Update dependencies 208de3a Merge pull request #630 from twpayne/template-options 4926a16 Add option to set template options a75a1f7 Switch to functional options for TargetState 21f46e0 Merge pull request #629 from twpayne/execute-template b047430 Add execute-template command 79d7ddf Export TargetState.ExecuteTemplateData 771e4e7 Merge pull request #626 from twpayne/editor-with-args d65ec45 Allow EDITOR and VISUAL to include arguments 733b547 Merge pull request #624 from twpayne/add-thanks-faq a4e76f3 Add thanks FAQ entry 298c27f Merge pull request #623 from twpayne/mark-auto-commit-stable 6d450c1 Mark autoCommit and autoPush as stable cda7249 Merge pull request #622 from twpayne/document-ignore e3caa96 Improve documentation of .chezmoiignore efddb59 Only run CI on pushes ae4bbc9 Merge pull request #620 from twpayne/refresh-readme 07fb826 Refresh documentation ec3b896 Merge pull request #618 from twpayne/go-1.14 ea3d8d2 Add freebsd/arm64 and openbsd/arm64 builds 098c28c Build with Go 1.14 e05e396 Bump golangci-lint version to 1.23.8","title":"1.7.17 (2020-03-21)"},{"location":"reference/release-history/#1716-2020-03-04","text":"ce06ed9 Merge pull request #617 from twpayne/fix-commit-message-template-path eb0129f Fix path to commit message template asset b03639b Tidy up link fixes 37c54ae Add missing punctuation 509b93a Merge pull request #616 from twpayne/fix-chezmoi.io-links 37d35c8 Fix links on chezmoi.io","title":"1.7.16 (2020-03-04)"},{"location":"reference/release-history/#1715-2020-02-26","text":"a7b5607 Merge pull request #612 from twpayne/revert-assets 1403b64 Revert \"Move completions into assets directory\"","title":"1.7.15 (2020-02-26)"},{"location":"reference/release-history/#1714-2020-02-25","text":"559da47 Tidy up release process 9f8b2b6 Merge pull request #610 from twpayne/bump-dependencies 0d429c8 Bump dependencies 7192a91 Revert \"Move cmd into internal directory\" 106aef2 Merge pull request #609 from twpayne/misc-fixes 2d466db Move scripts into assets directory 5317fe6 Move cmd into internal directory b34673d Move completions into assets directory 40d92cc Move templates into assets directory c74392a Move images into assets directory 4fc9f6b Tighten up return type d3ff731 Merge pull request #608 from twpayne/lastpass-raw c39b714 Add lastpassRaw template function ff00fed Fix documentation for lastpass note parsing 2c3f7e2 Merge pull request #606 from twpayne/improve-docs 2fbaf35 Improve docs 0cd7bdc Merge pull request #605 from twpayne/strip-symlink-template-whitespace 49ba065 Improve template documentation 251f698 Trim whitespace from evaluated symlink templates 948f293 Merge pull request #603 from twpayne/renable-snap-bash-completion 8840ecf Revert \"Temporarily disable bash completion in snaps\" a9e7cb7 Switch from godoc.org to pkg.go.dev 0b2decb Merge pull request #602 from twpayne/doc-cleanups 27790db Use cobra.Command.Printf instead of Config.warn da9d72a Add custom help command d847c8f Make short helps more consistent 3259503 Fix more typos and clean up docs 3114a51 Fix typo 08cabca Merge pull request #597 from twpayne/cd-command-config 6114041 Add cd.command configuration variable 34c402b Merge pull request #600 from MunifTanjim/docs/fix-reference-sourceDir-default-value 62c9d45 Fix sourceDir default value in docs b7b8e1e Tidy up issue templates","title":"1.7.14 (2020-02-25)"},{"location":"reference/release-history/#1713-2020-02-13","text":"ed3584c Temporarily disable bash completion in snaps c11e4c9 Merge pull request #595 from twpayne/fix-594 23bda0a Include relative path in template name 37096b0 Merge pull request #592 from twpayne/update-toml 5d20cbf Use github.com/pelletier/go-toml to handle TOML 1624695 Merge pull request #591 from twpayne/functional-config-options cd49a3f Use standard directories in all tests dc82787 Make tests more verbose by default 1b50624 Simplify I/O handling in Config 4610fec Use newTestConfig function in tests 8bea1b2 Add newTestConfig function c475c5e Use functional options to construct Configs 552151d Don't include destination directory in dump output 5e8b893 Merge pull request #590 from twpayne/template-funcs-in-config-template 8771b2d Make all template functions available in config file template 0d8ddd6 Merge pull request #588 from twpayne/misc-fixes c62befa Bump golangci-lint to v1.23.3 de3d05b Check more errors b3dfbea Use more specific receiver 64a30b2 Avoid unnecessary calls to Stat before MkdirAll a65f193 Use Config.warn consistently 3e2fd5b Merge pull request #587 from twpayne/format-assets 02ae747 Compress assets as much as possible 840d00e Wrap generated code at 80 columns 7ac364b Tidy up contributing docs 61a5942 Merge pull request #586 from twpayne/remove-empty-symlinks a13cff2 If a symlink is empty, remove the target c39c254 Merge pull request #584 from twpayne/no-large-diffs bde4d3e Don't print diffs if file is larger than 1MB ecfba0e Merge pull request #582 from twpayne/use-issue-templates f03e442 Link to issue templates in documentation 17ceb5f When looking for an entry, return an error if it does not exist ( #581 ) a5785d3 When looking for an entry, return an error if it does not exist 5099fed Merge pull request #579 from twpayne/upgrade-checksum 7b6fa02 Fix upgrade checksum filename","title":"1.7.13 (2020-02-13)"},{"location":"reference/release-history/#1712-2020-01-24","text":"bed22fc Rename internal command for consistency ( #576 ) ac77728 Simplify code generation 395b450 Rename internal command for consistency e938d4c Remove debug code 52e49ad Improve packaging of assets ( #575 ) 7c6d8e7 Improve install-tools target ca61c8d Improve packaging of assets 92deba6 Update dependencies ( #571 ) c8f7305 Update dependencies fe7728e Merge pull request #569 from twpayne/linux-install c9df290 Add NixOS Linux install instructions 1d1230d Update Alpine Linux install instructions 888736a Add note about installation instructions to contributing guide ae3666b Merge pull request #568 from twpayne/issue-templates 0659f65 Tidy up issue template markdown e536db5 Merge pull request #567 from twpayne/support-request 0782706 Add support request issue template 7b5f645 Merge pull request #565 from twpayne/fix-install.sh 699d0b5 Remove no-longer-correct action to build install.sh c882899 Restore default arm builds ddde88b Merge pull request #563 from ndt/patch-1 31d9a40 Update install.sh 185e2c9 Merge pull request #562 from twpayne/commit-faq b5cfe03 Add FAQ entry on committing changes 65694b2 Update tables of contents 48c0d31 Merge pull request #560 from twpayne/source-alias 4ab59df Add hg command c8010c2 Add git command f30445b Document aliases 372c392 Merge pull request #559 from twpayne/zsh-completions 9795d04 Add zsh completions for positional arguments 2d5a384 Fix missing Oxford comma f9bd8bb Don't compute full target state in data command ( #557 ) 1b630ce Don't compute full target state in data command f563a08 Merge pull request #556 from twpayne/windows-colors 6cec157 Enable virtual terminal processing on Windows 0b3aa77 Use golang.org/x/crypto/ssh/terminal instead of github.com/mattn/go-isatty","title":"1.7.12 (2020-01-24)"},{"location":"reference/release-history/#1711-2020-01-09","text":"acf3478 Merge pull request #553 from twpayne/keepassxc-show-protected ff4f8d9 Pass --show-protected to keepassxc-cli version 2.5.2 or later 3788d1b Merge pull request #549 from twpayne/improve-template-docs 16e1fa9 Validate variable names in config data 73d2aa7 Improve template how-to cf6b4a7 Merge pull request #543 from twpayne/release-improvements 87881f2 Consolidate GitHub Actions 92ce3c4 Add arm7 builds 1f01859 Tidy up goreleaser config 4be8957 Bump golangci-lint to version 1.22.2 3e733b1 Merge pull request #547 from twpayne/update-glamour 128c291 Use Glamour's ASCII style for rendering docs 3df4931 Fix use of autotemplate in how-to doc ( #546 ) ac494ee Fix use of autotemplate in how-to doc acdd04d Use more reliable install-from-source method ( #541 ) f6fb2dc Use more reliable install-from-source method 73d325e Render docs with github.com/charmbracelet/glamour ( #537 ) 0d2c73d Render long help and docs with github.com/charmbracelet/glamour ea4b6c4 Fix autotemplate docs","title":"1.7.11 (2020-01-09)"},{"location":"reference/release-history/#1710-2019-12-27","text":"74f6b5b Added kernel information to data d318b14 Consolidate data source files b603f77 Don't automatically assign bug label in bug report template 4f65240 Only set osRelease on Linux a402f9e Remove stale entry from .gitignore e271597 Treat adding an empty file without --empty as remove a698afe Treat adding an empty file without --empty as remove ( #536 ) db2e446 Trigger CI on pull requests 6559538 Tweak markdown to avoid Hugo bug b4f0cbc Update homepage in snaps and brews b10aa9f Use standard source directory in tests 14a9c3b typo","title":"1.7.10 (2019-12-27)"},{"location":"reference/release-history/#179-2019-12-20","text":"8908b55 Do not print idempotent commands in verbose mode a1caca6 Don't add files if template would be overwritten 91e562a Don't quote shell args just because of equals signs 2992fce Don't quote shell args just because of equals signs ( #515 ) 8cea741 Improve contributing docs 5b488de Improve contributing docs ( #516 ) 2a164f9 Iterate on GitHub Actions 90c506b Iterate on infrastructure ( #524 ) 5d16890 Preserve but don't enforce private on Windows d58df90 Quote command args in debug mode 035e416 Reformat tables of content with latest Markdown plugin 61611b5 Simplify generated help template ac4f8d0 Update Alpine Linux install instructions 7d84ccf Update Alpine Linux install instructions ( #514 ) ddd0b62 Update all dependencies e349fef Update all dependencies ( #520 ) 5f6943c Update install.sh d6970d1 Update issue templates 8825d44 Use go/format instead of gofmt 7a41df2 Use go:generate more idiomatically 6a9256a Use more specific command for generating help","title":"1.7.9 (2019-12-20)"},{"location":"reference/release-history/#178-2019-12-13","text":"d106ef6 Include generate step in release builds","title":"1.7.8 (2019-12-13)"},{"location":"reference/release-history/#177-2019-12-10","text":"de86467 Use GORELEASER_GITHUB_TOKEN for releases","title":"1.7.7 (2019-12-10)"},{"location":"reference/release-history/#176-2019-12-10","text":"e74485f Add Alpine Linux installation instructions cd50d7b Add ShellQuoteArgs 954b51a Add contributing guide for documentation changes ce5d509 Add link to Windows binaries and GitHub releases page f93c255 Add updating chezmoi.io to contributing docs a0e061a Correct use of setup 123fb2a Enable dupl linter 1db6960 Export MaybeShellQuote e20f00a Fix website automation for when gh-pages branch does not exist f1b4221 Fixed a type in completion example d3c75da Fixed a type in completion example ( #508 ) 5a687a2 Improve documentation ( #509 ) fa8e001 Improve install docs ( #506 ) a23c640 Improve template errors ( #504 ) 34b3fb2 Indent all YAML files consistently ff7dd1b Miscellaneous fixes ( #505 ) c5d9ce0 Omit unknown components from --version output a5321f6 Prepare docs for next release addb0cb Prepare docs for next release ( #511 ) cf457c4 Quote command arguments if needed in template error messages a4c459e Release future Windows binaries in zip archives bcebd2f Set GITHUB_TOKEN for releases 993f87d Switch to GitHub Actions 91e32c3 Switch to GitHub Actions ( #494 ) de4e40b Tidy up package install table eaf7294 Update argument name for consistency with docs d4e1c1b Warn when skipping add of ignored files 4403954 Warn when skipping add of ignored files ( #510 )","title":"1.7.6 (2019-12-10)"},{"location":"reference/release-history/#175-2019-12-02","text":"243ccc1 Add onepasswordDocument template function 55ecebe Add onepasswordDocument template function ( #503 ) ebe4695 Use more robust shell quoting algorithm","title":"1.7.5 (2019-12-02)"},{"location":"reference/release-history/#174-2019-12-01","text":"13398a8 Add runtime.GOOS and runtime.GOARCH to doctor check 97258b3 Add runtime.GOOS and runtime.GOARCH to doctor check ( #498 ) 770d34e Avoid duplicated first arg in verbose mode 51ca763 Drop coveralls daf6a0e Drop coveralls ( #497 ) 5f98352 Fix links on chezmoi.io 5966624 Fix links on chezmoi.io ( #499 ) fce5ec0 Use go-shell with 32-bit support 2246c5d Use go-shell with 32-bit support ( #500 )","title":"1.7.4 (2019-12-01)"},{"location":"reference/release-history/#173-2019-11-23","text":"47bb3ce Add --debug flag 4122f12 Add DebugMutator 40fb730 Add FAQ entry on running a command when a file changes 953879e Add FAQ entry on running a command when a file changes ( #469 ) 7d52ca8 Add IdempotentCmdOutput and RunCmd to Mutator 413c8ec Add book theme 948f479 Add content doc dependency on generator 9ea31ce Add debug code ( #478 ) 387cffa Add how to handle externally modified config files 1b655f9 Add how to handle externally modified config files ( #487 ) 1e020e2 Add how to import Oh My Zsh documentation f40fb42 Add how to import Oh My Zsh documentation ( #480 ) 3468c22 Add initial www.chezmoi.io 680cbae Add initial www.chezmoi.io content 616c63a Add smoketest target as default ee0e99b Add sourceDir to default template data 7acba23 Add sourceDir to default template data ( #485 ) add120d Add www.chezmoi.io automation 89e2713 Add www.chezmoi.io website ( #471 ) 7ceb1a9 Build improvements ( #488 ) 011b72c Bump golangci-lint to version 1.21.0 574e74e Clarify Go modules requirement in docs 97987b6 Clarify upgrade command 5dedfdf Disable flaky tests on Windows a362775 Disable flaky tests on Windows ( #491 ) 496c985 Document --debug flag df35378 Don't include tables of contents on chezmoi.io eccc569 Fix debug logging e38d210 Fix debug logging ( #482 ) 9cfd78d Fix grammar and receiver name 4d678ce Fix links on chezmoi.io ( #493 ) 8d0a21e Fix logging ( #481 ) c6af790 Fix logging with --debug and --verbose flags ddac85f Fix typo i make every day, and therefore see everywhere. 7a5c063 Fix typo i make every day, and therefore see everywhere. ( #466 ) 6329176 Improve install docs 51946fa Improve onepassword documentation fde5551 Improve onepassword documentation ( #476 ) 5db37d9 Move fs and mutator into config c5cfcea Only create source parent directory if it does not exist 0840ede Only create source parent directory if it does not exist ( #484 ) 84350bf Quote arguments in verbose mode if necessary 4b04b24 Quote arguments in verbose mode if necessary ( #486 ) f111abd Refactor GitHub Actions 8473c3f Refactor GitHub Actions ( #465 ) df05dff Rename LoggingMutator to VerboseMutator 32359e3 Update modules b286352 Update modules ( #470 ) 05bd6e2 Update reference manual table of contents 07ecbef Use IdempotentCmdOutput in template functions cc9ee40 Use consistent receiver name 62fcb3a Use go vet in golangci-lint 3167f57 Use https://chezmoi.io/ as base URL 7469b97 Use https://chezmoi.io/ as base URL ( #473 ) 0e62d4d Use run instead of exec","title":"1.7.3 (2019-11-23)"},{"location":"reference/release-history/#172-2019-10-17","text":"2445864 Add autocommit and autopush 41c4fdc Add autocommit and autopush ( #432 ) a7bc3b7 Add git status parser f1f9391 Add lines function 963985f Add shell check to doctor command 5033a31 Bump golangci-lint to version 1.20.0 066c9a5 Update dependencies to latest versions","title":"1.7.2 (2019-10-17)"},{"location":"reference/release-history/#171-2019-10-13","text":"88b48f4 Disable source state private check on Windows 0f7bda1 Disable source state private check on Windows ( #456 ) f425bc6 Use Go 1.13's wrapped errors 688bc14 Use Go 1.13's wrapped errors ( #453 )","title":"1.7.1 (2019-10-13)"},{"location":"reference/release-history/#170-2019-10-10","text":"f2cd6e9 Add FAQ entry on source/target filename bijection 2d7d593 Add FAQ entry on source/target filename bijection ( #442 ) 9c67b56 Add GitHub Actions 90d5323 Add gopass support 5fda365 Add gopass.command reference fd38084 Allow persistent state to be opened in read-only mode 9e2ceb7 Don't export internal package a90b01f Fix line-ending-dependent tests on Windows 37ac582 Fix symlink test on Windows 1929a0f Improve detection of the user's shell fd991e7 Improve detection of the user's shell ( #446 ) b5b46db Only lock persistent state when writes are needed ( #441 ) ce09d0d Only open persistent state in read-write mode if needed 3924950 Remove stray debug code 7939fd6 Switch to github.com/pkg/diff 8835998 Unify and improve GitHub workflows c79de4c Unify and improve GitHub workflows ( #450 ) ec449db Update contributing docs a1c7969 Update github.com/twpayne/go-acl to use latest version of golang.org/x/sys 4255f83 Update install.sh from latest godownloader f51a1ce Update install.sh from latest godownloader ( #452 ) f17d668 Update table of contents 681116a Use gpg.recipient in docs, instead of deprecated gpgRecipient eca92ce Use latest golangci-lint release f6a0cd2 Use latest version of github.com/Masterminds/sprig","title":"1.7.0 (2019-10-10)"},{"location":"reference/release-history/#165-2019-09-20","text":"3733485 Add nodocs and noembeddocs build tags ( #431 ) ad21e43 Add nodocs build tag dbe4b67 Add noembeddocs build tag","title":"1.6.5 (2019-09-20)"},{"location":"reference/release-history/#164-2019-09-19","text":"e1410ab Make --follow a global option 5212eb3 Make --follow a global option ( #430 )","title":"1.6.4 (2019-09-19)"},{"location":"reference/release-history/#163-2019-09-17","text":"034ba74 Add Scoop support 9fa8675 Add Scoop support ( #429 ) 850dd8c Execute templates after editing c4190f5 Execute templates after editing ( #428 ) fd24e09 Pin golangci-lint to version 1.18.0 1335bef Pin golangci-lint to version 1.18.0 ( #426 )","title":"1.6.3 (2019-09-17)"},{"location":"reference/release-history/#162-2019-09-10","text":"c29d46c Add Windows build test on Travis 085c025 Add config file template test 8144046 Add init test 283d98e Add init test ( #419 ) 4203598 Add keepassxcAttribute template function 6ccd08c Add keepassxcAttribute template function ( #418 ) d628770 Build with Go 1.13 97dac6f Disable funlen linter 5056d8a Disable funlen linter ( #420 ) e5d4962 Ignore chezmoi.exe 9c02816 Ignore chezmoi.exe ( #421 ) 95759d7 Improve README.md 1dea364 Improve README.md ( #407 ) a08bb5a Re-generate tables of contents 2b5ec69 Remove stray double quote 8ae43e6 Thread fs to exec 1656bf6 Tidy up tables ef1229e Tidy up tables and table of contents ( #414 ) 78dda03 Updated install script to be in line with shlib/uname_os.sh 44e4a24 Use an interface to abstract VCSes","title":"1.6.2 (2019-09-10)"},{"location":"reference/release-history/#161-2019-08-11","text":"140201c Add preview update doc ( #391 ) c157439 Add preview update to HOWTO.md 4c3f2e9 Add \u2018Bug Report\u2019 Issue Template d918f7e Disable autotemplate by default 716bd09 Document PrivacyStater 1792d38 Document PrivacyStater ( #402 ) 7d513f3 Don't run scripts in diff mode 1e70622 Factor out common struct aab0d2c Fix 397 ( #405 ) 76a691e Remove AppVeyor a947359 Remove AppVeyor ( #403 ) 327a26d Update tables of contents with latest VSCode Markdown helper","title":"1.6.1 (2019-08-11)"},{"location":"reference/release-history/#160-2019-07-08","text":"b989fa6 Add AppVeyor CI for Windows b32874c Add AppVeyor CI for Windows ( #385 ) 00c05f3 Add CI for OS X 1c7c29e Add Windows release ( #390 ) 8539a1d Add bash completion in snap package ( #362 ) d64fbb1 Add bash completion to snap package f88c88a Add some more template dir tests f007172 Build releases for Windows 835ab33 Disable upgrade command on Windows 1be0691 Don't use github.com/google/renameio on Windows 533b454 Fix IsPrivate 77b8641 Fix IsPrivate ( #386 ) f276df1 Fix Windows IsPrivate to check explicit file permissions instead of effective permissions. 4953b05 Fix execution with partial templates 8e29647 Fix execution with partial templates ( #388 ) 612d56e Fix test filenames 47313ac Fix whitespace in build tags cbfea11 Improve Windows support ( #381 ) 6cbde10 No upgrade on windows ( #378 ) c46bed5 Re-enable the add --recursive tests on Windows 131ed26 Skip add --recursive tests on Windows 6cdf740 Tidy up comments 4b38c75 Update dependencies f6ed345 Update go.mod 2800d6a Use fork of github.com/hectane/go-acl while waiting for upstream to merge 8c81e98 Use latest github.com/twpayne/go-vfs b42b08f Use latest github.com/twpayne/go-vfs c6b5ebd Use latest github.com/twpayne/go-vfs ( #380 ) bff3e1e Use latest modules for Windows support ( #377 )","title":"1.6.0 (2019-07-08)"},{"location":"reference/release-history/#1510-2019-06-29","text":"8f2f3e0 Add all logo images ca11320 Add all logo images ( #372 ) bfa0198 Add docs command f776ef5 Add docs command ( #374 ) 514bd77 Document where one line install script will install binary 6323f53 Don't execute templates when editing source state 355f650 Don't execute templates when editing source state ( #370 ) fa1d828 Fix issue 336 comments ( #368 ) 9301869 Fix template error messages ( #371 ) 0ea0cca Make remove command prompt by default a2fc377 Make remove command prompt by default ( #375 ) abaabcb Open source directory with editor when edit is run with no arguments 7f1d926 Remove go mod tidy test from CI c711405 Use goreleaser's fine-grained control for releases 542a132 Use goreleaser's fine-grained control for releases ( #376 ) 89ed284 Use text/template's error reporting mechanism","title":"1.5.10 (2019-06-29)"},{"location":"reference/release-history/#159-2019-06-24","text":"79e568d Add Linuxbrew to install doc 01eaf98 Add Linuxbrew to install doc ( #365 ) 0a74170 Document script shebangs and executable bits f6a8d97 Initialize persistent state even when no config file exists 909c6ac Initialize persistent state even when no config file exists ( #367 )","title":"1.5.9 (2019-06-24)"},{"location":"reference/release-history/#158-2019-06-22","text":"c829084 Fix unterminated string 5baa07a Fix unterminated string 1440388 Fix unterminated string ( #364 )","title":"1.5.8 (2019-06-22)"},{"location":"reference/release-history/#157-2019-06-22","text":"008513f Add --follow option to add command 4906a84 Add bash and fish completions to deb and rpm packages 3805756 Add common templates 822ed49 Add doctor binary check 76f0952 Add issue 353 test 78b908d Add logo to README.md dc31e18 Add logo to README.md ( #350 ) 6fdcc6e Add missing -f 15187ed Add note about completions 5bdbde1 Add note about including version numbers 4db775f Add remove functionality fe8bfc1 Add shell completions a199a64 Add square logo 1817afd Add support for Arch Linux to upgrade command 18ae3c4 Add support for gpg symmetric encryption 25feb88 Add symmetric encryption ( #333 ) 9ed9fd0 Add test for issue #353 2ff163b Clean up whitespace cdfb0c6 Connect gpg to terminal for encryption and decryption 9215412 Correct capitalization of GitHub 4586dfb Correct capitalization of GitHub ( #334 ) 58a7446 Correct order of arguments c91bc9d Document that fish completion exists in REFERENCE.md 5603bef Document that fish completion exists in REFERENCE.md ( #346 ) ea294a3 Documentation cleanups ( #358 ) e90a576 Exec new version after upgrade 36ff00e Exec new version after upgrade ( #335 ) 1e9ba2f Factor out GPG dc52690 Factor out getVersionFromOutput 7a50dd7 Factor out gpgBinaryCheck 6c4353c Fix arch install command be10fe9 Fix formatting d7af42c Fix typos 96f0847 Fix typos ( #337 ) 64d52b4 Ignore downloaded binaries 938185b Improve quick start guide 2983fc8 Improve quick start guide ( #359 ) eb861e7 Improve secret management explanation df82247 Improve section title 483fe60 Improve use of ReadOnlyFS b815ed3 Improve use of goreleaser ( #349 ) 4174a0b Include completions in archives 6c00d56 Install completions ( #343 ) 5a60e95 Install golangci-lint with goreleaser 89ecc76 Install improvements ( #351 ) 119cae6 Install package binaries in /usr/bin, not /usr/local/bin 39fc02f Install shell completions in homebrew 794a1a1 Install zsh completions f1372a4 Install zsh completions ( #361 ) e498d91 Logo 9c9f5ef Make default data available in config file templates 136d229 Pass through stderr output from secret commands 884747e Pass through stderr output from secret commands ( #338 ) e7324df Re-enable update-install.sh target 6a16044 Refactor apply tests 5ac2f33 Refresh install guide b9baa5e Relax gpg version check regexp 8467697 Remove stale sentence 47d2b78 Remove unused tool 508d459 Rename completion files e3814f2 Rename logo files fc84b92 Run apply multiple times to check for idempotency d45c23d Update brews in goreleaser config 8759d79 Update go-github to v26 297567d Update goreleaser configuration a319f04 Update install.sh from goreleaser 8c614a6 Update tables of contents 8e92a90 Update tables of contents 8b91858 Upload Logo ( #348 ) 6ecbff8 Use consistent email in tests 957535f Use consistent path to state database in tests a590114 Use consistent values in tests ( #360 ) d37888f Use tagged version of bolt 6eb98eb chezmoi is now available in official Arch repository 78f646b upload","title":"1.5.7 (2019-06-22)"},{"location":"reference/release-history/#156-2019-06-06","text":"02b902d Add GitHub Release badge 2566544 Add doctor version check d17f54f Add doctor version check ( #318 ) e3b79bb Add fish completion support a4aaed0 Add fish completion support ( #320 ) e40b797 Add fish to completion command description f01f715 Add golangci-lint configuration e34b215 Add install-tools target f2cf3b8 Disable warning about computed URL fa33f40 Don't use a singleton NullMutator instance e2edc9e Don't use references to range-scoped variables 1abbee1 Explain how to customise the merge tool e7576f4 Improve documentation ae968e3 Make script state bucket a parameter, not a global 23c0169 Mark snap releases as stable 36bbdcd Mark snap releases as stable ( #317 ) fd8a72e Remove Go Report Card badge 802b3b1 Remove pre-release-checks target f4c9963 Resolve all lint problems and enable more linters ( #310 ) f7ca727 Update badges ( #311 ) a324c18 Update contribution docs de73d1b Update contribution docs ( #309 ) dac85d2 Update go.mod 3073691 Update snap install instructions with beta channel b006026 Update snap install instructions with beta channel ( #307 ) 1b047e6 Use latest go-difflib with improved colors 377bed9 Use latest go-difflib with improved colors ( #328 ) 24cb155 Use latest go-vfs with Windows support 6963cb9 Use latest go-vfs with Windows support ( #319 ) b0182fe Use relative package paths in documentation 07244d3 Use simpler interfaces where possible dadd7fa go mod tidy to make CI happy","title":"1.5.6 (2019-06-06)"},{"location":"reference/release-history/#155-2019-05-18","text":"19f1d3d Work around snap not creating XDG_RUNTIME_DIR 4fb74c9 Work around snap not creating XDG_RUNTIME_DIR ( #306 )","title":"1.5.5 (2019-05-18)"},{"location":"reference/release-history/#154-2019-05-18","text":"013e289 Ensure that dist directory is empty before releasing 7d37a3b Release fixes ( #304 ) 60ed2ec Update README.md","title":"1.5.4 (2019-05-18)"},{"location":"reference/release-history/#153-2019-05-18","text":"2b5e1a0 Add KeePassXC support a840bcc Add KeePassXC support ( #293 ) 46822f2 Add gpg doctor check fa87510 Add install.sh 1904a34 Add install.sh ( #299 ) 476b614 Add snap support to upgrade command 121950c Allow file checks to be skipped db75551 Build snap packages a192eb6 Build snap packages ( #298 ) e5bc9db Disable update of install script from buggy godownloader f921559 Fix godownloader-generated install script 590d0ae Goreleaser tweaks ( #301 ) 8b823e8 Misc fixes ( #296 ) d31de11 Move goreleaser config to default location 74befd1 Move goreleaser config to default location ( #300 ) 4db9935 Quote number used as string 2b6cd27 Remove bzr support 239d33a Remove bzr support ( #294 ) 54b09c2 Rework installation ( #302 ) c65f96f Rework installation documentation 8194f9f Strip any leading v when parsing version 9ca08a2 Update archives stanza ffd20c6 Update reference table of contents 8d068c1 Use short URL in installation docs","title":"1.5.3 (2019-05-18)"},{"location":"reference/release-history/#152-2019-05-15","text":"8bd7bc9 Add BoltPersistentState ffc67b4 Add PersistentState a03f4f3 Add go mod tidy check to CI c07dde5 Add go mod tidy check to CI ( #290 ) 5f9b01d Add initial script documentation d75c32b Add script support 8088850 Add script support ( #287 ) 2cd7d3c Documentation fixes ( #286 ) 3efc5c2 Factor out ApplyOptions 0adef48 Fix typo in comment fe1cee7 Fix typo in reference 9d4dba1 Go mod workarounds ( #291 ) e7e0188 Remove CVS and Subversion support skeleton ( #288 ) 4810ef1 Remove CVS support skeleton 309f340 Remove Subversion support skeleton 9f1d435 Sort fields 32e5d4e Update reference table of contents 6630266 Use github.com/twpayne/go-difflib instead of github.com/pmezard/go-difflib ef59741 Use latest go.etcd.io/bbolt at HEAD instead of fork","title":"1.5.2 (2019-05-15)"},{"location":"reference/release-history/#151-2019-05-08","text":"e224be0 Add missing newline 770ca59 Add pre-release-checks target 6917265 Add pre-release-checks target ( #282 ) 7b61b9f Document pre-release-checks target 9f0d52c Fixed typo in 1Password instructions b6f35e5 Fixed typo in 1Password instructions ( #285 ) 1e7327f Misc fixes ( #281 ) 4f8ae57 Pre-allocate array 68eea80 Reduce interface requirements fbde75f Remove unnecessary gofumpt 54fd0a8 Remove unnecessary return value a984e58 Update mercurial support 8d7d5b6 Use smaller interface","title":"1.5.1 (2019-05-08)"},{"location":"reference/release-history/#150-2019-05-03","text":"67e6861 Add FAQ entry on origin of chezmoi 0f11911 Add another source-path example 4ce6c61 Add colored diff support f22c1e7 Add example extraction 6ff9ad9 Add excluded ignores 5293105 Add explicit test for #192 1664463 Add generated long help infrastructure e845ac9 Add golangci-lint check f0bcb41 Add initial REFERENCE.md a41c2d3 Add internal extract-long-help tool c866b0c Add internal extract-markdown-ast tool 40abd64 Add long help for all commands 188b88d Add make targets for common tasks 14410e0 Add merge command 993f6a9 Add merge command check to doctor 91071ec Add minimum version assertion to source state 011ba83 Add minimum version check and document special files ( #272 ) 555f8ad Add missing backquote 087d9cf Add missing closing double-quote afdcb33 Add more documentation to README.md 0f6f7eb Add more questions 693ca87 Add note about golangci-lint and gofumpt bc2f2a9 Add note about upgrade to installation doc c0706ce Add note on packaging 34c3f4d Add noupgrade build tag cae1e1d Add noupgrade build tag ( #276 ) 1632584 Add reference manual and long help for all commands ( #258 ) 61f8309 Add table of contents 0553dd9 Add tables of contents 92d520c Add upgrade command 7810b62 Add upgrade command ( #265 ) 738fcd8 Add warning if source VCS command is not supported 4f57699 Change indent to two spaces to match Cobra 1ebf43c Check config file for errors after edit-config 2cb4272 Cosmetic fixes cb554ed De-duplicate goreleaser build ids 467a1d6 De-duplicate goreleaser build ids ( #277 ) a7bfe73 Doc improvements ( #267 ) 4d3e7de Document goinstaller installation d1ef895 Document gpgRecipient bbd1b81 Document merge commands ad89352 Document special files 1415432 Download modules first f322a1c Factor out Encrypt 72318e5 Factor out TargetState.Decrypt ad7a836 Fix FAQ link 8c27153 Fix FAQ link ( #260 ) cedee29 Fix caching of generic secret command output 58bf7e9 Fix calculation of current source dir mode df5c96a Fix destination flag name 2d1ba6e Fix formatting of chattr reference 7606f5e Fix grammar d98b524 Fix grammar ( #280 ) 3273255 Fix grammar in comment 19f9fa0 Fix remaining documentation FIXMEs e4f023c Fix typo 6b4e503 Fix typo c836187 Fixed link to quick start guide ef5d496 Fixed link to quick start guide ( #270 ) 2f94aa5 Generalize chattr implementation 1fa49ba Improve detection of imperfectly-formatted code 066884c Improve documentation ( #259 ) b9d6d87 Improve readability of helps.gen.go and fix examples of last command d25e457 Improve reference manual documentation 87cec4f Make code pass golangci-lint 68b2c6a Make edit work on plaintext, not ciphertext 87571b4 Misc fixes ( #263 ) 4901baf Misc fixes ( #266 ) bf7a42f Misc fixes ( #273 ) add797b More cosmetic fixes 7923310 Move documentation into docs 20c3538 Propagate Encrypted state 259c5f9 Put flags after arguments for consistency with Cobra and add more examples 038e7b5 Refactor documentation 8bcff93 Reformat paragraph fa72a55 Remove --umask flag 6e95959 Remove link to godoc.org 4ac4708 Remove list of template variables e330084 Remove pets vs. cattle comment ac75e01 Remove snap infrastructure 99513e3 Remove snap infrastructure ( #269 ) c56f61d Remove some obvious comments 81d16a0 Remove underscores from filenames 9077575 Rename HOW-TO.md to HOWTO.md f16c811 Rewrite single-case switch as if b60b022 Simplify logic 467ab16 Sort variables b9fe1c9 Split installation and quick start guides ca98784 Support encrypt attribute in chattr 854cfd5 Tolerate config file errors for certain commands b03d480 Update cmd/helps.gen.go f21f9e2 Update long help c86e2ba Upgrade by replacement if executable is in temp dir 696c2f6 Upgrade improvements ( #278 ) da941b8 Use command variable name for commands consistently 5a9f735 Use make targets in CI b3e445f Use mvdan.cc/gofumpt 9d08f18 Verify checksums when upgrading","title":"1.5.0 (2019-05-03)"},{"location":"reference/release-history/#142-2019-04-14","text":"295da27 Abstract out stdin, stdout, and stderr for testing 5fabcff Add apply test a24348b Add archive test da6ac24 Add bash & zsh completion ba462c6 Add coverage badge 7c8e4b6 Add destination directory is a symlink test dbc942d Add dump test 67bc2e0 Add golint test adcd979 Add import test c0f657a Add note about pets vs. cattle 7bf62ae Add permValue test 57d009a Add ppc64 architectures to README.md 9f1232f Add snap generation and tidy up YAML files be5e240 Attempt to build snap 9092c62 Combine coverage profiles for more accurate coverage 3273eee Disable Go modules when installing linters 9619ed6 Disable snapcraft support and re-enable ppc64, ppc64le, and arm 98ec39e Don't trust golang.org/x/lint/golint 2eb4227 Export TemplateSuffix 86859d9 Factor out coverage targets into Makefile 7d0bf1d Fix cosmetics bc2edae Fixes from PR review comments 7e53826 Hint at #243 a12313c Implement config file creation from template during init command b7e2346 Make default config file format TOML 6e5813c Remove golint checks while golint is broken eb1c302 Require Go 1.12 93c585d Respect umask in dump command 99068b9 Run gofumpt -s 0109341 Switch to github.com/stretchr/testify for testing 80e441b Tidy up .goreleaser.yaml 31d5fea Tidy up .goreleaser.yaml 4ae22b9 Tidy up config file creation in init 43c26fc Use github.com/twpayne/go-xdg v3 56c0b00 Use github.com/twpayne/go-xdg/v2 9aa00ca Use vfs.Contains f8b2094 add a space before ; fi c53640c add missing ; fi to .travis.yml 5e0b43b disable goveralls on pull requests 7b72952 don't run on PRs instead of exclusively running on them 6374b6c fixing go vet error","title":"1.4.2 (2019-04-14)"},{"location":"reference/release-history/#141-2019-03-20","text":"30bfacf Add git as a dependency for rpm and deb packages 8f40f2e Add ppc64 and ppc64le to goreleaser target b8bbd12 Fix #198 - Use os.UserHomeDir() instead of custom function d7e76e8 Fix new issue link in CONTRIBUTING","title":"1.4.1 (2019-03-20)"},{"location":"reference/release-history/#140-2019-03-14","text":"c827046 Add Mutator.Stat 8d8fb55 Add TOML as an output format e13bb89 Add gpg encryption 6075a02 Add manage as an alias for add 8406817 Add unmanage as an alias for forget e47c444 Add unmanaged command, fixes #186 cd3d86b Add userHomeDir 4cfdaac Change example configs to TOML and reformat 93d03aa Check lastpass CLI version on first call da8098b Create directory for config file before editing if needed b324637 Fix all markdownlint warnings, except one 72690a6 Fix double word in init help 201e7a5 Fix that accomodates blank lines and comments 4d32cde Make hostname only first part of hostname and add fullHostname 249e2b9 Make it clearer that the rpm packages work on OpenSUSE f2dfbb8 Only display text diffs b477972 Reduce number of semver libraries 02636ad Remove NullMutator d63c406 Remove unused function arguments 306df8b Return ErrNotExist from nullMutator.Stat b41824c Return an error instead of panicking 035988d Revert \"Remove NullMutator\" 9fea286 Revert \"Use vfs.ReadOnlyFS's instead of NullMutators\" 90d4274 Spell out lastpass --json arg ab807b1 Test to demonstrate parsing error ab1de29 Use latest github.com/twpayne/go-xdg 19947c8 Use latest version of github.com/twpayne/go-vfs 2a72a34 Use renameio correctly across multiple filesystems b1cddc3 Use userHomeDir instead of github.com/mitchellh/go-homedir 5bf7ead Use vfs.MkdirAll 18366aa Use vfs.ReadOnlyFS's instead of NullMutators","title":"1.4.0 (2019-03-14)"},{"location":"reference/release-history/#130-2019-01-30","text":"7f4bd2d Add Config.getVCSInfo f385ec1 Add ID as a well-known abbreviation 4daf21d Add check for generic secret command 32146ce Add check for suspicious filenames b3e8085 Add first run git init instructions to README 9b7b268 Add hermetic text functions from sprig, fixes #184 595dcf1 Add init command 2ef2695 Add stow-to-chezmoi.sh migration script 013e419 Add update command, fixes #159 6a1a0ea Always print permissions with three digits 1ef4f89 Consider files only containing whitespace as empty abbc0c1 Don't make init command apply by default 3cc895d Emphasize flexibility first 4dee096 Ensure that source directory exists in cd command f9290fc Factor out doctorCheck interface ed27b49 Factor out doctorCheckResult 1679704 Factor out ensureSourceDirectory a3830ca Factor out runDoctorCheck bd21ee6 Factor out vcs_infos.go 4633ca1 Fix dump command with targets cf18630 Fix handling of missing directories 18911f1 Fix source directory errors in documentation, fixes #171 85b7ece Fix template in example, fixes #161 f7edc93 Fix typos in README.md 68a304c Include args in usage d249d15 Init new repo when init is called with no args 792c631 Make source VCS pull command configurable 47b305a Mention init command in README.md dfd18a1 Minor documentation change 7abd4cc Parse permissions in octal 2d3eff1 Refactor doctor command to include versions, fixes #160 b8aabb0 Refactor getting started documentation 9abe99d Refactor init command 204a5a7 Remove evident comment fc71c55 Remove unnecessary os.FileInfo.Mode() calls d7be60a Rename onepassword config var to match command 13f5d47 Replace Command with Cmd in internal structure names 61ffbf4 Respect umask when creating source directory cf305f8 Store config file in config struct e0410cd Tidy up doctor check reporting b97f37d Update description 96797da fix: several plausible failure modes for the script during routine running","title":"1.3.0 (2019-01-30)"},{"location":"reference/release-history/#120-2019-01-18","text":"367c0d5 Add 1Password support, fixes #135 acbf852 Add advantages 0494cb8 Add doctor command 36cd576 Add generic secret manager support, fixes #51 932a8e9 Add support for \"secret\" command namespace 290d13e Add support for passwordstore e4c8d41 Better position transparency benefit bf45f84 Call pass show explicitly 2ff85c2 Document pass support, fixes #139 333066e Don't disable secret manager commands if binary is not present abf762f Don't export internal config structures 3a63e45 Include binary names in secret manager descriptions 209c1e2 Move keyring command into secret command f2ac9c3 Only add commands that have installed executables 015609d Re-order features based on feedback 24f7131 Remove --bitwarden-session flag 95c14a3 Rename Funcs to TemplateFuncs 718ae00 Rename field for consistency fe18833 Rename source files to match command structure 24c94fe Scan pass output up to the first newline, rather than splitting","title":"1.2.0 (2019-01-18)"},{"location":"reference/release-history/#110-2019-01-16","text":"a8aeb1b Add 'Why use chezmoi?' section abfe150 Add --prompt flag to add command, refs #123 d676fc6 Add chezmoi in the news section 55746d9 Add data command bbb5b2a Add link to Hacker News discussion 55bfe71 Add link to dotfiles.github.io 8677883 Add link to lobste.rs discussion fe39c57 Add link to reddit.com discussion 39c2645 Add missing dollar 8919b6c Add note about data command bf690dd Add os-release parser 341b99f Add osRelease to .chezmoi data, fixes #126 4044b1e Add table of packages 7a88b12 Add test for CGO 1fe3fe0 Add vault support, fixes #120 e0b7bad Avoid potential out-of-range access if string is empty d1ee299 Convert OS release map keys outside getOSRelease c1525d8 Convert os-release keys to JSON-like keys 61f7659 Correct source flag 9921965 Document .chezmoi.osRelease 8cc9fdd Don't add ignored files, fixes #124 4fecad4 Don't delete ignored files in exact directories 99e138e Don't duplicate licence text 34eb20d Extract target dir names when computing ignore pattern 6ac240c Factor out formatMap 6ffb4f1 Fix typo bf67981 Ignore errors from user.LookupGroupId if CGO is disabled, fixes #125 877f0cb Make error messages more consistent 53c20a0 Preserve existing directories in source state instead of renaming them 15a1cd2 Use latest version of github.com/twpayne/go-vfs 125f4ba Wrap comment 9cec1f6 dirNames: use make for init slice of string","title":"1.1.0 (2019-01-16)"},{"location":"reference/release-history/#100-2019-01-13","text":"d855c1e Add printing of symlinks to cat command 5529485 Don't check for config files in old locations, fixes #113 05935b1 Remove note about versioning af4b714 Use DestDir instead of TargetDir in code 7484973 Use consistent terminology in help and doc","title":"1.0.0 (2019-01-13)"},{"location":"reference/release-history/#0015-2019-01-13","text":"fc3be3e Add CONTRIBUTING.md 2f90eef Add initial chattr test dd7e6c1 Add more tests for chattr on file 744d2cf Add octalIntValue dfc456e Add tests for chattr on symlink f9fefac Allow no- prefix to remove attributes 6ffae71 Fix chattr -private on directories 619b2ed Fix chattr of files in directories, fixes #103 60a26df Print umask in octal in help, fixes #107 c42eecf Remove FIXMEs that are now Github issues 0d8551c Remove stale FIXME 32ce15c Remove unused cobra.Command argument 1c8d357 Reorganize functions 1704912 Respect .chezmoiignore in Entry.ConcreteValue 4612ada Respect .chezmoiignore in Entry.Evaluate 84c41c7 Respect .chezmoiignore in Entry.archive d8f8445 Sort functions alphabetically","title":"0.0.15 (2019-01-13)"},{"location":"reference/release-history/#0014-2019-01-12","text":"20ed7e2 Set version in linux-amd64 release","title":"0.0.14 (2019-01-12)"},{"location":"reference/release-history/#0013-2019-01-12","text":"d66bf04 Add .chezmoiignore support, fixes #91 ac412b6 Add PatternSet 9c6cedf Avoid duplicate filename in template errors 17a590c Avoid infinite loop when template value is empty 81eba36 Remove stale comment 60cb5ff Sort entries in test cab2f01 Use latest github.com/twpayne/go-vfs","title":"0.0.13 (2019-01-12)"},{"location":"reference/release-history/#0012-2019-01-11","text":"4e07b0e Add alphabetical test 721df9f Add edit-config command, fixes #90 bb05d54 Add inWord e4f1ca1 Add link to github.com/twpayne/dotfiles 9219d3f Compute valueRegexp when needed 0ec171a Factor out execEditor and runEditor 355aef8 Fix README.md formatting 555ea41 Improve variable substitution, fixes #89 6230dbf Use a tagged version of github.com/google/renameio 313c04b Use subtests in autotemplate tests","title":"0.0.12 (2019-01-11)"},{"location":"reference/release-history/#0011-2019-01-05","text":"02bcd30 Add exact support to chattr 7bb40c2 Add support for exact directories, fixes #11 447e244 Correct path to source directory 532d788 Ensure directory exists before creating .keep file 2abc9a9 Factor out AddOptions e66da3c Factor out ImportTAROptions ba1c8fa Reformat test b28a722 Remove default values a8c5ca1 Remove early reference to go-keyring 5004108 Rename jenkins to user 12d817d Shorten description 7f621cb Use interface{} for root values consistently","title":"0.0.11 (2019-01-05)"},{"location":"reference/release-history/#0010-2018-12-22","text":"5301881 Add --bitwarden-session flag cbd9256 Add initial Bitwarden support d068f60 Automatically parse Lastpass note values 6147683 Compute name argument fe723f8 Correct error text bbaf694 Correct variable name 4f2ddb2 Factor out addDir d9d79dd Factor out addFile 52c1768 Factor out addSymlink 66cb18c Move DirAttributes in to dir.go 703bfd6 Move FileAttributes into file.go 5e7036a Move TargetState tests into target_state_test.go c198aa1 Pass os.FileInfo to TargetState.addFile instead of perm and empty 4b9114a Reformat tests 9264001 Remove last trace of ParsedSourceDirName 72c8d6f Remove unnecessary masks 06559bc Remove unreachable code 7f9cabc Rename DirName to Name 2631a87 Rename FileName to Name c59600e Rename LinkName to linkname 04e1423 Rename ParsedSourceDirName to DirAttributes c2da0c0 Rename ParsedSourceFileName to FileAttributes 7f3b2a8 Rename TargetState.Import to ImportTAR a2bbef6 Rename internal variable 38cd4da Unify error messages across password managers 3db61d1 Use os.FileMode.Perm() consistently","title":"0.0.10 (2018-12-22)"},{"location":"reference/release-history/#009-2018-12-16","text":"39e003c Don't assume that config file exists, fixes #73 3a4ea33 Don't use cgo on linux_i386 0c6aca4 Enable CGO on Linux 5aa794d Make description consistent 4c8054f Make parameter documentation more consistent 4021463 Make usage error output less verbose f6ae4f3 Prefix errors with chezmoi: 2e007a3 Refresh go modules with latest versions 4c7aa0c Remove old version infrastructure 1ddcc7e Revert \"Ignore group lookup errors, fixes #65\" 28346cc Use cobra's --version flag","title":"0.0.9 (2018-12-16)"},{"location":"reference/release-history/#008-2018-12-14","text":"3913e51 Add archive documentation 13edec3 Document cd command 8e9ec60 Ignore group lookup errors, fixes #65 6449e9c Support XDG Base Directory Specification, fixes #19","title":"0.0.8 (2018-12-14)"},{"location":"reference/release-history/#007-2018-12-14","text":"baddf0f Generate unified diffs 52feafc Remove remaining references to Windows while Windows is unsupported 52566d9 Remove stray bracket 144b125 Restore default source VCS command 9629996 Update description to emphasize security","title":"0.0.7 (2018-12-14)"},{"location":"reference/release-history/#006-2018-12-11","text":"fd2f39b Add --recursive flag 6a33cdc Add Actuator.Rename f5fcdb1 Add Dir.Private c1d38dd Add Entry.ConcreteValue 842097f Add Entry.TargetName 22c530a Add FIXMEs for flags to add f1832ca Add File.Executable 66c2461 Add File.Private 20543f8 Add File.Template 15a3826 Add Symlink.Template ec77a95 Add TargetState.AddArchive 31481f7 Add YAML output 91be5c7 Add cd command 0b84bf5 Add chattr command, fixes #2 e26f3ec Add import command, fixes #50 42ecba3 Add package aliases 240ac97 Add source-path command 1f5eba6 Add test to exercise some commands 5bef462 Add type field 4556383 Apply umask last consistently 08a5345 Avoid overwriting argument before first use 8f570ef Bump version of github.com/twpayne/go-vfs 9cbae2a Check format before computing concrete value e8b97cb Clarify LastPass example a78af0e Correct function documentation 5d3ae7d Delete 'practical' section that is explained elsewhere d9fb233 Depersonalize template example bcf98b1 Disable Windows releases 242e549 Document exported struct 97818e0 Dump source and target paths, not names d7e1697 Dump state in JSON format instead of spew 6053e48 Evaluate entries before dumping them d4f8beb Export Entry.Evaluate a05d9c1 Export ParseSourceDirName 8660cb7 Export ParseSourceFileName 165397a Export ParsedSourceDirName e9e4d77 Export ParsedSourceFileName 9925c08 Factor out dir.go efd6dde Factor out file.go 2a6990d Factor out symlink.go 34a1cba Factor out target_state.go 7879a59 Fix capitalization 9312f94 Fix removal of target in remove command 4037322 Format github.com links consistently 166688c Improve short descriptions of commands b3625b2 Make it explicit that error is ignored 9db2ce1 Make it explicit that errors are ignored 5910f22 Make the NullActuator a singleton ae51ba4 Print source dir if no targets are specified c4bad5b Qualify .netrc example a8fcaa9 Quote permissions ad8add0 Refactor individual Entry application 9dc8b10 Remove --source-vcs flag ea5d380 Remove TargetState.AllEntries a35fbb4 Remove docker image building code 01086cc Remove fixed FIXME b62ac56 Remove uneccessary 'note that's 1750988 Remove unused field 307f767 Rename Symlink.Target to Symlink.LinkName bd27c36 Rename TargetState.AddArchive to TargetState.Import 55a947a Rename actuator to mutator ff58780 Rename variable for clarity 9b0e724 Replace getSourceNames with getEntries 2effdf7 Use absolute path to ignore dist directory 4387aa1 Use angle brackets for all examples 764263b Use dir, file, symlink order consistently ca06a88 Use getEntries and Entry.TargetName is remove command 615c3bd Use getEntries in cat command 4e74b17 Use getEntries in chattr command e375f25 Use getEntries in dump command 1d97198 Use targetName in archive 1804974 Use variable name ts for target state consistently a341f75 Use vfs.ReadOnlyFS to ensure all changes are made via an Actuator","title":"0.0.6 (2018-12-11)"},{"location":"reference/release-history/#005-2018-12-02","text":"083d25d Add --apply, --diff, and --prompt flags to edit command, fixes #28 5527d94 Add TargetState.ApplyOne a8670c4 Add prompt f644bf2 Cache keyring lookups 53a12d1 Cache lastpass lookups 900a2e3 Extend apply command to take a list of targets, fixes #3 db96d06 Extend diff command to take a list of targets, fixes #4 a324b0b Extend verify command to take a list of targets, fixes #5 7e98072 Factor out Config.applyArgs 89440ce Make runRemoveCommand a method on Config c37b9ad Remove trailing E from function names","title":"0.0.5 (2018-12-02)"},{"location":"reference/release-history/#004-2018-11-30","text":"a2e6e88 Add LastPass integration 377d68e Add graceful template error handling mechanism cbb5b2d Add installation docs referring to Goreleaser-generated artefacts and Homebrew formula 377999a Add lastpass command as a wrapper for lpass 496c2ba Documentation tweaks 06f8e7a Ensure Go modules are enabled in before hook 273e14f Factor out keyringFunc e612476 Handle errors gracefully in keyring 841d2e7 Handle errors gracefully in lastpass d88b705 Make CI output less verbose 7992f60 Make template execution more strict 4c7aece Only read files and evaluate templates when required a436144 Remove GO111MODULES b45c5ad Set GO111MODULE in .travis.yml","title":"0.0.4 (2018-11-30)"},{"location":"reference/release-history/#003-2018-11-30","text":"cfab91b Add newline at end of file 8e8d142 Use Go 1.11.x explicitly","title":"0.0.3 (2018-11-30)"},{"location":"reference/source-state-attributes/","text":"Source state attributes chezmoi stores the source state of files, symbolic links, and directories in regular files and directories in the source directory ( ~/.local/share/chezmoi by default). This location can be overridden with the -S flag or by giving a value for sourceDir in the configuration file. Directory targets are represented as directories in the source state. All other target types are represented as files in the source state. Some state is encoded in the source names. The following prefixes and suffixes are special, and are collectively referred to as \"attributes\": Prefix Effect after_ Run script after updating the destination before_ Run script before updating the destination create_ Ensure that the file exists, and create it with contents if it does not dot_ Rename to use a leading dot, e.g. dot_foo becomes .foo empty_ Ensure the file exists, even if is empty. By default, empty files are removed encrypted_ Encrypt the file in the source state exact_ Remove anything not managed by chezmoi executable_ Add executable permissions to the target file literal_ Stop parsing prefix attributes modify_ Treat the contents as a script that modifies an existing file once_ Only run the script if its contents have not been run before onchange_ Only run the script if its contents have not been run before with the same filename private_ Remove all group and world permissions from the target file or directory readonly_ Remove all write permissions from the target file or directory remove_ Remove the file or symlink if it exists or the directory if it is empty run_ Treat the contents as a script to run symlink_ Create a symlink instead of a regular file Suffix Effect .literal Stop parsing suffix attributes .tmpl Treat the contents of the source file as a template Different target types allow different prefixes and suffixes. The order of prefixes is important. Target type Source type Allowed prefixes in order Allowed suffixes Directory Directory remove_ , exact_ , private_ , readonly_ , dot_ none Regular file File encrypted_ , private_ , executable_ , dot_ .tmpl Create file File create_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Modify file File modify_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Remove File remove_ , dot_ none Script File run_ , once_ or onchange_ , before_ or after_ .tmpl Symbolic link File symlink_ , dot_ .tmpl The literal_ prefix and .literal suffix can appear anywhere and stop attribute parsing. This permits filenames that would otherwise conflict with chezmoi's attributes to be represented. In addition, if the source file is encrypted, the suffix .age (when age encryption is used) or .asc (when gpg encryption is used) is stripped. These suffixes can be overridden with the age.suffix and gpg.suffix configuration variables. chezmoi ignores all files and directories in the source directory that begin with a . with the exception of files and directories that begin with .chezmoi .","title":"Source state attributes"},{"location":"reference/source-state-attributes/#source-state-attributes","text":"chezmoi stores the source state of files, symbolic links, and directories in regular files and directories in the source directory ( ~/.local/share/chezmoi by default). This location can be overridden with the -S flag or by giving a value for sourceDir in the configuration file. Directory targets are represented as directories in the source state. All other target types are represented as files in the source state. Some state is encoded in the source names. The following prefixes and suffixes are special, and are collectively referred to as \"attributes\": Prefix Effect after_ Run script after updating the destination before_ Run script before updating the destination create_ Ensure that the file exists, and create it with contents if it does not dot_ Rename to use a leading dot, e.g. dot_foo becomes .foo empty_ Ensure the file exists, even if is empty. By default, empty files are removed encrypted_ Encrypt the file in the source state exact_ Remove anything not managed by chezmoi executable_ Add executable permissions to the target file literal_ Stop parsing prefix attributes modify_ Treat the contents as a script that modifies an existing file once_ Only run the script if its contents have not been run before onchange_ Only run the script if its contents have not been run before with the same filename private_ Remove all group and world permissions from the target file or directory readonly_ Remove all write permissions from the target file or directory remove_ Remove the file or symlink if it exists or the directory if it is empty run_ Treat the contents as a script to run symlink_ Create a symlink instead of a regular file Suffix Effect .literal Stop parsing suffix attributes .tmpl Treat the contents of the source file as a template Different target types allow different prefixes and suffixes. The order of prefixes is important. Target type Source type Allowed prefixes in order Allowed suffixes Directory Directory remove_ , exact_ , private_ , readonly_ , dot_ none Regular file File encrypted_ , private_ , executable_ , dot_ .tmpl Create file File create_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Modify file File modify_ , encrypted_ , private_ , readonly_ , executable_ , dot_ .tmpl Remove File remove_ , dot_ none Script File run_ , once_ or onchange_ , before_ or after_ .tmpl Symbolic link File symlink_ , dot_ .tmpl The literal_ prefix and .literal suffix can appear anywhere and stop attribute parsing. This permits filenames that would otherwise conflict with chezmoi's attributes to be represented. In addition, if the source file is encrypted, the suffix .age (when age encryption is used) or .asc (when gpg encryption is used) is stripped. These suffixes can be overridden with the age.suffix and gpg.suffix configuration variables. chezmoi ignores all files and directories in the source directory that begin with a . with the exception of files and directories that begin with .chezmoi .","title":"Source state attributes"},{"location":"reference/target-types/","text":"Target types chezmoi will create, update, and delete files, directories, and symbolic links in the destination directory, and run scripts. chezmoi deterministically performs actions in ASCII order of their target name. Example Given a file dot_a , a script run_z , and a directory exact_dot_c , chezmoi will first create .a , create .c , and then execute run_z . Files Files are represented by regular files in the source state. The encrypted_ attribute determines whether the file in the source state is encrypted. The executable_ attribute will set the executable bits in the target state, and the private_ attribute will clear all group and world permissions. The readonly_ attribute will clear all write permission bits in the target state. Files with the .tmpl suffix will be interpreted as templates. If the target contents are empty then the file will be removed, unless it has an empty_ prefix. Create file Files with the create_ prefix will be created in the target state with the contents of the file in the source state if they do not already exist. If the file in the destination state already exists then its contents will be left unchanged. Modify file Files with the modify_ prefix are treated as scripts that modify an existing file. If the file contains a line with the text chezmoi:modify-template then that line is removed and the rest of the script is executed template with the existing file's contents passed as a string in .chezmoi.stdin . The result of executing the template are the new contents of the file. Otherwise, the contents of the existing file (which maybe empty if the existing file does not exist or is empty) are passed to the script's standard input, and the new contents are read from the script's standard output. Remove entry Files with the remove_ prefix will cause the corresponding entry (file, directory, or symlink) to be removed in the target state. Directories Directories are represented by regular directories in the source state. The exact_ attribute causes chezmoi to remove any entries in the target state that are not explicitly specified in the source state, and the private_ attribute causes chezmoi to clear all group and world permissions. The readonly_ attribute will clear all write permission bits. Symbolic links Symbolic links are represented by regular files in the source state with the prefix symlink_ . The contents of the file will have a trailing newline stripped, and the result be interpreted as the target of the symbolic link. Symbolic links with the .tmpl suffix in the source state are interpreted as templates. If the target of the symbolic link is empty or consists only of whitespace, then the target is removed. Scripts Scripts are represented as regular files in the source state with prefix run_ . The file's contents (after being interpreted as a template if it has a .tmpl suffix) are executed. Scripts are executed on every chezmoi apply , unless they have the once_ or onchange_ attribute. run_once_ scripts are only executed if a script with the same contents has not been run before, i.e. if the script is new or if its contents have changed. run_onchange_ scripts are executed whenever their contents change, even if a script with the same contents has run before. Scripts with the before_ attribute are executed before any files, directories, or symlinks are updated. Scripts with the after_ attribute are executed after all files, directories, and symlinks have been updated. Scripts without an before_ or after_ attribute are executed in ASCII order of their target names with respect to files, directories, and symlinks. Scripts will normally run with their working directory set to their equivalent location in the destination directory. If the equivalent location in the destination directory either does not exist or is not a directory, then chezmoi will walk up the script's directory hierarchy and run the script in the first directory that exists and is a directory. Example A script in ~/.local/share/chezmoi/dir/run_script will be run with a working directory of ~/dir . The scriptEnv configuration variable specifies extra environment variables when running the script. Scripts on Windows The execution of scripts on Windows depends on the script's file extension. Windows will natively execute scripts with a .bat , .cmd , .com , and .exe extensions. Other extensions require an interpreter, which must be in your %PATH% . The default script interpreters are: Extension Command Arguments .pl perl none .py python3 none .ps1 powershell -NoLogo .rb ruby none Script interpreters can be added or overridden by adding the corresponding extension (without the leading dot) as a key under the interpreters section of the configuration file. Note The leading . is dropped from extension , for example to specify the interpreter for .pl files you configure interpreters.pl (where . in this case just means \"a child of\" in the configuration file, however that is specified in your preferred format). Example To change the Python interpreter to C:\\Python39\\python3.exe and add a Tcl/Tk interpreter, include the following in your config file: ~/.config/chezmoi/chezmoi.toml [interpreters.py] command = 'C:\\Python39\\python3.exe' [interpreters.tcl] command = \"tclsh\" Or if using YAML: ~/.config/chezmoi/chezmoi.yaml interpreters : py : command : \"C:\\Python39 \\ python3.exe\" tcl : command : \"tclsh\" Note that the TOML version can also be written like this, which resembles the YAML version more and makes it clear that the key for each file extension should not have a leading . : ~/.config/chezmoi/chezmoi.toml [interpreters] py = { command = 'C:\\Python39\\python3.exe' } tcl = { command = \"tclsh\" } Note If you intend to use PowerShell Core ( pwsh.exe ) as the .ps1 interpreter, include the following in your config file: ~/.config/chezmoi/chezmoi.toml [interpreters.ps1] command = \"pwsh\" args = [ \"-NoLogo\" ] If the script in the source state is a template (with a .tmpl extension), then chezmoi will strip the .tmpl extension and use the next remaining extension to determine the interpreter to use. symlink mode By default, chezmoi will create regular files and directories. Setting mode = \"symlink\" will make chezmoi behave more like a dotfile manager that uses symlinks by default, i.e. chezmoi apply will make dotfiles symlinks to files in the source directory if the target is a regular file and is not encrypted, executable, private, or a template.","title":"Target types"},{"location":"reference/target-types/#target-types","text":"chezmoi will create, update, and delete files, directories, and symbolic links in the destination directory, and run scripts. chezmoi deterministically performs actions in ASCII order of their target name. Example Given a file dot_a , a script run_z , and a directory exact_dot_c , chezmoi will first create .a , create .c , and then execute run_z .","title":"Target types"},{"location":"reference/target-types/#files","text":"Files are represented by regular files in the source state. The encrypted_ attribute determines whether the file in the source state is encrypted. The executable_ attribute will set the executable bits in the target state, and the private_ attribute will clear all group and world permissions. The readonly_ attribute will clear all write permission bits in the target state. Files with the .tmpl suffix will be interpreted as templates. If the target contents are empty then the file will be removed, unless it has an empty_ prefix.","title":"Files"},{"location":"reference/target-types/#create-file","text":"Files with the create_ prefix will be created in the target state with the contents of the file in the source state if they do not already exist. If the file in the destination state already exists then its contents will be left unchanged.","title":"Create file"},{"location":"reference/target-types/#modify-file","text":"Files with the modify_ prefix are treated as scripts that modify an existing file. If the file contains a line with the text chezmoi:modify-template then that line is removed and the rest of the script is executed template with the existing file's contents passed as a string in .chezmoi.stdin . The result of executing the template are the new contents of the file. Otherwise, the contents of the existing file (which maybe empty if the existing file does not exist or is empty) are passed to the script's standard input, and the new contents are read from the script's standard output.","title":"Modify file"},{"location":"reference/target-types/#remove-entry","text":"Files with the remove_ prefix will cause the corresponding entry (file, directory, or symlink) to be removed in the target state.","title":"Remove entry"},{"location":"reference/target-types/#directories","text":"Directories are represented by regular directories in the source state. The exact_ attribute causes chezmoi to remove any entries in the target state that are not explicitly specified in the source state, and the private_ attribute causes chezmoi to clear all group and world permissions. The readonly_ attribute will clear all write permission bits.","title":"Directories"},{"location":"reference/target-types/#symbolic-links","text":"Symbolic links are represented by regular files in the source state with the prefix symlink_ . The contents of the file will have a trailing newline stripped, and the result be interpreted as the target of the symbolic link. Symbolic links with the .tmpl suffix in the source state are interpreted as templates. If the target of the symbolic link is empty or consists only of whitespace, then the target is removed.","title":"Symbolic links"},{"location":"reference/target-types/#scripts","text":"Scripts are represented as regular files in the source state with prefix run_ . The file's contents (after being interpreted as a template if it has a .tmpl suffix) are executed. Scripts are executed on every chezmoi apply , unless they have the once_ or onchange_ attribute. run_once_ scripts are only executed if a script with the same contents has not been run before, i.e. if the script is new or if its contents have changed. run_onchange_ scripts are executed whenever their contents change, even if a script with the same contents has run before. Scripts with the before_ attribute are executed before any files, directories, or symlinks are updated. Scripts with the after_ attribute are executed after all files, directories, and symlinks have been updated. Scripts without an before_ or after_ attribute are executed in ASCII order of their target names with respect to files, directories, and symlinks. Scripts will normally run with their working directory set to their equivalent location in the destination directory. If the equivalent location in the destination directory either does not exist or is not a directory, then chezmoi will walk up the script's directory hierarchy and run the script in the first directory that exists and is a directory. Example A script in ~/.local/share/chezmoi/dir/run_script will be run with a working directory of ~/dir . The scriptEnv configuration variable specifies extra environment variables when running the script.","title":"Scripts"},{"location":"reference/target-types/#scripts-on-windows","text":"The execution of scripts on Windows depends on the script's file extension. Windows will natively execute scripts with a .bat , .cmd , .com , and .exe extensions. Other extensions require an interpreter, which must be in your %PATH% . The default script interpreters are: Extension Command Arguments .pl perl none .py python3 none .ps1 powershell -NoLogo .rb ruby none Script interpreters can be added or overridden by adding the corresponding extension (without the leading dot) as a key under the interpreters section of the configuration file. Note The leading . is dropped from extension , for example to specify the interpreter for .pl files you configure interpreters.pl (where . in this case just means \"a child of\" in the configuration file, however that is specified in your preferred format). Example To change the Python interpreter to C:\\Python39\\python3.exe and add a Tcl/Tk interpreter, include the following in your config file: ~/.config/chezmoi/chezmoi.toml [interpreters.py] command = 'C:\\Python39\\python3.exe' [interpreters.tcl] command = \"tclsh\" Or if using YAML: ~/.config/chezmoi/chezmoi.yaml interpreters : py : command : \"C:\\Python39 \\ python3.exe\" tcl : command : \"tclsh\" Note that the TOML version can also be written like this, which resembles the YAML version more and makes it clear that the key for each file extension should not have a leading . : ~/.config/chezmoi/chezmoi.toml [interpreters] py = { command = 'C:\\Python39\\python3.exe' } tcl = { command = \"tclsh\" } Note If you intend to use PowerShell Core ( pwsh.exe ) as the .ps1 interpreter, include the following in your config file: ~/.config/chezmoi/chezmoi.toml [interpreters.ps1] command = \"pwsh\" args = [ \"-NoLogo\" ] If the script in the source state is a template (with a .tmpl extension), then chezmoi will strip the .tmpl extension and use the next remaining extension to determine the interpreter to use.","title":"Scripts on Windows"},{"location":"reference/target-types/#symlink-mode","text":"By default, chezmoi will create regular files and directories. Setting mode = \"symlink\" will make chezmoi behave more like a dotfile manager that uses symlinks by default, i.e. chezmoi apply will make dotfiles symlinks to files in the source directory if the target is a regular file and is not encrypted, executable, private, or a template.","title":"symlink mode"},{"location":"reference/command-line-flags/","text":"Command line flags Command line flags override any values set in the configuration file.","title":"Command line flags"},{"location":"reference/command-line-flags/#command-line-flags","text":"Command line flags override any values set in the configuration file.","title":"Command line flags"},{"location":"reference/command-line-flags/common/","text":"Common command line flags The following flags apply to multiple commands where they are relevant. -f , --format json | yaml Set the output format. -i , --include types Include target state entries of type types . types is a comma-separated list of types: Type Description all All entries (default) none No entries dirs Directories files Files remove Removes scripts Scripts symlinks Symbolic links always Scripts that are always run encrypted Encrypted entries externals External entries templates Templates Types can be preceded with no to remove them. Types can be explicitly excluded with the --exclude flag. Example --include=files specifies all files. --init Regenerate and reread the config file from the config file template before computing the target state. --interactive Prompt before applying each target. -r , --recursive Recurse into subdirectories, true by default. -x , --exclude types Exclude target state entries of type types . types is defined as in the --include flag and defaults to none . Example --exclude=scripts will cause the command to not run scripts and --exclude=encrypted will exclude encrypted files.","title":"Common"},{"location":"reference/command-line-flags/common/#common-command-line-flags","text":"The following flags apply to multiple commands where they are relevant.","title":"Common command line flags"},{"location":"reference/command-line-flags/common/#-f-format-jsonyaml","text":"Set the output format.","title":"-f, --format json|yaml"},{"location":"reference/command-line-flags/common/#-i-include-types","text":"Include target state entries of type types . types is a comma-separated list of types: Type Description all All entries (default) none No entries dirs Directories files Files remove Removes scripts Scripts symlinks Symbolic links always Scripts that are always run encrypted Encrypted entries externals External entries templates Templates Types can be preceded with no to remove them. Types can be explicitly excluded with the --exclude flag. Example --include=files specifies all files.","title":"-i, --include types"},{"location":"reference/command-line-flags/common/#-init","text":"Regenerate and reread the config file from the config file template before computing the target state.","title":"--init"},{"location":"reference/command-line-flags/common/#-interactive","text":"Prompt before applying each target.","title":"--interactive"},{"location":"reference/command-line-flags/common/#-r-recursive","text":"Recurse into subdirectories, true by default.","title":"-r, --recursive"},{"location":"reference/command-line-flags/common/#-x-exclude-types","text":"Exclude target state entries of type types . types is defined as in the --include flag and defaults to none . Example --exclude=scripts will cause the command to not run scripts and --exclude=encrypted will exclude encrypted files.","title":"-x, --exclude types"},{"location":"reference/command-line-flags/developer/","text":"Developer command line flags The following flags are global but only relevant for developers and debugging. --cpu-profile filename Write a Go CPU profile to filename . --debug Log information helpful for debugging.","title":"Developer"},{"location":"reference/command-line-flags/developer/#developer-command-line-flags","text":"The following flags are global but only relevant for developers and debugging.","title":"Developer command line flags"},{"location":"reference/command-line-flags/developer/#-cpu-profile-filename","text":"Write a Go CPU profile to filename .","title":"--cpu-profile filename"},{"location":"reference/command-line-flags/developer/#-debug","text":"Log information helpful for debugging.","title":"--debug"},{"location":"reference/command-line-flags/global/","text":"Global command line flags --cache directory Use directory as the cache directory. --color value Colorize diffs, value can be on , off , auto , or any boolean-like value recognized by promptBool . The default is auto which will colorize diffs only if the environment variable $NO_COLOR is not set and stdout is a terminal. -c , --config filename Read the configuration from filename . --config-format json | toml | yaml Assume the configuration file is in the given format. This is only needed if the config filename does not have an extension, for example when it is /dev/stdin . -D , --destination directory Use directory as the destination directory. -n , --dry-run Set dry run mode. In dry run mode, the destination directory is never modified. This is most useful in combination with the -v (verbose) flag to print changes that would be made without making them. --force Make changes without prompting. -h , --help Print help. -k , --keep-going Keep going as far as possible after a encountering an error. --no-pager Do not use the pager. --no-tty Do not attempt to get a TTY for prompts. Instead, read them from stdin. -o , --output filename Write the output to filename instead of stdout. --persistent-state filename Read and write the persistent state from filename . By default, chezmoi stores its persistent state in chezmoistate.boltdb in the same directory as its configuration file. --progress Show progress when downloading externals. -R , --refresh-externals [ value ] Control the refresh of the externals cache. value can be any of always , auto , or never and defaults to always if no value is specified. If no --refresh-externals flag is specified then chezmoi defaults to auto . always (or any truthy value as accepted by parseBool ) causes chezmoi to re-download externals. auto means only re-download externals that have not been downloaded within their refresh periods. never (or any other falsey value accepted by parseBool ) means only download if no cached external is available. -S , --source directory Use directory as the source directory. --use-builtin-age value Use chezmoi's builtin age encryption instead of an external age command. value can be on , off , auto , or any boolean-like value recognized by promptBool . The default is auto which will only use the builtin age if age.command cannot be found in $PATH . The builtin age command does not support passphrases, symmetric encryption, or the use of SSH keys. --use-builtin-git value Use chezmoi's builtin git instead of git.command for the init and update commands. value can be on , off , auto , or any boolean-like value recognized by promptBool . The default is auto which will only use the builtin git if git.command cannot be found in $PATH . Info chezmoi's builtin git has only supports the HTTP and HTTPS transports and does not support git-repo externals. -v , --verbose Set verbose mode. In verbose mode, chezmoi prints the changes that it is making as approximate shell commands, and any differences in files between the target state and the destination set are printed as unified diffs. --version Print the version of chezmoi, the commit at which it was built, and the build timestamp. -w , --working-tree directory Use directory as the git working tree directory. By default, chezmoi searches the source directory and then its ancestors for the first directory that contains a .git directory.","title":"Global"},{"location":"reference/command-line-flags/global/#global-command-line-flags","text":"","title":"Global command line flags"},{"location":"reference/command-line-flags/global/#-cache-directory","text":"Use directory as the cache directory.","title":"--cache directory"},{"location":"reference/command-line-flags/global/#-color-value","text":"Colorize diffs, value can be on , off , auto , or any boolean-like value recognized by promptBool . The default is auto which will colorize diffs only if the environment variable $NO_COLOR is not set and stdout is a terminal.","title":"--color value"},{"location":"reference/command-line-flags/global/#-c-config-filename","text":"Read the configuration from filename .","title":"-c, --config filename"},{"location":"reference/command-line-flags/global/#-config-format-jsontomlyaml","text":"Assume the configuration file is in the given format. This is only needed if the config filename does not have an extension, for example when it is /dev/stdin .","title":"--config-format json|toml|yaml"},{"location":"reference/command-line-flags/global/#-d-destination-directory","text":"Use directory as the destination directory.","title":"-D, --destination directory"},{"location":"reference/command-line-flags/global/#-n-dry-run","text":"Set dry run mode. In dry run mode, the destination directory is never modified. This is most useful in combination with the -v (verbose) flag to print changes that would be made without making them.","title":"-n, --dry-run"},{"location":"reference/command-line-flags/global/#-force","text":"Make changes without prompting.","title":"--force"},{"location":"reference/command-line-flags/global/#-h-help","text":"Print help.","title":"-h, --help"},{"location":"reference/command-line-flags/global/#-k-keep-going","text":"Keep going as far as possible after a encountering an error.","title":"-k, --keep-going"},{"location":"reference/command-line-flags/global/#-no-pager","text":"Do not use the pager.","title":"--no-pager"},{"location":"reference/command-line-flags/global/#-no-tty","text":"Do not attempt to get a TTY for prompts. Instead, read them from stdin.","title":"--no-tty"},{"location":"reference/command-line-flags/global/#-o-output-filename","text":"Write the output to filename instead of stdout.","title":"-o, --output filename"},{"location":"reference/command-line-flags/global/#-persistent-state-filename","text":"Read and write the persistent state from filename . By default, chezmoi stores its persistent state in chezmoistate.boltdb in the same directory as its configuration file.","title":"--persistent-state filename"},{"location":"reference/command-line-flags/global/#-progress","text":"Show progress when downloading externals.","title":"--progress"},{"location":"reference/command-line-flags/global/#-r-refresh-externals-value","text":"Control the refresh of the externals cache. value can be any of always , auto , or never and defaults to always if no value is specified. If no --refresh-externals flag is specified then chezmoi defaults to auto . always (or any truthy value as accepted by parseBool ) causes chezmoi to re-download externals. auto means only re-download externals that have not been downloaded within their refresh periods. never (or any other falsey value accepted by parseBool ) means only download if no cached external is available.","title":"-R, --refresh-externals [value]"},{"location":"reference/command-line-flags/global/#-s-source-directory","text":"Use directory as the source directory.","title":"-S, --source directory"},{"location":"reference/command-line-flags/global/#-use-builtin-age-value","text":"Use chezmoi's builtin age encryption instead of an external age command. value can be on , off , auto , or any boolean-like value recognized by promptBool . The default is auto which will only use the builtin age if age.command cannot be found in $PATH . The builtin age command does not support passphrases, symmetric encryption, or the use of SSH keys.","title":"--use-builtin-age value"},{"location":"reference/command-line-flags/global/#-use-builtin-git-value","text":"Use chezmoi's builtin git instead of git.command for the init and update commands. value can be on , off , auto , or any boolean-like value recognized by promptBool . The default is auto which will only use the builtin git if git.command cannot be found in $PATH . Info chezmoi's builtin git has only supports the HTTP and HTTPS transports and does not support git-repo externals.","title":"--use-builtin-git value"},{"location":"reference/command-line-flags/global/#-v-verbose","text":"Set verbose mode. In verbose mode, chezmoi prints the changes that it is making as approximate shell commands, and any differences in files between the target state and the destination set are printed as unified diffs.","title":"-v, --verbose"},{"location":"reference/command-line-flags/global/#-version","text":"Print the version of chezmoi, the commit at which it was built, and the build timestamp.","title":"--version"},{"location":"reference/command-line-flags/global/#-w-working-tree-directory","text":"Use directory as the git working tree directory. By default, chezmoi searches the source directory and then its ancestors for the first directory that contains a .git directory.","title":"-w, --working-tree directory"},{"location":"reference/commands/add/","text":"add target ... Add target s to the source state. If any target is already in the source state, then its source state is replaced with its current state in the destination directory. --autotemplate Automatically generate a template by replacing strings that match variable values from the data section of the config file with their respective config names as a template string. Longer substitutions occur before shorter ones. This implies the --template option. --encrypt Encrypt files using the defined encryption method. -f , --force Add target s, even if doing so would cause a source template to be overwritten. --follow If the last part of a target is a symlink, add the target of the symlink instead of the symlink itself. --exact Set the exact attribute on added directories. -i , --include types Only add entries of type types . -p , --prompt Interactively prompt before adding each file. -r , --recursive Recursively add all files, directories, and symlinks. -T , --template Set the template attribute on added files and symlinks. --template-symlinks When adding symlink to an absolute path in the source directory or destination directory, create a symlink template with .chezmoi.sourceDir or .chezmoi.homeDir . This is useful for creating portable absolute symlinks. Bug chezmoi add will fail if the entry being added is in a directory implicitly created by an external . See this GitHub issue for details. Example $ chezmoi add ~/.bashrc $ chezmoi add ~/.gitconfig --template $ chezmoi add ~/.ssh/id_rsa --encrypt $ chezmoi add ~/.vim --recursive $ chezmoi add ~/.oh-my-zsh --exact --recursive","title":"add"},{"location":"reference/commands/add/#add-target","text":"Add target s to the source state. If any target is already in the source state, then its source state is replaced with its current state in the destination directory.","title":"add target..."},{"location":"reference/commands/add/#-autotemplate","text":"Automatically generate a template by replacing strings that match variable values from the data section of the config file with their respective config names as a template string. Longer substitutions occur before shorter ones. This implies the --template option.","title":"--autotemplate"},{"location":"reference/commands/add/#-encrypt","text":"Encrypt files using the defined encryption method.","title":"--encrypt"},{"location":"reference/commands/add/#-f-force","text":"Add target s, even if doing so would cause a source template to be overwritten.","title":"-f, --force"},{"location":"reference/commands/add/#-follow","text":"If the last part of a target is a symlink, add the target of the symlink instead of the symlink itself.","title":"--follow"},{"location":"reference/commands/add/#-exact","text":"Set the exact attribute on added directories.","title":"--exact"},{"location":"reference/commands/add/#-i-include-types","text":"Only add entries of type types .","title":"-i, --include types"},{"location":"reference/commands/add/#-p-prompt","text":"Interactively prompt before adding each file.","title":"-p, --prompt"},{"location":"reference/commands/add/#-r-recursive","text":"Recursively add all files, directories, and symlinks.","title":"-r, --recursive"},{"location":"reference/commands/add/#-t-template","text":"Set the template attribute on added files and symlinks.","title":"-T, --template"},{"location":"reference/commands/add/#-template-symlinks","text":"When adding symlink to an absolute path in the source directory or destination directory, create a symlink template with .chezmoi.sourceDir or .chezmoi.homeDir . This is useful for creating portable absolute symlinks. Bug chezmoi add will fail if the entry being added is in a directory implicitly created by an external . See this GitHub issue for details. Example $ chezmoi add ~/.bashrc $ chezmoi add ~/.gitconfig --template $ chezmoi add ~/.ssh/id_rsa --encrypt $ chezmoi add ~/.vim --recursive $ chezmoi add ~/.oh-my-zsh --exact --recursive","title":"--template-symlinks"},{"location":"reference/commands/apply/","text":"apply [ target ...] Ensure that target ... are in the target state, updating them if necessary. If no targets are specified, the state of all targets are ensured. If a target has been modified since chezmoi last wrote it then the user will be prompted if they want to overwrite the file. -i , --include types Only add entries of type types . --source-path Specify targets by source path, rather than target path. This is useful for applying changes after editing. Example $ chezmoi apply $ chezmoi apply --dry-run --verbose $ chezmoi apply ~/.bashrc","title":"apply"},{"location":"reference/commands/apply/#apply-target","text":"Ensure that target ... are in the target state, updating them if necessary. If no targets are specified, the state of all targets are ensured. If a target has been modified since chezmoi last wrote it then the user will be prompted if they want to overwrite the file.","title":"apply [target...]"},{"location":"reference/commands/apply/#-i-include-types","text":"Only add entries of type types .","title":"-i, --include types"},{"location":"reference/commands/apply/#-source-path","text":"Specify targets by source path, rather than target path. This is useful for applying changes after editing. Example $ chezmoi apply $ chezmoi apply --dry-run --verbose $ chezmoi apply ~/.bashrc","title":"--source-path"},{"location":"reference/commands/archive/","text":"archive [ target ....] Generate an archive of the target state, or only the targets specified. This can be piped into tar to inspect the target state. -f , --format tar | tar.gz | tgz | zip Write the archive in format . If --output is set the format is guessed from the extension, otherwise the default is tar . -i , --include types Only include entries of type types . -z , --gzip Compress the archive with gzip. This is automatically set if the format is tar.gz or tgz and is ignored if the format is zip . Example $ chezmoi archive | tar tvf - $ chezmoi archive --output = dotfiles.tar.gz $ chezmoi archive --output = dotfiles.zip","title":"archive"},{"location":"reference/commands/archive/#archive-target","text":"Generate an archive of the target state, or only the targets specified. This can be piped into tar to inspect the target state.","title":"archive [target....]"},{"location":"reference/commands/archive/#-f-format-tartargztgzzip","text":"Write the archive in format . If --output is set the format is guessed from the extension, otherwise the default is tar .","title":"-f, --format tar|tar.gz|tgz|zip"},{"location":"reference/commands/archive/#-i-include-types","text":"Only include entries of type types .","title":"-i, --include types"},{"location":"reference/commands/archive/#-z-gzip","text":"Compress the archive with gzip. This is automatically set if the format is tar.gz or tgz and is ignored if the format is zip . Example $ chezmoi archive | tar tvf - $ chezmoi archive --output = dotfiles.tar.gz $ chezmoi archive --output = dotfiles.zip","title":"-z, --gzip"},{"location":"reference/commands/cat-config/","text":"cat-config Print the configuration file. Example $ chezmoi cat-config","title":"cat-config"},{"location":"reference/commands/cat-config/#cat-config","text":"Print the configuration file. Example $ chezmoi cat-config","title":"cat-config"},{"location":"reference/commands/cat/","text":"cat target ... Write the target contents of target s to stdout. target s must be files, scripts, or symlinks. For files, the target file contents are written. For scripts, the script's contents are written. For symlinks, the target is written. Example $ chezmoi cat ~/.bashrc","title":"cat"},{"location":"reference/commands/cat/#cat-target","text":"Write the target contents of target s to stdout. target s must be files, scripts, or symlinks. For files, the target file contents are written. For scripts, the script's contents are written. For symlinks, the target is written. Example $ chezmoi cat ~/.bashrc","title":"cat target..."},{"location":"reference/commands/cd/","text":"cd [ path ] Launch a shell in the working tree (typically the source directory). chezmoi will launch the command set by the cd.command configuration variable with any extra arguments specified by cd.args . If this is not set, chezmoi will attempt to detect your shell and finally fall back to an OS-specific default. If the optional argument path is present, the shell will be launched in the source directory corresponding to path . Hint This does not change the current directory of the current shell. To do that, instead use: $ cd $( chezmoi source-path ) Example $ chezmoi cd","title":"cd"},{"location":"reference/commands/cd/#cd-path","text":"Launch a shell in the working tree (typically the source directory). chezmoi will launch the command set by the cd.command configuration variable with any extra arguments specified by cd.args . If this is not set, chezmoi will attempt to detect your shell and finally fall back to an OS-specific default. If the optional argument path is present, the shell will be launched in the source directory corresponding to path . Hint This does not change the current directory of the current shell. To do that, instead use: $ cd $( chezmoi source-path ) Example $ chezmoi cd","title":"cd [path]"},{"location":"reference/commands/chattr/","text":"chattr modifier target ... Change the attributes and/or type of target s. modifier specifies what to modify. Add attributes by specifying them or their abbreviations directly, optionally prefixed with a plus sign ( + ). Remove attributes by prefixing them or their attributes with the string no or a minus sign ( - ). The available attribute modifiers and their abbreviations are: Attribute modifier Abbreviation after a before b empty e encrypted none exact none executable x once o private p readonly r remove none template t The type of a target can be changed using a type modifier: Type modifier create modify script symlink The negative form of type modifiers, e.g. nocreate , changes the target to be a regular file if it is of that type, otherwise the type is left unchanged. Multiple modifications may be specified by separating them with a comma ( , ). If you use the - modifier form then you must put modifier after a -- to prevent chezmoi from interpreting - modifier as an option. Example $ chezmoi chattr template ~/.bashrc $ chezmoi chattr noempty ~/.profile $ chezmoi chattr private,template ~/.netrc $ chezmoi chattr -- -x ~/.zshrc $ chezmoi chattr +create,+private ~/.kube/config","title":"chattr"},{"location":"reference/commands/chattr/#chattr-modifier-target","text":"Change the attributes and/or type of target s. modifier specifies what to modify. Add attributes by specifying them or their abbreviations directly, optionally prefixed with a plus sign ( + ). Remove attributes by prefixing them or their attributes with the string no or a minus sign ( - ). The available attribute modifiers and their abbreviations are: Attribute modifier Abbreviation after a before b empty e encrypted none exact none executable x once o private p readonly r remove none template t The type of a target can be changed using a type modifier: Type modifier create modify script symlink The negative form of type modifiers, e.g. nocreate , changes the target to be a regular file if it is of that type, otherwise the type is left unchanged. Multiple modifications may be specified by separating them with a comma ( , ). If you use the - modifier form then you must put modifier after a -- to prevent chezmoi from interpreting - modifier as an option. Example $ chezmoi chattr template ~/.bashrc $ chezmoi chattr noempty ~/.profile $ chezmoi chattr private,template ~/.netrc $ chezmoi chattr -- -x ~/.zshrc $ chezmoi chattr +create,+private ~/.kube/config","title":"chattr modifier target..."},{"location":"reference/commands/completion/","text":"completion shell Generate shell completion code for the specified shell ( bash , fish , powershell , or zsh ). Example $ chezmoi completion bash $ chezmoi completion fish --output = ~/.config/fish/completions/chezmoi.fish","title":"completion"},{"location":"reference/commands/completion/#completion-shell","text":"Generate shell completion code for the specified shell ( bash , fish , powershell , or zsh ). Example $ chezmoi completion bash $ chezmoi completion fish --output = ~/.config/fish/completions/chezmoi.fish","title":"completion shell"},{"location":"reference/commands/data/","text":"data Write the computed template data to stdout. -f , --format json | yaml Set the output format. Example $ chezmoi data $ chezmoi data --format = yaml","title":"data"},{"location":"reference/commands/data/#data","text":"Write the computed template data to stdout.","title":"data"},{"location":"reference/commands/data/#-f-format-jsonyaml","text":"Set the output format. Example $ chezmoi data $ chezmoi data --format = yaml","title":"-f, --format json|yaml"},{"location":"reference/commands/decrypt/","text":"decrypt [ file ...] Decrypt file s using chezmoi's configured encryption. If no files are given, decrypt the standard input. The decrypted result is written to the standard output or a file if the --output flag is set.","title":"decrypt"},{"location":"reference/commands/decrypt/#decrypt-file","text":"Decrypt file s using chezmoi's configured encryption. If no files are given, decrypt the standard input. The decrypted result is written to the standard output or a file if the --output flag is set.","title":"decrypt [file...]"},{"location":"reference/commands/diff/","text":"diff [ target ...] Print the difference between the target state and the destination state for target s. If no targets are specified, print the differences for all targets. If a diff.pager command is set in the configuration file then the output will be piped into it. If diff.command is set then it will be invoked to show individual file differences with diff.args passed as arguments. Each element of diff.args is interpreted as a template with the variables .Destination and .Target available corresponding to the path of the file in the source and target state respectively. The default value of diff.args is [\"{{ .Destination }}\", \"{{ .Target }}\"] . If diff.args does not contain any template arguments then {{ .Destination }} and {{ .Target }} will be appended automatically. --reverse Reverse the direction of the diff, i.e. show the changes to the target required to match the destination. --pager pager Pager to use for output. --use-builtin-diff Use chezmoi's builtin diff, even if the diff.command configuration variable is set. Example $ chezmoi diff $ chezmoi diff ~/.bashrc","title":"diff"},{"location":"reference/commands/diff/#diff-target","text":"Print the difference between the target state and the destination state for target s. If no targets are specified, print the differences for all targets. If a diff.pager command is set in the configuration file then the output will be piped into it. If diff.command is set then it will be invoked to show individual file differences with diff.args passed as arguments. Each element of diff.args is interpreted as a template with the variables .Destination and .Target available corresponding to the path of the file in the source and target state respectively. The default value of diff.args is [\"{{ .Destination }}\", \"{{ .Target }}\"] . If diff.args does not contain any template arguments then {{ .Destination }} and {{ .Target }} will be appended automatically.","title":"diff [target...]"},{"location":"reference/commands/diff/#-reverse","text":"Reverse the direction of the diff, i.e. show the changes to the target required to match the destination.","title":"--reverse"},{"location":"reference/commands/diff/#-pager-pager","text":"Pager to use for output.","title":"--pager pager"},{"location":"reference/commands/diff/#-use-builtin-diff","text":"Use chezmoi's builtin diff, even if the diff.command configuration variable is set. Example $ chezmoi diff $ chezmoi diff ~/.bashrc","title":"--use-builtin-diff"},{"location":"reference/commands/doctor/","text":"doctor Check for potential problems. Example $ chezmoi doctor","title":"doctor"},{"location":"reference/commands/doctor/#doctor","text":"Check for potential problems. Example $ chezmoi doctor","title":"doctor"},{"location":"reference/commands/dump-config/","text":"dump-config Dump the configuration. Example $ chezmoi dump-config","title":"dump-config"},{"location":"reference/commands/dump-config/#dump-config","text":"Dump the configuration. Example $ chezmoi dump-config","title":"dump-config"},{"location":"reference/commands/dump/","text":"dump [ target ...] Dump the target state of target s. If no targets are specified, then the entire target state. -f , --format json | yaml Set the output format. -i , --include types Only include entries of type types . Example $ chezmoi dump ~/.bashrc $ chezmoi dump --format = yaml","title":"dump"},{"location":"reference/commands/dump/#dump-target","text":"Dump the target state of target s. If no targets are specified, then the entire target state.","title":"dump [target...]"},{"location":"reference/commands/dump/#-f-format-jsonyaml","text":"Set the output format.","title":"-f, --format json|yaml"},{"location":"reference/commands/dump/#-i-include-types","text":"Only include entries of type types . Example $ chezmoi dump ~/.bashrc $ chezmoi dump --format = yaml","title":"-i, --include types"},{"location":"reference/commands/edit-config/","text":"edit-config Edit the configuration file. Example $ chezmoi edit-config","title":"edit-config"},{"location":"reference/commands/edit-config/#edit-config","text":"Edit the configuration file. Example $ chezmoi edit-config","title":"edit-config"},{"location":"reference/commands/edit/","text":"edit [ target ...] Edit the source state of target s, which must be files or symlinks. If no targets are given then the working tree of the source directory is opened. Encrypted files are decrypted to a private temporary directory and the editor is invoked with the decrypted file. When the editor exits the edited decrypted file is re-encrypted and replaces the original file in the source state. If the operating system supports hard links, then the edit command invokes the editor with filenames which match the target filename, unless the edit.hardlink configuration variable is set to false the --hardlink=false command line flag is set. -a , --apply Apply target immediately after editing. Ignored if there are no targets. --hardlink bool Invoke the editor with a hard link to the source file with a name matching the target filename. This can help the editor determine the type of the file correctly. This is the default. --watch Automatically apply changes when files are saved. Warning --watch is a beta feature with limitations. Known limitations include: Only works when chezmoi edit is invoked with arguments (i.e. argument-free chezmoi edit is not supported). All edited files are applied when any file is saved. Only the edited files are watched, not any dependent files (e.g. .chezmoitemplates and include d files in templates are not watched). Only works on operating systems supported by fsnotify . Example $ chezmoi edit ~/.bashrc $ chezmoi edit ~/.bashrc --apply $ chezmoi edit","title":"edit"},{"location":"reference/commands/edit/#edit-target","text":"Edit the source state of target s, which must be files or symlinks. If no targets are given then the working tree of the source directory is opened. Encrypted files are decrypted to a private temporary directory and the editor is invoked with the decrypted file. When the editor exits the edited decrypted file is re-encrypted and replaces the original file in the source state. If the operating system supports hard links, then the edit command invokes the editor with filenames which match the target filename, unless the edit.hardlink configuration variable is set to false the --hardlink=false command line flag is set.","title":"edit [target...]"},{"location":"reference/commands/edit/#-a-apply","text":"Apply target immediately after editing. Ignored if there are no targets.","title":"-a, --apply"},{"location":"reference/commands/edit/#-hardlink-bool","text":"Invoke the editor with a hard link to the source file with a name matching the target filename. This can help the editor determine the type of the file correctly. This is the default.","title":"--hardlink bool"},{"location":"reference/commands/edit/#-watch","text":"Automatically apply changes when files are saved. Warning --watch is a beta feature with limitations. Known limitations include: Only works when chezmoi edit is invoked with arguments (i.e. argument-free chezmoi edit is not supported). All edited files are applied when any file is saved. Only the edited files are watched, not any dependent files (e.g. .chezmoitemplates and include d files in templates are not watched). Only works on operating systems supported by fsnotify . Example $ chezmoi edit ~/.bashrc $ chezmoi edit ~/.bashrc --apply $ chezmoi edit","title":"--watch"},{"location":"reference/commands/encrypt/","text":"encrypt [ file ...] Encrypt file s using chezmoi's configured encryption. If no files are given, encrypt the standard input. The encrypted result is written to the standard output or a file if the --output flag is set.","title":"encrypt"},{"location":"reference/commands/encrypt/#encrypt-file","text":"Encrypt file s using chezmoi's configured encryption. If no files are given, encrypt the standard input. The encrypted result is written to the standard output or a file if the --output flag is set.","title":"encrypt [file...]"},{"location":"reference/commands/execute-template/","text":"execute-template [ template ...] Execute template s. This is useful for testing templates or for calling chezmoi from other scripts. templates are interpreted as literal templates, with no whitespace added to the output between arguments. If no templates are specified, the template is read from stdin. --init , -i Include simulated functions only available during chezmoi init . --left-delimiter delimiter Set the left template delimiter. --promptBool pairs Simulate the promptBool template function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptBool is called with a prompt that does not match any of pairs , then it returns false. --promptInt pairs Simulate the promptInt template function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptInt is called with a prompt that does not match any of pairs , then it returns zero. --promptString , -p pairs Simulate the promptString template function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptString is called with a prompt that does not match any of pairs , then it returns prompt unchanged. --right-delimiter delimiter Set the right template delimiter. --stdinisatty bool Simulate the stdinIsATTY function by returning bool . Example $ chezmoi execute-template '{{ .chezmoi.sourceDir }}' $ chezmoi execute-template '{{ .chezmoi.os }}' / '{{ .chezmoi.arch }}' $ echo '{{ .chezmoi | toJson }}' | chezmoi execute-template $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl","title":"execute-template"},{"location":"reference/commands/execute-template/#execute-template-template","text":"Execute template s. This is useful for testing templates or for calling chezmoi from other scripts. templates are interpreted as literal templates, with no whitespace added to the output between arguments. If no templates are specified, the template is read from stdin.","title":"execute-template [template...]"},{"location":"reference/commands/execute-template/#-init-i","text":"Include simulated functions only available during chezmoi init .","title":"--init, -i"},{"location":"reference/commands/execute-template/#-left-delimiter-delimiter","text":"Set the left template delimiter.","title":"--left-delimiter delimiter"},{"location":"reference/commands/execute-template/#-promptbool-pairs","text":"Simulate the promptBool template function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptBool is called with a prompt that does not match any of pairs , then it returns false.","title":"--promptBool pairs"},{"location":"reference/commands/execute-template/#-promptint-pairs","text":"Simulate the promptInt template function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptInt is called with a prompt that does not match any of pairs , then it returns zero.","title":"--promptInt pairs"},{"location":"reference/commands/execute-template/#-promptstring-p-pairs","text":"Simulate the promptString template function with a function that returns values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptString is called with a prompt that does not match any of pairs , then it returns prompt unchanged.","title":"--promptString, -p pairs"},{"location":"reference/commands/execute-template/#-right-delimiter-delimiter","text":"Set the right template delimiter.","title":"--right-delimiter delimiter"},{"location":"reference/commands/execute-template/#-stdinisatty-bool","text":"Simulate the stdinIsATTY function by returning bool . Example $ chezmoi execute-template '{{ .chezmoi.sourceDir }}' $ chezmoi execute-template '{{ .chezmoi.os }}' / '{{ .chezmoi.arch }}' $ echo '{{ .chezmoi | toJson }}' | chezmoi execute-template $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl","title":"--stdinisatty bool"},{"location":"reference/commands/forget/","text":"forget target ... Remove target s from the source state, i.e. stop managing them. target s must have entries in the source state. They cannot be externals. Example $ chezmoi forget ~/.bashrc","title":"forget"},{"location":"reference/commands/forget/#forget-target","text":"Remove target s from the source state, i.e. stop managing them. target s must have entries in the source state. They cannot be externals. Example $ chezmoi forget ~/.bashrc","title":"forget target..."},{"location":"reference/commands/generate/","text":"generate file Generates file for use with chezmoi. The currently supported file s are: File Description install.sh An install script, suitable for use with Github Codespaces Example $ chezmoi generate install.sh > install.sh","title":"generate"},{"location":"reference/commands/generate/#generate-file","text":"Generates file for use with chezmoi. The currently supported file s are: File Description install.sh An install script, suitable for use with Github Codespaces Example $ chezmoi generate install.sh > install.sh","title":"generate file"},{"location":"reference/commands/git/","text":"git [ arg ...] Run git args in the working tree (typically the source directory). Note Flags in args must occur after -- to prevent chezmoi from interpreting them. Example $ chezmoi git add . $ chezmoi git add dot_gitconfig $ chezmoi git -- commit -m \"Add .gitconfig\"","title":"git"},{"location":"reference/commands/git/#git-arg","text":"Run git args in the working tree (typically the source directory). Note Flags in args must occur after -- to prevent chezmoi from interpreting them. Example $ chezmoi git add . $ chezmoi git add dot_gitconfig $ chezmoi git -- commit -m \"Add .gitconfig\"","title":"git [arg...]"},{"location":"reference/commands/help/","text":"help [ command ...] Print the help associated with command , or general help if no command is given.","title":"help"},{"location":"reference/commands/help/#help-command","text":"Print the help associated with command , or general help if no command is given.","title":"help [command...]"},{"location":"reference/commands/ignored/","text":"ignored Print the list of entries ignored by chezmoi. Example $ chezmoi ignored","title":"ignored"},{"location":"reference/commands/ignored/#ignored","text":"Print the list of entries ignored by chezmoi. Example $ chezmoi ignored","title":"ignored"},{"location":"reference/commands/import/","text":"import filename Import the source state from an archive file in to a directory in the source state. This is primarily used to make subdirectories of your home directory exactly match the contents of a downloaded archive. You will generally always want to set the --destination , --exact , and --remove-destination flags. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip . --destination directory Set the destination (in the source state) where the archive will be imported. --exact Set the exact attribute on all imported directories. -r , --remove-destination Remove destination (in the source state) before importing. --strip-components n Strip n leading components from paths. Example $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz","title":"import"},{"location":"reference/commands/import/#import-filename","text":"Import the source state from an archive file in to a directory in the source state. This is primarily used to make subdirectories of your home directory exactly match the contents of a downloaded archive. You will generally always want to set the --destination , --exact , and --remove-destination flags. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip .","title":"import filename"},{"location":"reference/commands/import/#-destination-directory","text":"Set the destination (in the source state) where the archive will be imported.","title":"--destination directory"},{"location":"reference/commands/import/#-exact","text":"Set the exact attribute on all imported directories.","title":"--exact"},{"location":"reference/commands/import/#-r-remove-destination","text":"Remove destination (in the source state) before importing.","title":"-r, --remove-destination"},{"location":"reference/commands/import/#-strip-components-n","text":"Strip n leading components from paths. Example $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz","title":"--strip-components n"},{"location":"reference/commands/init/","text":"init [ repo ] Setup the source directory, generate the config file, and optionally update the destination directory to match the target state. By default, if repo is given, chezmoi will guess the full git repo URL, using HTTPS by default, or SSH if the --ssh option is specified, according to the following patterns: Pattern HTTPS Repo SSH repo user https://user@github.com/user/dotfiles.git git@github.com:user/dotfiles.git user/repo https://user@github.com/user/repo.git git@github.com:user/repo.git site/user/repo https://user@site/user/repo.git git@site:user/repo.git sr.ht/~user https://user@git.sr.ht/~user/dotfiles git@git.sr.ht:~user/dotfiles.git sr.ht/~user/repo https://user@git.sr.ht/~user/repo git@git.sr.ht:~user/repo.git To disable git repo URL guessing pass the --guess-repo-url=false option. First, if the source directory is not already contain a repository, then if repo is given it is checked out into the source directory, otherwise a new repository is initialized in the source directory. Second, if a file called .chezmoi.$FORMAT.tmpl exists, where $FORMAT is one of the supported file formats (e.g. json , toml , or yaml ) then a new configuration file is created using that file as a template. Then, if the --apply flag is passed, chezmoi apply is run. Then, if the --purge flag is passed, chezmoi will remove its source, config, and cache directories. Finally, if the --purge-binary is passed, chezmoi will attempt to remove its own binary. --apply Run chezmoi apply after checking out the repo and creating the config file. --branch branch Check out branch instead of the default branch. --config-path path Write the generated config file to path instead of the default location. --data bool Include existing template data when creating the config file. This defaults to true . Set this to false to simulate creating the config file with no existing template data. --depth depth Clone the repo with depth depth . --prompt Force the prompt*Once template functions to prompt. --promptBool pairs Populate the promptBool template function with values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptBool is called with a prompt that does not match any of pairs , then it prompts the user for a value. --promptInt pairs Populate the promptInt template function with values from pairs . pairs is a comma-separated list of prompt = value pairs. If prompInt is called with a prompt that does not match any of pairs , then it prompts the user for a value. --promptString pairs Populate the promptString template function with values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptString is called with a prompt that does not match any of pairs , then it prompts the user for a value. --guess-repo-url bool Guess the repo URL from the repo argument. This defaults to true . --one-shot --one-shot is the equivalent of --apply , --depth=1 , --force , --purge , and --purge-binary . It attempts to install your dotfiles with chezmoi and then remove all traces of chezmoi from the system. This is useful for setting up temporary environments (e.g. Docker containers). --purge Remove the source and config directories after applying. --purge-binary Attempt to remove the chezmoi binary after applying. --recurse-submodules bool Recursively clone submodules. This defaults to true . --ssh Guess an SSH repo URL instead of an HTTPS repo. Example $ chezmoi init user $ chezmoi init user --apply $ chezmoi init user --apply --purge $ chezmoi init user/dots $ chezmoi init codeberg.org/user $ chezmoi init gitlab.com/user","title":"init"},{"location":"reference/commands/init/#init-repo","text":"Setup the source directory, generate the config file, and optionally update the destination directory to match the target state. By default, if repo is given, chezmoi will guess the full git repo URL, using HTTPS by default, or SSH if the --ssh option is specified, according to the following patterns: Pattern HTTPS Repo SSH repo user https://user@github.com/user/dotfiles.git git@github.com:user/dotfiles.git user/repo https://user@github.com/user/repo.git git@github.com:user/repo.git site/user/repo https://user@site/user/repo.git git@site:user/repo.git sr.ht/~user https://user@git.sr.ht/~user/dotfiles git@git.sr.ht:~user/dotfiles.git sr.ht/~user/repo https://user@git.sr.ht/~user/repo git@git.sr.ht:~user/repo.git To disable git repo URL guessing pass the --guess-repo-url=false option. First, if the source directory is not already contain a repository, then if repo is given it is checked out into the source directory, otherwise a new repository is initialized in the source directory. Second, if a file called .chezmoi.$FORMAT.tmpl exists, where $FORMAT is one of the supported file formats (e.g. json , toml , or yaml ) then a new configuration file is created using that file as a template. Then, if the --apply flag is passed, chezmoi apply is run. Then, if the --purge flag is passed, chezmoi will remove its source, config, and cache directories. Finally, if the --purge-binary is passed, chezmoi will attempt to remove its own binary.","title":"init [repo]"},{"location":"reference/commands/init/#-apply","text":"Run chezmoi apply after checking out the repo and creating the config file.","title":"--apply"},{"location":"reference/commands/init/#-branch-branch","text":"Check out branch instead of the default branch.","title":"--branch branch"},{"location":"reference/commands/init/#-config-path-path","text":"Write the generated config file to path instead of the default location.","title":"--config-path path"},{"location":"reference/commands/init/#-data-bool","text":"Include existing template data when creating the config file. This defaults to true . Set this to false to simulate creating the config file with no existing template data.","title":"--data bool"},{"location":"reference/commands/init/#-depth-depth","text":"Clone the repo with depth depth .","title":"--depth depth"},{"location":"reference/commands/init/#-prompt","text":"Force the prompt*Once template functions to prompt.","title":"--prompt"},{"location":"reference/commands/init/#-promptbool-pairs","text":"Populate the promptBool template function with values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptBool is called with a prompt that does not match any of pairs , then it prompts the user for a value.","title":"--promptBool pairs"},{"location":"reference/commands/init/#-promptint-pairs","text":"Populate the promptInt template function with values from pairs . pairs is a comma-separated list of prompt = value pairs. If prompInt is called with a prompt that does not match any of pairs , then it prompts the user for a value.","title":"--promptInt pairs"},{"location":"reference/commands/init/#-promptstring-pairs","text":"Populate the promptString template function with values from pairs . pairs is a comma-separated list of prompt = value pairs. If promptString is called with a prompt that does not match any of pairs , then it prompts the user for a value.","title":"--promptString pairs"},{"location":"reference/commands/init/#-guess-repo-url-bool","text":"Guess the repo URL from the repo argument. This defaults to true .","title":"--guess-repo-url bool"},{"location":"reference/commands/init/#-one-shot","text":"--one-shot is the equivalent of --apply , --depth=1 , --force , --purge , and --purge-binary . It attempts to install your dotfiles with chezmoi and then remove all traces of chezmoi from the system. This is useful for setting up temporary environments (e.g. Docker containers).","title":"--one-shot"},{"location":"reference/commands/init/#-purge","text":"Remove the source and config directories after applying.","title":"--purge"},{"location":"reference/commands/init/#-purge-binary","text":"Attempt to remove the chezmoi binary after applying.","title":"--purge-binary"},{"location":"reference/commands/init/#-recurse-submodules-bool","text":"Recursively clone submodules. This defaults to true .","title":"--recurse-submodules bool"},{"location":"reference/commands/init/#-ssh","text":"Guess an SSH repo URL instead of an HTTPS repo. Example $ chezmoi init user $ chezmoi init user --apply $ chezmoi init user --apply --purge $ chezmoi init user/dots $ chezmoi init codeberg.org/user $ chezmoi init gitlab.com/user","title":"--ssh"},{"location":"reference/commands/license/","text":"license Print chezmoi's license. Example $ chezmoi license","title":"license"},{"location":"reference/commands/license/#license","text":"Print chezmoi's license. Example $ chezmoi license","title":"license"},{"location":"reference/commands/list/","text":"list list is an alias for managed .","title":"list"},{"location":"reference/commands/list/#list","text":"list is an alias for managed .","title":"list"},{"location":"reference/commands/manage/","text":"manage target ... manage is an alias for add for symmetry with unmanage .","title":"manage"},{"location":"reference/commands/manage/#manage-target","text":"manage is an alias for add for symmetry with unmanage .","title":"manage target..."},{"location":"reference/commands/managed/","text":"managed [ path ...] List all managed entries in the destination directory under all path s in alphabetical order. When no path s are supplied, list all managed entries in the destination directory in alphabetical order. -p , --path-style absolute | relative | source-absolute | source-relative Print paths in the given style. Relative paths are relative to the destination directory. The default is relative . Example $ chezmoi managed $ chezmoi managed --include = files $ chezmoi managed --include = files,symlinks $ chezmoi managed -i dirs $ chezmoi managed -i dirs,files $ chezmoi managed -i files ~/.config $ chezmoi managed --exclude = encrypted --path-style = source-relative","title":"managed"},{"location":"reference/commands/managed/#managed-path","text":"List all managed entries in the destination directory under all path s in alphabetical order. When no path s are supplied, list all managed entries in the destination directory in alphabetical order.","title":"managed [path...]"},{"location":"reference/commands/managed/#-p-path-style-absoluterelativesource-absolutesource-relative","text":"Print paths in the given style. Relative paths are relative to the destination directory. The default is relative . Example $ chezmoi managed $ chezmoi managed --include = files $ chezmoi managed --include = files,symlinks $ chezmoi managed -i dirs $ chezmoi managed -i dirs,files $ chezmoi managed -i files ~/.config $ chezmoi managed --exclude = encrypted --path-style = source-relative","title":"-p, --path-style absolute|relative|source-absolute|source-relative"},{"location":"reference/commands/merge-all/","text":"merge-all Perform a three-way merge for file whose actual state does not match its target state. The merge is performed with chezmoi merge . Example $ chezmoi merge-all","title":"merge-all"},{"location":"reference/commands/merge-all/#merge-all","text":"Perform a three-way merge for file whose actual state does not match its target state. The merge is performed with chezmoi merge . Example $ chezmoi merge-all","title":"merge-all"},{"location":"reference/commands/merge/","text":"merge target ... Perform a three-way merge between the destination state, the target state, and the source state for each target . The merge tool is defined by the merge.command configuration variable, and defaults to vimdiff . If multiple targets are specified the merge tool is invoked separately and sequentially for each target. If the target state cannot be computed (for example if source is a template containing errors or an encrypted file that cannot be decrypted) a two-way merge is performed instead. The order of arguments to merge.command is set by merge.args . Each argument is interpreted as a template with the variables .Destination , .Source , and .Target available corresponding to the path of the file in the destination state, the source state, and the target state respectively. The default value of merge.args is [\"{{ .Destination }}\", \"{{ .Source }}\", \"{{ .Target }}\"] . If merge.args does not contain any template arguments then {{ .Destination }} , {{ .Source }} , and {{ .Target }} will be appended automatically. Example $ chezmoi merge ~/.bashrc","title":"merge"},{"location":"reference/commands/merge/#merge-target","text":"Perform a three-way merge between the destination state, the target state, and the source state for each target . The merge tool is defined by the merge.command configuration variable, and defaults to vimdiff . If multiple targets are specified the merge tool is invoked separately and sequentially for each target. If the target state cannot be computed (for example if source is a template containing errors or an encrypted file that cannot be decrypted) a two-way merge is performed instead. The order of arguments to merge.command is set by merge.args . Each argument is interpreted as a template with the variables .Destination , .Source , and .Target available corresponding to the path of the file in the destination state, the source state, and the target state respectively. The default value of merge.args is [\"{{ .Destination }}\", \"{{ .Source }}\", \"{{ .Target }}\"] . If merge.args does not contain any template arguments then {{ .Destination }} , {{ .Source }} , and {{ .Target }} will be appended automatically. Example $ chezmoi merge ~/.bashrc","title":"merge target..."},{"location":"reference/commands/purge/","text":"purge Remove chezmoi's configuration, state, and source directory, but leave the target state intact. -f , --force Remove without prompting. Example $ chezmoi purge $ chezmoi purge --force","title":"purge"},{"location":"reference/commands/purge/#purge","text":"Remove chezmoi's configuration, state, and source directory, but leave the target state intact.","title":"purge"},{"location":"reference/commands/purge/#-f-force","text":"Remove without prompting. Example $ chezmoi purge $ chezmoi purge --force","title":"-f, --force"},{"location":"reference/commands/re-add/","text":"re-add Re-add all modified files in the target state. chezmoi will not overwrite templates, and all entries that are not files are ignored. Hint If you want to re-add a single file uncondtionally, use chezmoi add --force instead. Example $ chezmoi re-add","title":"re-add"},{"location":"reference/commands/re-add/#re-add","text":"Re-add all modified files in the target state. chezmoi will not overwrite templates, and all entries that are not files are ignored. Hint If you want to re-add a single file uncondtionally, use chezmoi add --force instead. Example $ chezmoi re-add","title":"re-add"},{"location":"reference/commands/remove/","text":"remove target ... Remove target s from both the source state and the destination directory. -f , --force Remove without prompting.","title":"remove"},{"location":"reference/commands/remove/#remove-target","text":"Remove target s from both the source state and the destination directory.","title":"remove target..."},{"location":"reference/commands/remove/#-f-force","text":"Remove without prompting.","title":"-f, --force"},{"location":"reference/commands/rm/","text":"rm target ... rm is an alias for remove .","title":"rm"},{"location":"reference/commands/rm/#rm-target","text":"rm is an alias for remove .","title":"rm target..."},{"location":"reference/commands/secret/","text":"secret Run a secret manager's CLI, passing any extra arguments to the secret manager's CLI. This is primarily for verifying chezmoi's integration with a custom secret manager. Normally you would use chezmoi's existing template functions to retrieve secrets. Note If you need to pass flags to the secret manager's CLI you must separate them with -- to prevent chezmoi from interpreting them. Hint To get a full list of subcommands run: $ chezmoi secret help Example $ chezmoi secret keyring set --service = service --user = user --value = password $ chezmoi secret keyring get --service = service --user = user $ chezmoi secret keyring delete --service = service --user = user Warning On FreeBSD, the secret keyring command is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and secret keyring command is not available.","title":"secret"},{"location":"reference/commands/secret/#secret","text":"Run a secret manager's CLI, passing any extra arguments to the secret manager's CLI. This is primarily for verifying chezmoi's integration with a custom secret manager. Normally you would use chezmoi's existing template functions to retrieve secrets. Note If you need to pass flags to the secret manager's CLI you must separate them with -- to prevent chezmoi from interpreting them. Hint To get a full list of subcommands run: $ chezmoi secret help Example $ chezmoi secret keyring set --service = service --user = user --value = password $ chezmoi secret keyring get --service = service --user = user $ chezmoi secret keyring delete --service = service --user = user Warning On FreeBSD, the secret keyring command is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and secret keyring command is not available.","title":"secret"},{"location":"reference/commands/source-path/","text":"source-path [ target ...] Print the path to each target's source state. If no targets are specified then print the source directory. Example $ chezmoi source-path $ chezmoi source-path ~/.bashrc","title":"source-path"},{"location":"reference/commands/source-path/#source-path-target","text":"Print the path to each target's source state. If no targets are specified then print the source directory. Example $ chezmoi source-path $ chezmoi source-path ~/.bashrc","title":"source-path [target...]"},{"location":"reference/commands/state/","text":"state Manipulate the persistent state. Hint To get a full list of subcommands run: $ chezmoi state help Example $ chezmoi state data $ chezmoi state delete --bucket = bucket --key = key $ chezmoi state delete-bucket --bucket = bucket $ chezmoi state dump $ chezmoi state get --bucket = bucket --key = key $ chezmoi state get-bucket --bucket = bucket $ chezmoi state set --bucket = bucket --key = key --value = value $ chezmoi state reset","title":"state"},{"location":"reference/commands/state/#state","text":"Manipulate the persistent state. Hint To get a full list of subcommands run: $ chezmoi state help Example $ chezmoi state data $ chezmoi state delete --bucket = bucket --key = key $ chezmoi state delete-bucket --bucket = bucket $ chezmoi state dump $ chezmoi state get --bucket = bucket --key = key $ chezmoi state get-bucket --bucket = bucket $ chezmoi state set --bucket = bucket --key = key --value = value $ chezmoi state reset","title":"state"},{"location":"reference/commands/status/","text":"status Print the status of the files and scripts managed by chezmoi in a format similar to git status . The first column of output indicates the difference between the last state written by chezmoi and the actual state. The second column indicates the difference between the actual state and the target state. -i , --include types Only include entries of type types . Example $ chezmoi status","title":"status"},{"location":"reference/commands/status/#status","text":"Print the status of the files and scripts managed by chezmoi in a format similar to git status . The first column of output indicates the difference between the last state written by chezmoi and the actual state. The second column indicates the difference between the actual state and the target state.","title":"status"},{"location":"reference/commands/status/#-i-include-types","text":"Only include entries of type types . Example $ chezmoi status","title":"-i, --include types"},{"location":"reference/commands/target-path/","text":"target-path [ source-path ...] Print the target path of each source path. If no source paths are specified then print the target directory. Example $ chezmoi target-path $ chezmoi target-path ~/.local/share/chezmoi/dot_zshrc","title":"target-path"},{"location":"reference/commands/target-path/#target-path-source-path","text":"Print the target path of each source path. If no source paths are specified then print the target directory. Example $ chezmoi target-path $ chezmoi target-path ~/.local/share/chezmoi/dot_zshrc","title":"target-path [source-path...]"},{"location":"reference/commands/unmanage/","text":"unmanage target ... unmanage is an alias for forget for symmetry with manage .","title":"unmanage"},{"location":"reference/commands/unmanage/#unmanage-target","text":"unmanage is an alias for forget for symmetry with manage .","title":"unmanage target..."},{"location":"reference/commands/unmanaged/","text":"unmanaged [ path ...] List all unmanaged files in path s. When no path s are supplied, list all unmanaged files in the destination directory. It is an error to supply path s that are not found on the filesystem. -p , --path-style absolute | relative Print paths in the given style. Relative paths are relative to the destination directory. The default is relative . Example $ chezmoi unmanaged $ chezmoi unmanaged ~/.config/chezmoi ~/.ssh","title":"unmanaged"},{"location":"reference/commands/unmanaged/#unmanaged-path","text":"List all unmanaged files in path s. When no path s are supplied, list all unmanaged files in the destination directory. It is an error to supply path s that are not found on the filesystem.","title":"unmanaged [path...]"},{"location":"reference/commands/unmanaged/#-p-path-style-absoluterelative","text":"Print paths in the given style. Relative paths are relative to the destination directory. The default is relative . Example $ chezmoi unmanaged $ chezmoi unmanaged ~/.config/chezmoi ~/.ssh","title":"-p, --path-style absolute|relative"},{"location":"reference/commands/update/","text":"update Pull changes from the source repo and apply any changes. If update.command is set then chezmoi will run update.command with update.args in the working tree. Otherwise, chezmoi will run git pull --autostash --rebase [--recurse-submodules] , using chezmoi's builtin git if useBuiltinGit is true or if git.command cannot be found in $PATH . -i , --include types Only update entries of type types . --recurse-submodules bool Update submodules recursively. This defaults to true . Example $ chezmoi update","title":"update"},{"location":"reference/commands/update/#update","text":"Pull changes from the source repo and apply any changes. If update.command is set then chezmoi will run update.command with update.args in the working tree. Otherwise, chezmoi will run git pull --autostash --rebase [--recurse-submodules] , using chezmoi's builtin git if useBuiltinGit is true or if git.command cannot be found in $PATH .","title":"update"},{"location":"reference/commands/update/#-i-include-types","text":"Only update entries of type types .","title":"-i, --include types"},{"location":"reference/commands/update/#-recurse-submodules-bool","text":"Update submodules recursively. This defaults to true . Example $ chezmoi update","title":"--recurse-submodules bool"},{"location":"reference/commands/upgrade/","text":"upgrade Upgrade chezmoi by downloading and installing the latest released version. This will call the GitHub API to determine if there is a new version of chezmoi available, and if so, download and attempt to install it in the same way as chezmoi was previously installed. If the any of the $CHEZMOI_GITHUB_ACCESS_TOKEN , $CHEZMOI_GITHUB_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN environment variables are set, then the first value found will be used to authenticate requests to the GitHub API, otherwise unauthenticated requests are used which are subject to stricter rate limiting . Unauthenticated requests should be sufficient for most cases. Warning If you installed chezmoi using a package manager, the upgrade command might have been removed by the package maintainer.","title":"upgrade"},{"location":"reference/commands/upgrade/#upgrade","text":"Upgrade chezmoi by downloading and installing the latest released version. This will call the GitHub API to determine if there is a new version of chezmoi available, and if so, download and attempt to install it in the same way as chezmoi was previously installed. If the any of the $CHEZMOI_GITHUB_ACCESS_TOKEN , $CHEZMOI_GITHUB_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN environment variables are set, then the first value found will be used to authenticate requests to the GitHub API, otherwise unauthenticated requests are used which are subject to stricter rate limiting . Unauthenticated requests should be sufficient for most cases. Warning If you installed chezmoi using a package manager, the upgrade command might have been removed by the package maintainer.","title":"upgrade"},{"location":"reference/commands/verify/","text":"verify [ target ...] Verify that all target s match their target state. chezmoi exits with code 0 (success) if all targets match their target state, or 1 (failure) otherwise. If no targets are specified then all targets are checked. -i , --include types Only include entries of type types . Example $ chezmoi verify $ chezmoi verify ~/.bashrc","title":"verify"},{"location":"reference/commands/verify/#verify-target","text":"Verify that all target s match their target state. chezmoi exits with code 0 (success) if all targets match their target state, or 1 (failure) otherwise. If no targets are specified then all targets are checked.","title":"verify [target...]"},{"location":"reference/commands/verify/#-i-include-types","text":"Only include entries of type types . Example $ chezmoi verify $ chezmoi verify ~/.bashrc","title":"-i, --include types"},{"location":"reference/configuration-file/","text":"Configuration file chezmoi searches for its configuration file according to the XDG Base Directory Specification and supports JSON , TOML , and YAML . The basename of the config file is chezmoi , and the first config file found is used. In most installations, the config file will be read from ~/.config/chezmoi/chezmoi.$FORMAT , where $FORMAT is one of json , toml , or yaml . The config file can be set explicitly with the --config command line option. By default, the format is detected based on the extension of the config file name, but can be overridden with the --config-format command line option. Examples JSON TOML YAML ~/.config/chezmoi/chezmoi.json { \"sourceDir\" : \"/home/user/.dotfiles\" , \"git\" : { \"autoPush\" : true } } ~/.config/chezmoi/chezmoi.toml sourceDir = \"/home/user/.dotfiles\" [git] autoPush = true ~/.config/chezmoi/chezmoi.yaml sourceDir : /home/user/.dotfiles git : autoPush : true","title":"Configuration file"},{"location":"reference/configuration-file/#configuration-file","text":"chezmoi searches for its configuration file according to the XDG Base Directory Specification and supports JSON , TOML , and YAML . The basename of the config file is chezmoi , and the first config file found is used. In most installations, the config file will be read from ~/.config/chezmoi/chezmoi.$FORMAT , where $FORMAT is one of json , toml , or yaml . The config file can be set explicitly with the --config command line option. By default, the format is detected based on the extension of the config file name, but can be overridden with the --config-format command line option.","title":"Configuration file"},{"location":"reference/configuration-file/#examples","text":"JSON TOML YAML ~/.config/chezmoi/chezmoi.json { \"sourceDir\" : \"/home/user/.dotfiles\" , \"git\" : { \"autoPush\" : true } } ~/.config/chezmoi/chezmoi.toml sourceDir = \"/home/user/.dotfiles\" [git] autoPush = true ~/.config/chezmoi/chezmoi.yaml sourceDir : /home/user/.dotfiles git : autoPush : true","title":"Examples"},{"location":"reference/configuration-file/editor/","text":"Editor The editor used is the first non-empty string of the edit.command configuration variable, the $VISUAL environment variable, the $EDITOR environment variable. If none are set then chezmoi falls back to notepad.exe on Windows systems and vi on non-Windows systems. When the edit.command configuration variable is used, extra arguments can be passed to the editor with the editor.args configuration variable. chezmoi will emit a warning if the editor returns in less than edit.minDuration (default 1s ). To disable this warning, set edit.minDuration to 0 .","title":"Editor"},{"location":"reference/configuration-file/editor/#editor","text":"The editor used is the first non-empty string of the edit.command configuration variable, the $VISUAL environment variable, the $EDITOR environment variable. If none are set then chezmoi falls back to notepad.exe on Windows systems and vi on non-Windows systems. When the edit.command configuration variable is used, extra arguments can be passed to the editor with the editor.args configuration variable. chezmoi will emit a warning if the editor returns in less than edit.minDuration (default 1s ). To disable this warning, set edit.minDuration to 0 .","title":"Editor"},{"location":"reference/configuration-file/pinentry/","text":"pinentry By default, chezmoi will request passwords from the terminal. If the --no-tty option is passed, then chezmoi will instead read passwords from the standard input. Otherwise, if the configuration variable pinentry.command is set then chezmoi will instead used the given command to read passwords, assuming that it follows the Assuan protocol like GnuPG's pinentry . The configuration variable pinentry.args specifies extra arguments to be passed to pinentry.command and the configuration variable pinentry.options specifies extra options to be set. The default pinentry.options is [\"allow-external-password-cache\"] . Example ~/.config/chezmoi/chezmoi.toml [pinentry] command = \"pinentry\"","title":"pinentry"},{"location":"reference/configuration-file/pinentry/#pinentry","text":"By default, chezmoi will request passwords from the terminal. If the --no-tty option is passed, then chezmoi will instead read passwords from the standard input. Otherwise, if the configuration variable pinentry.command is set then chezmoi will instead used the given command to read passwords, assuming that it follows the Assuan protocol like GnuPG's pinentry . The configuration variable pinentry.args specifies extra arguments to be passed to pinentry.command and the configuration variable pinentry.options specifies extra options to be set. The default pinentry.options is [\"allow-external-password-cache\"] . Example ~/.config/chezmoi/chezmoi.toml [pinentry] command = \"pinentry\"","title":"pinentry"},{"location":"reference/configuration-file/textconv/","text":"textconv A section called textconv in the configuration file controls how file contents are modified before being passed to diff. The textconv must contain an array of objects where each object has the following properties: Name Type Description pattern string Target path pattern to match command string Command to transform contents args []string Extra arguments to command Files whose target path matches pattern are transformed by passing them to the standard input of command with args , and new contents are read from the command's standard output. If a target path does not match any patterns then the file contents are passed unchanged to diff. If a target path matches multiple patterns then element with the longest pattern is used.","title":"textconv"},{"location":"reference/configuration-file/textconv/#textconv","text":"A section called textconv in the configuration file controls how file contents are modified before being passed to diff. The textconv must contain an array of objects where each object has the following properties: Name Type Description pattern string Target path pattern to match command string Command to transform contents args []string Extra arguments to command Files whose target path matches pattern are transformed by passing them to the standard input of command with args , and new contents are read from the command's standard output. If a target path does not match any patterns then the file contents are passed unchanged to diff. If a target path matches multiple patterns then element with the longest pattern is used.","title":"textconv"},{"location":"reference/configuration-file/umask/","text":"umask By default, chezmoi uses your current umask as set by your operating system and shell. chezmoi only stores crude permissions in its source state, namely in the executable and private attributes, corresponding to the umasks of 0o111 and 0o077 respectively. For machine-specific control of umask, set the umask configuration variable in chezmoi's configuration file. Example ~/.config/chezmoi/chezmoi.toml umask = 0 o22","title":"umask"},{"location":"reference/configuration-file/umask/#umask","text":"By default, chezmoi uses your current umask as set by your operating system and shell. chezmoi only stores crude permissions in its source state, namely in the executable and private attributes, corresponding to the umasks of 0o111 and 0o077 respectively. For machine-specific control of umask, set the umask configuration variable in chezmoi's configuration file. Example ~/.config/chezmoi/chezmoi.toml umask = 0 o22","title":"umask"},{"location":"reference/configuration-file/variables/","text":"Variables The following configuration variables are available: Section Variable Type Default value Description Top level color string auto Colorize output data any none Template data destDir string ~ Destination directory encryption string none Encryption type, either age or gpg format string json Format for data output, either json or yaml mode string file Mode in target dir, either file or symlink pager string $PAGER Default pager CLI command progress bool false Display progress bars scriptEnv object none Extra environment variables for scripts scriptTempDir string none Temporary directory for scripts sourceDir string ~/.local/share/chezmoi Source directory umask int from system Umask useBuiltinAge string auto Use builtin age if age command is not found in $PATH useBuiltinGit string auto Use builtin git if git command is not found in $PATH verbose bool false Make output more verbose workingTree string source directory git working tree directory add templateSymlinks bool false Template symlinks to source and home dirs age args []string none Extra args to age CLI command command string age age CLI command identities []string none age identity files identity string none age identity file passphrase bool false Use age passphrase instead of identity recipient string none age recipient recipientFile string none age recipient file recipientFiles []string none age recipient files recipients []string none age recipients suffix string .age Suffix appended to age-encrypted files symmetric bool false Use age symmetric encryption awsSecretsManager profile string none AWS shared profile name region string none AWS region bitwarden command string bw Bitwarden CLI command cd args []string none Extra args to shell in cd command command string none Shell to run in cd command completion custom bool false Enable custom shell completions diff args []string see diff below Extra args to external diff command command string none External diff command exclude []string none Entry types to exclude from diffs pager string none Diff-specific pager reverse bool false Reverse order of arguments to diff scriptContents bool true Show script contents edit apply bool false Apply changes on exit args []string none Extra args to edit command command string $EDITOR / $VISUAL Edit command hardlink bool true Invoke editor with a hardlink to the source file minDuration duration 1s Minimum duration for edit command watch bool false Automatically apply changes when files are saved git autoAdd bool false Add changes to the source state after any change autoCommit bool false Commit changes to the source state after any change autoPush bool false Push changes to the source state after any change command string git git CLI command gopass command string gopass gopass CLI command gpg args []string none Extra args to GPG CLI command command string gpg GPG CLI command recipient string none GPG recipient recipients []string none GPG recipients suffix string .asc Suffix appended to GPG-encrypted files symmetric bool false Use symmetric GPG encryption interpreters extension . args []string none See section on \"Scripts on Windows\" extension . command string special See section on \"Scripts on Windows\" keepassxc args []string none Extra args to KeePassXC CLI command command string keepassxc-cli KeePassXC CLI command database string none KeePassXC database prompt bool true Prompt for password keeper args []string none Extra args to Keeper CLI command command string keeper Keeper CLI command lastpass command string lpass LastPass CLI command merge args []string see merge below Extra args to three-way merge CLI command command string none Three-way merge CLI command onepassword cache bool true Enable optional caching provided by op command string op 1Password CLI command prompt bool true Prompt for sign-in when no valid session is available pass command string pass Pass CLI command passhole args []string none Extra args to Passhole CLI command command string ph Passhole CLI command prompt bool true Prompt for password pinentry args []string none Extra args to pinentry CLI command command string none pinentry CLI command options []string see pinentry below Extra options for pinentry secret args []string none Extra args to secret CLI command command string none Generic secret CLI command status exclude []string none Entry types to exclude from status template options []string [\"missingkey=error\"] Template options textconv []object none See section on \"textconv\" update args []string none Extra args to update command command string none Update command recurseSubmodules bool true Update submodules recursively vault command string vault Vault CLI command verify exclude []string none Entry types to exclude from verify warnings object none See section on \"Warnings\"","title":"Variables"},{"location":"reference/configuration-file/variables/#variables","text":"The following configuration variables are available: Section Variable Type Default value Description Top level color string auto Colorize output data any none Template data destDir string ~ Destination directory encryption string none Encryption type, either age or gpg format string json Format for data output, either json or yaml mode string file Mode in target dir, either file or symlink pager string $PAGER Default pager CLI command progress bool false Display progress bars scriptEnv object none Extra environment variables for scripts scriptTempDir string none Temporary directory for scripts sourceDir string ~/.local/share/chezmoi Source directory umask int from system Umask useBuiltinAge string auto Use builtin age if age command is not found in $PATH useBuiltinGit string auto Use builtin git if git command is not found in $PATH verbose bool false Make output more verbose workingTree string source directory git working tree directory add templateSymlinks bool false Template symlinks to source and home dirs age args []string none Extra args to age CLI command command string age age CLI command identities []string none age identity files identity string none age identity file passphrase bool false Use age passphrase instead of identity recipient string none age recipient recipientFile string none age recipient file recipientFiles []string none age recipient files recipients []string none age recipients suffix string .age Suffix appended to age-encrypted files symmetric bool false Use age symmetric encryption awsSecretsManager profile string none AWS shared profile name region string none AWS region bitwarden command string bw Bitwarden CLI command cd args []string none Extra args to shell in cd command command string none Shell to run in cd command completion custom bool false Enable custom shell completions diff args []string see diff below Extra args to external diff command command string none External diff command exclude []string none Entry types to exclude from diffs pager string none Diff-specific pager reverse bool false Reverse order of arguments to diff scriptContents bool true Show script contents edit apply bool false Apply changes on exit args []string none Extra args to edit command command string $EDITOR / $VISUAL Edit command hardlink bool true Invoke editor with a hardlink to the source file minDuration duration 1s Minimum duration for edit command watch bool false Automatically apply changes when files are saved git autoAdd bool false Add changes to the source state after any change autoCommit bool false Commit changes to the source state after any change autoPush bool false Push changes to the source state after any change command string git git CLI command gopass command string gopass gopass CLI command gpg args []string none Extra args to GPG CLI command command string gpg GPG CLI command recipient string none GPG recipient recipients []string none GPG recipients suffix string .asc Suffix appended to GPG-encrypted files symmetric bool false Use symmetric GPG encryption interpreters extension . args []string none See section on \"Scripts on Windows\" extension . command string special See section on \"Scripts on Windows\" keepassxc args []string none Extra args to KeePassXC CLI command command string keepassxc-cli KeePassXC CLI command database string none KeePassXC database prompt bool true Prompt for password keeper args []string none Extra args to Keeper CLI command command string keeper Keeper CLI command lastpass command string lpass LastPass CLI command merge args []string see merge below Extra args to three-way merge CLI command command string none Three-way merge CLI command onepassword cache bool true Enable optional caching provided by op command string op 1Password CLI command prompt bool true Prompt for sign-in when no valid session is available pass command string pass Pass CLI command passhole args []string none Extra args to Passhole CLI command command string ph Passhole CLI command prompt bool true Prompt for password pinentry args []string none Extra args to pinentry CLI command command string none pinentry CLI command options []string see pinentry below Extra options for pinentry secret args []string none Extra args to secret CLI command command string none Generic secret CLI command status exclude []string none Entry types to exclude from status template options []string [\"missingkey=error\"] Template options textconv []object none See section on \"textconv\" update args []string none Extra args to update command command string none Update command recurseSubmodules bool true Update submodules recursively vault command string vault Vault CLI command verify exclude []string none Entry types to exclude from verify warnings object none See section on \"Warnings\"","title":"Variables"},{"location":"reference/configuration-file/warnings/","text":"Warnings By default, chezmoi will warn you when it encounters potential problems. Some of these warnings can be suppressed by setting values in configuration file. Variable Type Default Description configFileTemplateHasChanged bool true Warn when the config file template has changed Example ~/.config/chezmoi/chezmoi.toml [warnings] configFileTemplateHasChanged = false","title":"Warnings"},{"location":"reference/configuration-file/warnings/#warnings","text":"By default, chezmoi will warn you when it encounters potential problems. Some of these warnings can be suppressed by setting values in configuration file. Variable Type Default Description configFileTemplateHasChanged bool true Warn when the config file template has changed Example ~/.config/chezmoi/chezmoi.toml [warnings] configFileTemplateHasChanged = false","title":"Warnings"},{"location":"reference/special-files-and-directories/","text":"Special files and directories All files and directories in the source state whose name begins with . are ignored by default, unless they are one of the special files listed here. .chezmoidata.$FORMAT and .chezmoitemplates are read before all other files so that they can be used in templates.","title":"Special files and directories"},{"location":"reference/special-files-and-directories/#special-files-and-directories","text":"All files and directories in the source state whose name begins with . are ignored by default, unless they are one of the special files listed here. .chezmoidata.$FORMAT and .chezmoitemplates are read before all other files so that they can be used in templates.","title":"Special files and directories"},{"location":"reference/special-files-and-directories/chezmoi-format-tmpl/","text":".chezmoi.$FORMAT.tmpl If a file called .chezmoi.$FORMAT.tmpl exists then chezmoi init will use it to create an initial config file. $FORMAT must be one of the supported config file formats, e.g. json , toml , or yaml . Example ~/.local/share/chezmoi/.chezmoi.yaml.tmpl {{ $email := promptString \"email\" -}} data: email: {{ $email | quote }}","title":".chezmoi.&lt;format&gt;.tmpl"},{"location":"reference/special-files-and-directories/chezmoi-format-tmpl/#chezmoiformattmpl","text":"If a file called .chezmoi.$FORMAT.tmpl exists then chezmoi init will use it to create an initial config file. $FORMAT must be one of the supported config file formats, e.g. json , toml , or yaml . Example ~/.local/share/chezmoi/.chezmoi.yaml.tmpl {{ $email := promptString \"email\" -}} data: email: {{ $email | quote }}","title":".chezmoi.$FORMAT.tmpl"},{"location":"reference/special-files-and-directories/chezmoidata-format/","text":".chezmoidata.$FORMAT If a file called .chezmoidata.$FORMAT exists in the source state, it is interpreted as template data. Example If .chezmoidata.toml contains the following: ~/.local/share/chezmoi/.chezmoidata.toml fontSize = 12 Then the .fontSize variable is available in templates, e.g. FONT_SIZE={{ .fontSize }} Will result in: FONT_SIZE=12","title":".chezmoidata.&lt;format&gt;"},{"location":"reference/special-files-and-directories/chezmoidata-format/#chezmoidataformat","text":"If a file called .chezmoidata.$FORMAT exists in the source state, it is interpreted as template data. Example If .chezmoidata.toml contains the following: ~/.local/share/chezmoi/.chezmoidata.toml fontSize = 12 Then the .fontSize variable is available in templates, e.g. FONT_SIZE={{ .fontSize }} Will result in: FONT_SIZE=12","title":".chezmoidata.$FORMAT"},{"location":"reference/special-files-and-directories/chezmoiexternal-format/","text":".chezmoiexternal.$FORMAT{,.tmpl} If a file called .chezmoiexternal.$FORMAT (with an optional .tmpl extension) exists in the source state (either ~/.local/share/chezmoi or directory defined inside .chezmoiroot ), it is interpreted as a list of external files and archives to be included as if they were in the source state. $FORMAT must be one of chezmoi's supported configuration file formats, e.g. json , toml , or yaml . .chezmoiexternal.$FORMAT is interpreted as a template. This allows different externals to be included on different machines. Entries are indexed by target name relative to the directory of the .chezmoiexternal.$FORMAT file, and must have a type and a url field. type can be either file , archive , or git-repo . If the entry's parent directories do not already exist in the source state then chezmoi will create them as regular directories. Entries may have the following fields: Variable Type Default value Description type string none External type ( file , archive , or git-repo ) clone.args []string none Extra args to git clone encrypted bool false Whether the external is encrypted exact bool false Add exact_ attribute to directories in archive exclude []string none Patterns to exclude from archive executable bool false Add executable_ attribute to file filter.command string none Command to filter contents filter.args []string none Extra args to command to filter contents format string autodetect Format of archive include []string none Patterns to include from archive pull.args []string none Extra args to git pull refreshPeriod duration 0 Refresh period stripComponents int 0 Number of leading directory components to strip from archives url string none URL checksum.sha256 string none Expected SHA256 checksum of data checksum.sha384 string none Expected SHA384 checksum of data checksum.sha512 string none Expected SHA512 checksum of data checksum.size int none Expected size of data If any of the optional checksum.sha256 , checksum.sha384 , or checksum.sha512 fields are set, chezmoi will verify that the downloaded data has the given checksum. The optional boolean encrypted field specifies whether the file or archive is encrypted. If optional string filter.command and array of strings filter.args are specified, the file or archive is filtered by piping it into the command's standard input and reading the command's standard output. If type is file then the target is a file with the contents of url . The optional boolean field executable may be set, in which case the target file will be executable. If type is archive then the target is a directory with the contents of the archive at url . The optional boolean field exact may be set, in which case the directory and all subdirectories will be treated as exact directories, i.e. chezmoi apply will remove entries not present in the archive. The optional integer field stripComponents will remove leading path components from the members of archive. The optional string field format sets the archive format. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip . If format is not specified then chezmoi will guess the format using firstly the path of the URL and secondly its contents. The optional include and exclude fields are lists of patterns specify which archive members to include or exclude respectively. Patterns match paths in the archive, not the target state. chezmoi uses the following algorithm to determine whether an archive member is included: If the archive member name matches any exclude pattern, then the archive member is excluded. In addition, if the archive member is a directory, then all contained files and sub-directories will be excluded, too (recursively). Otherwise, if the archive member name matches any include pattern, then the archive member is included. Otherwise, if only include patterns were specified then the archive member is excluded. Otherwise, if only exclude patterns were specified then the archive member is included. Otherwise, the archive member is included.o Excluded archive members do not generate source state entries, and, if they are directories, all of their children are also excluded. If type is git-repo then chezmoi will run git clone $URL $TARGET_NAME with the optional clone.args if the target does not exist. If the target exists, then chezmoi will run git pull with the optional pull.args to update the target. For file and archive externals, chezmoi will cache downloaded URLs. The optional duration refreshPeriod field specifies how often chezmoi will re-download the URL. The default is zero meaning that chezmoi will never re-download unless forced. To force chezmoi to re-download URLs, pass the -R / --refresh-externals flag. Suitable refresh periods include one day ( 24h ), one week ( 168h ), or four weeks ( 672h ). Example ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 [\"www/adminer/plugins\"] type = \"archive\" url = \"https://api.github.com/repos/vrana/adminer/tarball\" refreshPeriod = \"744h\" stripComponents = 2 include = [ \"*/plugins/**\" ] Some more examples can be found in the user guide .","title":".chezmoiexternal.&lt;format&gt;"},{"location":"reference/special-files-and-directories/chezmoiexternal-format/#chezmoiexternalformattmpl","text":"If a file called .chezmoiexternal.$FORMAT (with an optional .tmpl extension) exists in the source state (either ~/.local/share/chezmoi or directory defined inside .chezmoiroot ), it is interpreted as a list of external files and archives to be included as if they were in the source state. $FORMAT must be one of chezmoi's supported configuration file formats, e.g. json , toml , or yaml . .chezmoiexternal.$FORMAT is interpreted as a template. This allows different externals to be included on different machines. Entries are indexed by target name relative to the directory of the .chezmoiexternal.$FORMAT file, and must have a type and a url field. type can be either file , archive , or git-repo . If the entry's parent directories do not already exist in the source state then chezmoi will create them as regular directories. Entries may have the following fields: Variable Type Default value Description type string none External type ( file , archive , or git-repo ) clone.args []string none Extra args to git clone encrypted bool false Whether the external is encrypted exact bool false Add exact_ attribute to directories in archive exclude []string none Patterns to exclude from archive executable bool false Add executable_ attribute to file filter.command string none Command to filter contents filter.args []string none Extra args to command to filter contents format string autodetect Format of archive include []string none Patterns to include from archive pull.args []string none Extra args to git pull refreshPeriod duration 0 Refresh period stripComponents int 0 Number of leading directory components to strip from archives url string none URL checksum.sha256 string none Expected SHA256 checksum of data checksum.sha384 string none Expected SHA384 checksum of data checksum.sha512 string none Expected SHA512 checksum of data checksum.size int none Expected size of data If any of the optional checksum.sha256 , checksum.sha384 , or checksum.sha512 fields are set, chezmoi will verify that the downloaded data has the given checksum. The optional boolean encrypted field specifies whether the file or archive is encrypted. If optional string filter.command and array of strings filter.args are specified, the file or archive is filtered by piping it into the command's standard input and reading the command's standard output. If type is file then the target is a file with the contents of url . The optional boolean field executable may be set, in which case the target file will be executable. If type is archive then the target is a directory with the contents of the archive at url . The optional boolean field exact may be set, in which case the directory and all subdirectories will be treated as exact directories, i.e. chezmoi apply will remove entries not present in the archive. The optional integer field stripComponents will remove leading path components from the members of archive. The optional string field format sets the archive format. The supported archive formats are tar , tar.gz , tgz , tar.bz2 , tbz2 , xz , and zip . If format is not specified then chezmoi will guess the format using firstly the path of the URL and secondly its contents. The optional include and exclude fields are lists of patterns specify which archive members to include or exclude respectively. Patterns match paths in the archive, not the target state. chezmoi uses the following algorithm to determine whether an archive member is included: If the archive member name matches any exclude pattern, then the archive member is excluded. In addition, if the archive member is a directory, then all contained files and sub-directories will be excluded, too (recursively). Otherwise, if the archive member name matches any include pattern, then the archive member is included. Otherwise, if only include patterns were specified then the archive member is excluded. Otherwise, if only exclude patterns were specified then the archive member is included. Otherwise, the archive member is included.o Excluded archive members do not generate source state entries, and, if they are directories, all of their children are also excluded. If type is git-repo then chezmoi will run git clone $URL $TARGET_NAME with the optional clone.args if the target does not exist. If the target exists, then chezmoi will run git pull with the optional pull.args to update the target. For file and archive externals, chezmoi will cache downloaded URLs. The optional duration refreshPeriod field specifies how often chezmoi will re-download the URL. The default is zero meaning that chezmoi will never re-download unless forced. To force chezmoi to re-download URLs, pass the -R / --refresh-externals flag. Suitable refresh periods include one day ( 24h ), one week ( 168h ), or four weeks ( 672h ). Example ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 [\"www/adminer/plugins\"] type = \"archive\" url = \"https://api.github.com/repos/vrana/adminer/tarball\" refreshPeriod = \"744h\" stripComponents = 2 include = [ \"*/plugins/**\" ] Some more examples can be found in the user guide .","title":".chezmoiexternal.$FORMAT{,.tmpl}"},{"location":"reference/special-files-and-directories/chezmoiignore/","text":".chezmoiignore{,.tmpl} If a file called .chezmoiignore (with an optional .tmpl extension) exists in the source state then it is interpreted as a set of patterns to ignore. Patterns are matched using doublestar.Match and match against the target path, not the source path. Patterns can be excluded by prefixing them with a ! character. All excludes take priority over all includes. Comments are introduced with the # character and run until the end of the line. .chezmoiignore is interpreted as a template, whether or not it has a .tmpl extension. This allows different files to be ignored on different machines. .chezmoiignore files in subdirectories apply only to that subdirectory. Example ~/.local/share/chezmoi/.chezmoiignore README.md *.txt # ignore *.txt in the target directory */*.txt # ignore *.txt in subdirectories of the target directory # but not in subdirectories of subdirectories; # so a/b/c.txt would *not* be ignored backups/ # ignore backups folder in chezmoi directory and all its contents backups/** # ignore all contents of backups folder in chezmoi directory # but not backups folder itself {{- if ne .email \"firstname.lastname@company.com\" }} # Ignore .company-directory unless configured with a company email .company-directory # note that the pattern is not dot_company-directory {{- end }} {{- if ne .email \"me@home.org\" }} .personal-file {{- end }}","title":".chezmoiignore"},{"location":"reference/special-files-and-directories/chezmoiignore/#chezmoiignoretmpl","text":"If a file called .chezmoiignore (with an optional .tmpl extension) exists in the source state then it is interpreted as a set of patterns to ignore. Patterns are matched using doublestar.Match and match against the target path, not the source path. Patterns can be excluded by prefixing them with a ! character. All excludes take priority over all includes. Comments are introduced with the # character and run until the end of the line. .chezmoiignore is interpreted as a template, whether or not it has a .tmpl extension. This allows different files to be ignored on different machines. .chezmoiignore files in subdirectories apply only to that subdirectory. Example ~/.local/share/chezmoi/.chezmoiignore README.md *.txt # ignore *.txt in the target directory */*.txt # ignore *.txt in subdirectories of the target directory # but not in subdirectories of subdirectories; # so a/b/c.txt would *not* be ignored backups/ # ignore backups folder in chezmoi directory and all its contents backups/** # ignore all contents of backups folder in chezmoi directory # but not backups folder itself {{- if ne .email \"firstname.lastname@company.com\" }} # Ignore .company-directory unless configured with a company email .company-directory # note that the pattern is not dot_company-directory {{- end }} {{- if ne .email \"me@home.org\" }} .personal-file {{- end }}","title":".chezmoiignore{,.tmpl}"},{"location":"reference/special-files-and-directories/chezmoiremove/","text":".chezmoiremove{,.tmpl} If a file called .chezmoiremove (with an optional .tmpl extension) exists in the source state then it is interpreted as a list of targets to remove. .chezmoiremove is interpreted as a template, whether or not it has a .tmpl extension.","title":".chezmoiremove"},{"location":"reference/special-files-and-directories/chezmoiremove/#chezmoiremovetmpl","text":"If a file called .chezmoiremove (with an optional .tmpl extension) exists in the source state then it is interpreted as a list of targets to remove. .chezmoiremove is interpreted as a template, whether or not it has a .tmpl extension.","title":".chezmoiremove{,.tmpl}"},{"location":"reference/special-files-and-directories/chezmoiroot/","text":".chezmoiroot If a file called .chezmoiroot exists in the root of the source directory then the source state is read from the directory specified in .chezmoiroot interpreted as a relative path to the source directory. .chezmoiroot is read before all other files in the source directory.","title":".chezmoiroot"},{"location":"reference/special-files-and-directories/chezmoiroot/#chezmoiroot","text":"If a file called .chezmoiroot exists in the root of the source directory then the source state is read from the directory specified in .chezmoiroot interpreted as a relative path to the source directory. .chezmoiroot is read before all other files in the source directory.","title":".chezmoiroot"},{"location":"reference/special-files-and-directories/chezmoiscripts/","text":".chezmoiscripts If a directory called .chezmoiscripts exists in the root of the source directory then any scripts in it are executed as normal scripts without creating a corresponding directory in the target state.","title":".chezmoiscripts"},{"location":"reference/special-files-and-directories/chezmoiscripts/#chezmoiscripts","text":"If a directory called .chezmoiscripts exists in the root of the source directory then any scripts in it are executed as normal scripts without creating a corresponding directory in the target state.","title":".chezmoiscripts"},{"location":"reference/special-files-and-directories/chezmoitemplates/","text":".chezmoitemplates If a directory called .chezmoitemplates exists, then all files in this directory are available as templates with a name equal to the relative path to the .chezmoitemplates directory. The template action can be used to include these templates in another template. The value of . must be set explicitly if needed, otherwise the template will be executed with nil data. Example Given: ~/.local/share/chezmoi/.chezmoitemplates/foo {{ if true }}bar{{ end }} ~/.local/share/chezmoi/dot_file.tmpl {{ template \"foo\" . }} The target state of .file will be bar .","title":".chezmoitemplates"},{"location":"reference/special-files-and-directories/chezmoitemplates/#chezmoitemplates","text":"If a directory called .chezmoitemplates exists, then all files in this directory are available as templates with a name equal to the relative path to the .chezmoitemplates directory. The template action can be used to include these templates in another template. The value of . must be set explicitly if needed, otherwise the template will be executed with nil data. Example Given: ~/.local/share/chezmoi/.chezmoitemplates/foo {{ if true }}bar{{ end }} ~/.local/share/chezmoi/dot_file.tmpl {{ template \"foo\" . }} The target state of .file will be bar .","title":".chezmoitemplates"},{"location":"reference/special-files-and-directories/chezmoiversion/","text":".chezmoiversion If a file called .chezmoiversion exists, then its contents are interpreted as a semantic version defining the minimum version of chezmoi required to interpret the source state correctly. chezmoi will refuse to interpret the source state if the current version is too old. Example ~/.local/share/chezmoi/.chezmoiversion 1.5.0","title":".chezmoiversion"},{"location":"reference/special-files-and-directories/chezmoiversion/#chezmoiversion","text":"If a file called .chezmoiversion exists, then its contents are interpreted as a semantic version defining the minimum version of chezmoi required to interpret the source state correctly. chezmoi will refuse to interpret the source state if the current version is too old. Example ~/.local/share/chezmoi/.chezmoiversion 1.5.0","title":".chezmoiversion"},{"location":"reference/templates/","text":"Templates chezmoi executes templates using text/template . The result is treated differently depending on whether the target is a file or a symlink. If target is a file, then: If the result is an empty string, then the file is removed. Otherwise, the target file contents are result. If the target is a symlink, then: Leading and trailing whitespace are stripped from the result. If the result is an empty string, then the symlink is removed. Otherwise, the target symlink target is the result. chezmoi executes templates using text/template 's missingkey=error option, which means that misspelled or missing keys will raise an error. This can be overridden by setting a list of options in the configuration file. Hint For a full list of template options, see Template.Option . Example ~/.config/chezmoi/chezmoi.toml [template] options = [ \"missingkey=zero\" ]","title":"Templates"},{"location":"reference/templates/#templates","text":"chezmoi executes templates using text/template . The result is treated differently depending on whether the target is a file or a symlink. If target is a file, then: If the result is an empty string, then the file is removed. Otherwise, the target file contents are result. If the target is a symlink, then: Leading and trailing whitespace are stripped from the result. If the result is an empty string, then the symlink is removed. Otherwise, the target symlink target is the result. chezmoi executes templates using text/template 's missingkey=error option, which means that misspelled or missing keys will raise an error. This can be overridden by setting a list of options in the configuration file. Hint For a full list of template options, see Template.Option . Example ~/.config/chezmoi/chezmoi.toml [template] options = [ \"missingkey=zero\" ]","title":"Templates"},{"location":"reference/templates/directives/","text":"Directives File-specific template options can be set using template directives in the template of the form: chezmoi:template:$KEY=$VALUE which sets the template option $KEY to $VALUE . $VALUE must be quoted if it contains spaces or double quotes. Multiple key/value pairs may be specified on a single line. Lines containing template directives are removed to avoid parse errors from any delimiters. If multiple directives are present in a file, later directives override earlier ones. Delimiters By default, chezmoi uses the standard text/template delimiters {{ and }} . If a template contains the string: chezmoi:template:left-delimiter=$LEFT right-delimiter=$RIGHT Then the delimiters $LEFT and $RIGHT are used instead. Either or both of left-delimiter=$LEFT and right-delimiter=$RIGHT may be omitted. If either $LEFT or $RIGHT is empty then the default delimiter ( {{ and }} respectively) is set instead. The delimiters are specific to the file in which they appear and are not inherited by templates called from the file. Example #!/bin/sh # chezmoi:template:left-delimiter=\"# [[\" right-delimiter=]] # [[ \"true\" ]] Line endings Many of the template functions available in chezmoi primarily use UNIX-syle line endings ( lf / \\n ), which may result in unexpected output when running chezmoi diff on a modify_ template. These line endings can be overridden with a template directive: chezmoi:template:line-endings=$VALUE $VALUE can be an arbitrary string or one of: Value Effect crlf Use Windows line endings ( \\r\\n ). lf Use UNIX-style line endings ( \\n ). native Use platform-native line endings ( crlf on Windows, lf elsewhere). Missing keys By default, chezmoi will return an error if a template indexes a map with a key that is not present in the map. This behavior can be changed globally with the template.options configuration variable or with a template directive: chezmoi:template:missing-key=$VALUE $VALUE can be one of: Value Effect error Return an error on any missing key (default). invalid Ignore missing keys. If printed, the result of the index operation is the string <no value> . zero Ignore missing keys. If printed, the result of the index operation is the zero value.","title":"Directives"},{"location":"reference/templates/directives/#directives","text":"File-specific template options can be set using template directives in the template of the form: chezmoi:template:$KEY=$VALUE which sets the template option $KEY to $VALUE . $VALUE must be quoted if it contains spaces or double quotes. Multiple key/value pairs may be specified on a single line. Lines containing template directives are removed to avoid parse errors from any delimiters. If multiple directives are present in a file, later directives override earlier ones.","title":"Directives"},{"location":"reference/templates/directives/#delimiters","text":"By default, chezmoi uses the standard text/template delimiters {{ and }} . If a template contains the string: chezmoi:template:left-delimiter=$LEFT right-delimiter=$RIGHT Then the delimiters $LEFT and $RIGHT are used instead. Either or both of left-delimiter=$LEFT and right-delimiter=$RIGHT may be omitted. If either $LEFT or $RIGHT is empty then the default delimiter ( {{ and }} respectively) is set instead. The delimiters are specific to the file in which they appear and are not inherited by templates called from the file. Example #!/bin/sh # chezmoi:template:left-delimiter=\"# [[\" right-delimiter=]] # [[ \"true\" ]]","title":"Delimiters"},{"location":"reference/templates/directives/#line-endings","text":"Many of the template functions available in chezmoi primarily use UNIX-syle line endings ( lf / \\n ), which may result in unexpected output when running chezmoi diff on a modify_ template. These line endings can be overridden with a template directive: chezmoi:template:line-endings=$VALUE $VALUE can be an arbitrary string or one of: Value Effect crlf Use Windows line endings ( \\r\\n ). lf Use UNIX-style line endings ( \\n ). native Use platform-native line endings ( crlf on Windows, lf elsewhere).","title":"Line endings"},{"location":"reference/templates/directives/#missing-keys","text":"By default, chezmoi will return an error if a template indexes a map with a key that is not present in the map. This behavior can be changed globally with the template.options configuration variable or with a template directive: chezmoi:template:missing-key=$VALUE $VALUE can be one of: Value Effect error Return an error on any missing key (default). invalid Ignore missing keys. If printed, the result of the index operation is the string <no value> . zero Ignore missing keys. If printed, the result of the index operation is the zero value.","title":"Missing keys"},{"location":"reference/templates/variables/","text":"Variables chezmoi provides the following automatically-populated variables: Variable Type Value .chezmoi.arch string Architecture, e.g. amd64 , arm , etc. as returned by runtime.GOARCH .chezmoi.args []string The arguments passed to the chezmoi command, starting with the program command .chezmoi.cacheDir string The cache directory .chezmoi.configFile string The path to the configuration file used by chezmoi .chezmoi.executable string The path to the chezmoi executable, if available .chezmoi.fqdnHostname string The fully-qualified domain name hostname of the machine chezmoi is running on .chezmoi.gid string The primary group ID .chezmoi.group string The group of the user running chezmoi .chezmoi.homeDir string The home directory of the user running chezmoi .chezmoi.hostname string The hostname of the machine chezmoi is running on, up to the first . .chezmoi.kernel string Contains information from /proc/sys/kernel . Linux only, useful for detecting specific kernels (e.g. Microsoft's WSL kernel) .chezmoi.os string Operating system, e.g. darwin , linux , etc. as returned by runtime.GOOS .chezmoi.osRelease string The information from /etc/os-release , Linux only, run chezmoi data to see its output .chezmoi.sourceDir string The source directory .chezmoi.sourceFile string The path of the template relative to the source directory .chezmoi.uid string The user ID .chezmoi.username string The username of the user running chezmoi .chezmoi.version.builtBy string The program that built the chezmoi executable, if set .chezmoi.version.commit string The git commit at which the chezmoi executable was built, if set .chezmoi.version.date string The timestamp at which the chezmoi executable was built, if set .chezmoi.version.version string The version of chezmoi .chezmoi.windowsVersion object Windows version information, if running on Windows .chezmoi.workingTree string The working tree of the source directory .chezmoi.windowsVersion contains the following keys populated from the registry key Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion . Key Type currentBuild string currentMajorVersionNumber integer currentMinorVersionNumber integer currentVersion string displayVersion string editionID string productName string Additional variables can be defined in the config file in the data section. Variable names must consist of a letter and be followed by zero or more letters and/or digits.","title":"Variables"},{"location":"reference/templates/variables/#variables","text":"chezmoi provides the following automatically-populated variables: Variable Type Value .chezmoi.arch string Architecture, e.g. amd64 , arm , etc. as returned by runtime.GOARCH .chezmoi.args []string The arguments passed to the chezmoi command, starting with the program command .chezmoi.cacheDir string The cache directory .chezmoi.configFile string The path to the configuration file used by chezmoi .chezmoi.executable string The path to the chezmoi executable, if available .chezmoi.fqdnHostname string The fully-qualified domain name hostname of the machine chezmoi is running on .chezmoi.gid string The primary group ID .chezmoi.group string The group of the user running chezmoi .chezmoi.homeDir string The home directory of the user running chezmoi .chezmoi.hostname string The hostname of the machine chezmoi is running on, up to the first . .chezmoi.kernel string Contains information from /proc/sys/kernel . Linux only, useful for detecting specific kernels (e.g. Microsoft's WSL kernel) .chezmoi.os string Operating system, e.g. darwin , linux , etc. as returned by runtime.GOOS .chezmoi.osRelease string The information from /etc/os-release , Linux only, run chezmoi data to see its output .chezmoi.sourceDir string The source directory .chezmoi.sourceFile string The path of the template relative to the source directory .chezmoi.uid string The user ID .chezmoi.username string The username of the user running chezmoi .chezmoi.version.builtBy string The program that built the chezmoi executable, if set .chezmoi.version.commit string The git commit at which the chezmoi executable was built, if set .chezmoi.version.date string The timestamp at which the chezmoi executable was built, if set .chezmoi.version.version string The version of chezmoi .chezmoi.windowsVersion object Windows version information, if running on Windows .chezmoi.workingTree string The working tree of the source directory .chezmoi.windowsVersion contains the following keys populated from the registry key Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion . Key Type currentBuild string currentMajorVersionNumber integer currentMinorVersionNumber integer currentVersion string displayVersion string editionID string productName string Additional variables can be defined in the config file in the data section. Variable names must consist of a letter and be followed by zero or more letters and/or digits.","title":"Variables"},{"location":"reference/templates/1password-functions/","text":"1Password functions The onepassword* template functions return structured data from 1Password using the 1Password CLI ( op ). Warning When using 1Password CLI v2 with biometric authentication, account shorthand names are not available. In order to assist with this, chezmoi supports multiple derived values from op account list that can be changed into the appropriate 1Password account-uuid . Example If op account list --format=json returns the following structure: [ { \"url\" : \"account1.1password.ca\" , \"email\" : \"my@email.com\" , \"user_uuid\" : \"some-user-uuid\" , \"account_uuid\" : \"some-account-uuid\" } ] The following values can be used in the account parameter and the value some-account-uuid will be passed as the --account parameter to op . some-account-uuid some-user-uuid account1.1password.ca account1 my@email.com my my@account1.1password.ca my@account1 If there are multiple accounts and any value exists more than once, that value will be removed from the account mapping. That is, if you are signed into my@email.com and your@email.com for account1.1password.ca , then account1.1password.ca will not be a valid lookup value, but my@account1 , my@account1.1password.ca , your@account1 , and your@account1.1password.ca would all be valid lookups. Warning Support for 1Password CLI v1 will be removed with the next major release of chezmoi.","title":"1Password functions"},{"location":"reference/templates/1password-functions/#1password-functions","text":"The onepassword* template functions return structured data from 1Password using the 1Password CLI ( op ). Warning When using 1Password CLI v2 with biometric authentication, account shorthand names are not available. In order to assist with this, chezmoi supports multiple derived values from op account list that can be changed into the appropriate 1Password account-uuid .","title":"1Password functions"},{"location":"reference/templates/1password-functions/#example","text":"If op account list --format=json returns the following structure: [ { \"url\" : \"account1.1password.ca\" , \"email\" : \"my@email.com\" , \"user_uuid\" : \"some-user-uuid\" , \"account_uuid\" : \"some-account-uuid\" } ] The following values can be used in the account parameter and the value some-account-uuid will be passed as the --account parameter to op . some-account-uuid some-user-uuid account1.1password.ca account1 my@email.com my my@account1.1password.ca my@account1 If there are multiple accounts and any value exists more than once, that value will be removed from the account mapping. That is, if you are signed into my@email.com and your@email.com for account1.1password.ca , then account1.1password.ca will not be a valid lookup value, but my@account1 , my@account1.1password.ca , your@account1 , and your@account1.1password.ca would all be valid lookups. Warning Support for 1Password CLI v1 will be removed with the next major release of chezmoi.","title":"Example"},{"location":"reference/templates/1password-functions/onepassword/","text":"onepassword uuid [ vault-uuid [ account-name ]] onepassword returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json and the output from op is parsed as JSON. The output from op is cached so calling onepassword multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op item get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op item get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{ (onepassword \"$UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").fields[1].value }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").fields[1].value }} A more robust way to get a password field would be something like: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info For 1Password CLI 1.x. {{ (onepassword \"$UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").details.password }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").details.password }} Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepassword template function is different and your templates will need updating. You may wish to use onepasswordDetailsFields or onepasswordItemFields instead of this function, as onepassword returns fields as a list of objects. However, this function may return values that are inaccessible from the other functions. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepassword \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepassword"},{"location":"reference/templates/1password-functions/onepassword/#onepassword-uuid-vault-uuid-account-name","text":"onepassword returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json and the output from op is parsed as JSON. The output from op is cached so calling onepassword multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op item get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op item get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{ (onepassword \"$UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").fields[1].value }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").fields[1].value }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").fields[1].value }} A more robust way to get a password field would be something like: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info For 1Password CLI 1.x. {{ (onepassword \"$UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\").details.password }} {{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").details.password }} {{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").details.password }} Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepassword template function is different and your templates will need updating. You may wish to use onepasswordDetailsFields or onepasswordItemFields instead of this function, as onepassword returns fields as a list of objects. However, this function may return values that are inaccessible from the other functions. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepassword \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepassword uuid [vault-uuid [account-name]]"},{"location":"reference/templates/1password-functions/onepasswordDetailsFields/","text":"onepasswordDetailsFields uuid [ vault-uuid [ account-name ]] onepasswordDetailsFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op get item $UUID , the output from op is parsed as JSON, and elements of details.fields are returned as a map indexed by each field's id (if set) or label (if set and id is not present). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Info For 1Password CLI 1.x, the map is indexed by each field's designation . The output from op is cached so calling onepasswordDetailsFields multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g. personal and work accounts). Example {{ (onepasswordDetailsFields \"$UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"\" \"$ACCOUNT_NAME\").password.value }} Example Given the output from op : { \"uuid\" : \"$UUID\" , \"details\" : { \"fields\" : [ { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } ] } } the return value of onepasswordDetailsFields will be the map: { \"username\" : { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, \"password\" : { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordDetailsFields template function is different and your templates will need updating. You may wish to use onepassword , onepasswordItemFields , or onepasswordRead instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordDetailsFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordDetailsFields"},{"location":"reference/templates/1password-functions/onepasswordDetailsFields/#onepassworddetailsfields-uuid-vault-uuid-account-name","text":"onepasswordDetailsFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op get item $UUID , the output from op is parsed as JSON, and elements of details.fields are returned as a map indexed by each field's id (if set) or label (if set and id is not present). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Info For 1Password CLI 1.x, the map is indexed by each field's designation . The output from op is cached so calling onepasswordDetailsFields multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g. personal and work accounts). Example {{ (onepasswordDetailsFields \"$UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").password.value }} {{ (onepasswordDetailsFields \"$UUID\" \"\" \"$ACCOUNT_NAME\").password.value }} Example Given the output from op : { \"uuid\" : \"$UUID\" , \"details\" : { \"fields\" : [ { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } ] } } the return value of onepasswordDetailsFields will be the map: { \"username\" : { \"designation\" : \"username\" , \"name\" : \"username\" , \"type\" : \"T\" , \"value\" : \"exampleuser\" }, \"password\" : { \"designation\" : \"password\" , \"name\" : \"password\" , \"type\" : \"P\" , \"value\" : \"examplepassword\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordDetailsFields template function is different and your templates will need updating. You may wish to use onepassword , onepasswordItemFields , or onepasswordRead instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordDetailsFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordDetailsFields uuid [vault-uuid [account-name]]"},{"location":"reference/templates/1password-functions/onepasswordDocument/","text":"onepasswordDocument uuid [ vault-uuid [ account-name ]] onepasswordDocument returns a document from 1Password using the 1Password CLI ( op ). uuid is passed to op get document $UUID and the output from op is returned. The output from op is cached so calling onepasswordDocument multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{- onepasswordDocument \"$UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\" -}} {{- onepasswordDocument \"$UUID\" \"\" \"$ACCOUNT_NAME\" -}}","title":"onepasswordDocument"},{"location":"reference/templates/1password-functions/onepasswordDocument/#onepassworddocument-uuid-vault-uuid-account-name","text":"onepasswordDocument returns a document from 1Password using the 1Password CLI ( op ). uuid is passed to op get document $UUID and the output from op is returned. The output from op is cached so calling onepasswordDocument multiple times with the same uuid will only invoke op once. If the optional vault-uuid is supplied, it will be passed along to the op get call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the op get call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts). If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example {{- onepasswordDocument \"$UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" -}} {{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\" -}} {{- onepasswordDocument \"$UUID\" \"\" \"$ACCOUNT_NAME\" -}}","title":"onepasswordDocument uuid [vault-uuid [account-name]]"},{"location":"reference/templates/1password-functions/onepasswordItemFields/","text":"onepasswordItemFields uuid [ vault-uuid [ account-name ]] onepasswordItemFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json , the output from op is parsed as JSON, and each element of details.sections are iterated over and any fields are returned as a map indexed by each field's n . If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example The result of {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.value }} is equivalent to calling $ op item get abcdefghijklmnopqrstuvwxyz --fields label = exampleLabel # or $ op item get abcdefghijklmnopqrstuvwxyz --fields exampleLabel Info For 1Password CLI 1.x. {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.v }} is equivalent to calling $ op item get abcdefghijklmnopqrstuvwxyz --fields exampleLabel Example Given the output from op : { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 1 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"userUUID\" , \"created_at\" : \"2022-01-12T16:29:26Z\" , \"updated_at\" : \"2022-01-12T16:29:26Z\" , \"sections\" : [ { \"id\" : \"$sectionID\" , \"label\" : \"Related Items\" } ], \"fields\" : [ { \"id\" : \"nerlnqbfzdm5q5g6ydsgdqgdw4\" , \"type\" : \"STRING\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } ], } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"id\" : \"string\" , \"type\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } } Info For 1Password CLI 1.x, the output is this: { \"uuid\" : \"$UUID\" , \"details\" : { \"sections\" : [ { \"name\" : \"linked items\" , \"title\" : \"Related Items\" }, { \"fields\" : [ { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } ], \"name\" : \"Section_20E0BD380789477D8904F830BFE8A121\" , \"title\" : \"\" } ] }, } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordItemFields template function is different and your templates will need updating. You may wish to use onepassword , onepasswordDetailsFields , or onepasswordRead instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordItemFields"},{"location":"reference/templates/1password-functions/onepasswordItemFields/#onepassworditemfields-uuid-vault-uuid-account-name","text":"onepasswordItemFields returns structured data from 1Password using the 1Password CLI ( op ). uuid is passed to op item get $UUID --format json , the output from op is parsed as JSON, and each element of details.sections are iterated over and any fields are returned as a map indexed by each field's n . If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example The result of {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.value }} is equivalent to calling $ op item get abcdefghijklmnopqrstuvwxyz --fields label = exampleLabel # or $ op item get abcdefghijklmnopqrstuvwxyz --fields exampleLabel Info For 1Password CLI 1.x. {{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.v }} is equivalent to calling $ op item get abcdefghijklmnopqrstuvwxyz --fields exampleLabel Example Given the output from op : { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 1 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"userUUID\" , \"created_at\" : \"2022-01-12T16:29:26Z\" , \"updated_at\" : \"2022-01-12T16:29:26Z\" , \"sections\" : [ { \"id\" : \"$sectionID\" , \"label\" : \"Related Items\" } ], \"fields\" : [ { \"id\" : \"nerlnqbfzdm5q5g6ydsgdqgdw4\" , \"type\" : \"STRING\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } ], } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"id\" : \"string\" , \"type\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"label\" : \"exampleLabel\" , \"value\" : \"exampleValue\" } } Info For 1Password CLI 1.x, the output is this: { \"uuid\" : \"$UUID\" , \"details\" : { \"sections\" : [ { \"name\" : \"linked items\" , \"title\" : \"Related Items\" }, { \"fields\" : [ { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } ], \"name\" : \"Section_20E0BD380789477D8904F830BFE8A121\" , \"title\" : \"\" } ] }, } the return value of onepasswordItemFields will be the map: { \"exampleLabel\" : { \"k\" : \"string\" , \"n\" : \"D4328E0846D2461E8E455D7A07B93397\" , \"t\" : \"exampleLabel\" , \"v\" : \"exampleValue\" } } Warning When using 1Password CLI 2.0 , note that the structure of the data returned by the onepasswordItemFields template function is different and your templates will need updating. You may wish to use onepassword , onepasswordDetailsFields , or onepasswordRead instead of this function, as it may not return expected values. Testing the output of this function is recommended: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq .","title":"onepasswordItemFields uuid [vault-uuid [account-name]]"},{"location":"reference/templates/1password-functions/onepasswordRead/","text":"onepasswordRead url [ account ] onepasswordRead returns data from 1Password using the 1Password CLI ( op ). url is passed to the op read --no-newline command. If account is specified, the extra arguments --account $ACCOUNT are passed to op . If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example The result of {{ onepasswordRead \"op://vault/item/field\" }} is equivalent to calling $ op read --no-newline op://vault/item/field","title":"onepasswordRead"},{"location":"reference/templates/1password-functions/onepasswordRead/#onepasswordread-url-account","text":"onepasswordRead returns data from 1Password using the 1Password CLI ( op ). url is passed to the op read --no-newline command. If account is specified, the extra arguments --account $ACCOUNT are passed to op . If there is no valid session in the environment, by default you will be interactively prompted to sign in. Example The result of {{ onepasswordRead \"op://vault/item/field\" }} is equivalent to calling $ op read --no-newline op://vault/item/field","title":"onepasswordRead url [account]"},{"location":"reference/templates/aws-secrets-manager-functions/","text":"AWS Secrets Manager functions The awsSecretsManager* functions return data from AWS Secrets Manager using the GetSecretValue API. The profile and region are pulled from the standard environment variables and shared config files but can be overridden by setting awsSecretsManager.profile and awsSecretsManager.region configuration variables respectively.","title":"AWS Secrets Manager functions"},{"location":"reference/templates/aws-secrets-manager-functions/#aws-secrets-manager-functions","text":"The awsSecretsManager* functions return data from AWS Secrets Manager using the GetSecretValue API. The profile and region are pulled from the standard environment variables and shared config files but can be overridden by setting awsSecretsManager.profile and awsSecretsManager.region configuration variables respectively.","title":"AWS Secrets Manager functions"},{"location":"reference/templates/aws-secrets-manager-functions/awsSecretsManager/","text":"awsSecretsManager arn awsSecretsManager returns structured data retreived from AWS Secrets Manager . arn specifies the SecretId passed to GetSecretValue . This can either be the full ARN or the simpler name if applicable.","title":"awsSecretsManager"},{"location":"reference/templates/aws-secrets-manager-functions/awsSecretsManager/#awssecretsmanager-arn","text":"awsSecretsManager returns structured data retreived from AWS Secrets Manager . arn specifies the SecretId passed to GetSecretValue . This can either be the full ARN or the simpler name if applicable.","title":"awsSecretsManager arn"},{"location":"reference/templates/aws-secrets-manager-functions/awsSecretsManagerRaw/","text":"awsSecretsManagerRaw arn awsSecretsManager returns the raw string value retrieved from AWS Secrets Manager . arn specifies the SecretId passed to GetSecretValue . This can either be the full ARN or the simpler name if applicable.","title":"awsSecretsManagerRaw"},{"location":"reference/templates/aws-secrets-manager-functions/awsSecretsManagerRaw/#awssecretsmanagerraw-arn","text":"awsSecretsManager returns the raw string value retrieved from AWS Secrets Manager . arn specifies the SecretId passed to GetSecretValue . This can either be the full ARN or the simpler name if applicable.","title":"awsSecretsManagerRaw arn"},{"location":"reference/templates/bitwarden-functions/","text":"Bitwarden functions The bitwarden* functions return data from Bitwarden using the Bitwarden CLI ( bw ).","title":"Bitwarden functions"},{"location":"reference/templates/bitwarden-functions/#bitwarden-functions","text":"The bitwarden* functions return data from Bitwarden using the Bitwarden CLI ( bw ).","title":"Bitwarden functions"},{"location":"reference/templates/bitwarden-functions/bitwarden/","text":"bitwarden [ arg ...] bitwarden returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged and the output from bw get is parsed as JSON. The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw once. Example username = {{ (bitwarden \"item\" \"$ITEMID\").login.username }} password = {{ (bitwarden \"item\" \"$ITEMID\").login.password }}","title":"bitwarden"},{"location":"reference/templates/bitwarden-functions/bitwarden/#bitwarden-arg","text":"bitwarden returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged and the output from bw get is parsed as JSON. The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw once. Example username = {{ (bitwarden \"item\" \"$ITEMID\").login.username }} password = {{ (bitwarden \"item\" \"$ITEMID\").login.password }}","title":"bitwarden [arg...]"},{"location":"reference/templates/bitwarden-functions/bitwardenAttachment/","text":"bitwardenAttachment filename itemid bitwardenAttachment returns a document from Bitwarden using the Bitwarden CLI ( bw ). filename and itemid is passed to bw get attachment $FILENAME --itemid $ITEMID and the output from bw is returned. The output from bw is cached so calling bitwardenAttachment multiple times with the same filename and itemid will only invoke bw once. Example {{- bitwardenAttachment \"$FILENAME\" \"$ITEMID\" -}}","title":"bitwardenAttachment"},{"location":"reference/templates/bitwarden-functions/bitwardenAttachment/#bitwardenattachment-filename-itemid","text":"bitwardenAttachment returns a document from Bitwarden using the Bitwarden CLI ( bw ). filename and itemid is passed to bw get attachment $FILENAME --itemid $ITEMID and the output from bw is returned. The output from bw is cached so calling bitwardenAttachment multiple times with the same filename and itemid will only invoke bw once. Example {{- bitwardenAttachment \"$FILENAME\" \"$ITEMID\" -}}","title":"bitwardenAttachment filename itemid"},{"location":"reference/templates/bitwarden-functions/bitwardenFields/","text":"bitwardenFields [ arg ...] bitwardenFields returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged, the output from bw get is parsed as JSON, and elements of fields are returned as a map indexed by each field's name . The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw get once. Example {{ (bitwardenFields \"item\" \"$ITEMID\").token.value }} Example Given the output from bw get : { \"object\" : \"item\" , \"id\" : \"bf22e4b4-ae4a-4d1c-8c98-ac620004b628\" , \"organizationId\" : null , \"folderId\" : null , \"type\" : 1 , \"name\" : \"example.com\" , \"notes\" : null , \"favorite\" : false , \"fields\" : [ { \"name\" : \"hidden\" , \"value\" : \"hidden-value\" , \"type\" : 1 }, { \"name\" : \"token\" , \"value\" : \"token-value\" , \"type\" : 0 } ], \"login\" : { \"username\" : \"username-value\" , \"password\" : \"password-value\" , \"totp\" : null , \"passwordRevisionDate\" : null }, \"collectionIds\" : [], \"revisionDate\" : \"2020-10-28T00:21:02.690Z\" } the return value if bitwardenFields will be the map: { \"hidden\" : { \"name\" : \"hidden\" , \"type\" : 1 , \"value\" : \"hidden-value\" }, \"token\" : { \"name\" : \"token\" , \"type\" : 0 , \"value\" : \"token-value\" } }","title":"bitwardenFields"},{"location":"reference/templates/bitwarden-functions/bitwardenFields/#bitwardenfields-arg","text":"bitwardenFields returns structured data retrieved from Bitwarden using the Bitwarden CLI ( bw ). arg s are passed to bw get unchanged, the output from bw get is parsed as JSON, and elements of fields are returned as a map indexed by each field's name . The output from bw get is cached so calling bitwarden multiple times with the same arguments will only invoke bw get once. Example {{ (bitwardenFields \"item\" \"$ITEMID\").token.value }} Example Given the output from bw get : { \"object\" : \"item\" , \"id\" : \"bf22e4b4-ae4a-4d1c-8c98-ac620004b628\" , \"organizationId\" : null , \"folderId\" : null , \"type\" : 1 , \"name\" : \"example.com\" , \"notes\" : null , \"favorite\" : false , \"fields\" : [ { \"name\" : \"hidden\" , \"value\" : \"hidden-value\" , \"type\" : 1 }, { \"name\" : \"token\" , \"value\" : \"token-value\" , \"type\" : 0 } ], \"login\" : { \"username\" : \"username-value\" , \"password\" : \"password-value\" , \"totp\" : null , \"passwordRevisionDate\" : null }, \"collectionIds\" : [], \"revisionDate\" : \"2020-10-28T00:21:02.690Z\" } the return value if bitwardenFields will be the map: { \"hidden\" : { \"name\" : \"hidden\" , \"type\" : 1 , \"value\" : \"hidden-value\" }, \"token\" : { \"name\" : \"token\" , \"type\" : 0 , \"value\" : \"token-value\" } }","title":"bitwardenFields [arg...]"},{"location":"reference/templates/functions/","text":"Functions All standard text/template and text template functions from sprig are included. chezmoi provides some additional functions.","title":"Functions"},{"location":"reference/templates/functions/#functions","text":"All standard text/template and text template functions from sprig are included. chezmoi provides some additional functions.","title":"Functions"},{"location":"reference/templates/functions/comment/","text":"comment prefix text comment returns text with each line prefixed with prefix . Example {{ \"Header\" | comment \"# \" }}","title":"comment"},{"location":"reference/templates/functions/comment/#comment-prefix-text","text":"comment returns text with each line prefixed with prefix . Example {{ \"Header\" | comment \"# \" }}","title":"comment prefix text"},{"location":"reference/templates/functions/completion/","text":"completion shell completion returns chezmoi's shell completion for shell . shell can be one of bash , fish , powershell , or zsh . Example {{ completion \"zsh\" }}","title":"completion"},{"location":"reference/templates/functions/completion/#completion-shell","text":"completion returns chezmoi's shell completion for shell . shell can be one of bash , fish , powershell , or zsh . Example {{ completion \"zsh\" }}","title":"completion shell"},{"location":"reference/templates/functions/decrypt/","text":"decrypt ciphertext decrypt decrypts ciphertext using chezmoi's configured encryption method. Example {{ joinPath .chezmoi.sourceDir \".ignored-encrypted-file.age\" | include | decrypt }}","title":"decrypt"},{"location":"reference/templates/functions/decrypt/#decrypt-ciphertext","text":"decrypt decrypts ciphertext using chezmoi's configured encryption method. Example {{ joinPath .chezmoi.sourceDir \".ignored-encrypted-file.age\" | include | decrypt }}","title":"decrypt ciphertext"},{"location":"reference/templates/functions/encrypt/","text":"encrypt plaintext encrypt encrypts plaintext using chezmoi's configured encryption method.","title":"encrypt"},{"location":"reference/templates/functions/encrypt/#encrypt-plaintext","text":"encrypt encrypts plaintext using chezmoi's configured encryption method.","title":"encrypt plaintext"},{"location":"reference/templates/functions/eqFold/","text":"eqFold string1 string2 [ extraString ...] eqFold returns the boolean truth of comparing string1 with string2 and any number of extraString s under Unicode case-folding. Example {{ $commandOutput := output \"path/to/output-FOO.sh\" }} {{ if eqFold \"foo\" $commandOutput }} # $commandOutput is \"foo\"/\"Foo\"/\"FOO\"... {{ else if eqFold \"bar\" $commandOutput }} # $commandOutput is \"bar\"/\"Bar\"/\"BAR\"... {{ end }}","title":"eqFold"},{"location":"reference/templates/functions/eqFold/#eqfold-string1-string2-extrastring","text":"eqFold returns the boolean truth of comparing string1 with string2 and any number of extraString s under Unicode case-folding. Example {{ $commandOutput := output \"path/to/output-FOO.sh\" }} {{ if eqFold \"foo\" $commandOutput }} # $commandOutput is \"foo\"/\"Foo\"/\"FOO\"... {{ else if eqFold \"bar\" $commandOutput }} # $commandOutput is \"bar\"/\"Bar\"/\"BAR\"... {{ end }}","title":"eqFold string1 string2 [extraString...]"},{"location":"reference/templates/functions/fromIni/","text":"fromIni initext fromIni returns the parsed value of initext . Example {{ (fromIni \"[section]\\nkey = value\").section.key }}","title":"fromIni"},{"location":"reference/templates/functions/fromIni/#fromini-initext","text":"fromIni returns the parsed value of initext . Example {{ (fromIni \"[section]\\nkey = value\").section.key }}","title":"fromIni initext"},{"location":"reference/templates/functions/fromToml/","text":"fromToml tomltext fromToml returns the parsed value of tomltext . Example {{ (fromToml \"[section]\\nkey = \\\"value\\\"\").section.key }}","title":"fromToml"},{"location":"reference/templates/functions/fromToml/#fromtoml-tomltext","text":"fromToml returns the parsed value of tomltext . Example {{ (fromToml \"[section]\\nkey = \\\"value\\\"\").section.key }}","title":"fromToml tomltext"},{"location":"reference/templates/functions/fromYaml/","text":"fromYaml yamltext fromYaml returns the parsed value of yamltext . Example {{ (fromYaml \"key1: value\\nkey2: value\").key2 }}","title":"fromYaml"},{"location":"reference/templates/functions/fromYaml/#fromyaml-yamltext","text":"fromYaml returns the parsed value of yamltext . Example {{ (fromYaml \"key1: value\\nkey2: value\").key2 }}","title":"fromYaml yamltext"},{"location":"reference/templates/functions/glob/","text":"glob pattern glob returns the list of files matching pattern according to doublestar.Glob . Relative paths are interpreted relative to the destination directory.","title":"glob"},{"location":"reference/templates/functions/glob/#glob-pattern","text":"glob returns the list of files matching pattern according to doublestar.Glob . Relative paths are interpreted relative to the destination directory.","title":"glob pattern"},{"location":"reference/templates/functions/hexDecode/","text":"hexDecode hextext hexDecode returns hextext decoded from a hex-encoding string. Example {{ hexDecode \"68656c6c6f\" }}","title":"hexDecode"},{"location":"reference/templates/functions/hexDecode/#hexdecode-hextext","text":"hexDecode returns hextext decoded from a hex-encoding string. Example {{ hexDecode \"68656c6c6f\" }}","title":"hexDecode hextext"},{"location":"reference/templates/functions/hexEncode/","text":"hexEncode string hexEncode returns string encoded as a hex string. Example {{ hexEncode \"example\" }}","title":"hexEncode"},{"location":"reference/templates/functions/hexEncode/#hexencode-string","text":"hexEncode returns string encoded as a hex string. Example {{ hexEncode \"example\" }}","title":"hexEncode string"},{"location":"reference/templates/functions/include/","text":"include filename include returns the literal contents of the file named *filename* . Relative paths are interpreted relative to the source directory.","title":"include"},{"location":"reference/templates/functions/include/#include-filename","text":"include returns the literal contents of the file named *filename* . Relative paths are interpreted relative to the source directory.","title":"include filename"},{"location":"reference/templates/functions/includeTemplate/","text":"includeTemplate filename [ data ] includeTemplate returns the result of executing the contents of filename with the optional data . Relative paths are first searched for in .chezmoitemplates and, if not found, are interpreted relative to the source directory.","title":"includeTemplate"},{"location":"reference/templates/functions/includeTemplate/#includetemplate-filename-data","text":"includeTemplate returns the result of executing the contents of filename with the optional data . Relative paths are first searched for in .chezmoitemplates and, if not found, are interpreted relative to the source directory.","title":"includeTemplate filename [data]"},{"location":"reference/templates/functions/ioreg/","text":"ioreg On macOS, ioreg returns the structured output of the ioreg -a -l command, which includes detailed information about the I/O Kit registry. On non-macOS operating systems, ioreg returns nil . The output from ioreg is cached so multiple calls to the ioreg function will only execute the ioreg -a -l command once. Example {{ if eq .chezmoi.os \"darwin\" }} {{ $serialNumber := index ioreg \"IORegistryEntryChildren\" 0 \"IOPlatformSerialNumber\" }} {{ end }} Warning The ioreg function can be very slow and should not be used. It will be removed in a later version of chezmoi.","title":"ioreg"},{"location":"reference/templates/functions/ioreg/#ioreg","text":"On macOS, ioreg returns the structured output of the ioreg -a -l command, which includes detailed information about the I/O Kit registry. On non-macOS operating systems, ioreg returns nil . The output from ioreg is cached so multiple calls to the ioreg function will only execute the ioreg -a -l command once. Example {{ if eq .chezmoi.os \"darwin\" }} {{ $serialNumber := index ioreg \"IORegistryEntryChildren\" 0 \"IOPlatformSerialNumber\" }} {{ end }} Warning The ioreg function can be very slow and should not be used. It will be removed in a later version of chezmoi.","title":"ioreg"},{"location":"reference/templates/functions/joinPath/","text":"joinPath element ... joinPath joins any number of path elements into a single path, separating them with the OS-specific path separator. Empty elements are ignored. The result is cleaned. If the argument list is empty or all its elements are empty, joinPath returns an empty string. On Windows, the result will only be a UNC path if the first non-empty element is a UNC path. Example {{ joinPath .chezmoi.homeDir \".zshrc\" }}","title":"joinPath"},{"location":"reference/templates/functions/joinPath/#joinpath-element","text":"joinPath joins any number of path elements into a single path, separating them with the OS-specific path separator. Empty elements are ignored. The result is cleaned. If the argument list is empty or all its elements are empty, joinPath returns an empty string. On Windows, the result will only be a UNC path if the first non-empty element is a UNC path. Example {{ joinPath .chezmoi.homeDir \".zshrc\" }}","title":"joinPath element..."},{"location":"reference/templates/functions/lookPath/","text":"lookPath file lookPath searches for an executable named file in the directories named by the PATH environment variable. If file contains a slash, it is tried directly and the PATH is not consulted. The result may be an absolute path or a path relative to the current directory. If file is not found, lookPath returns an empty string. lookPath is not hermetic: its return value depends on the state of the environment and the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if lookPath \"diff-so-fancy\" }} # diff-so-fancy is in $PATH {{ end }}","title":"lookPath"},{"location":"reference/templates/functions/lookPath/#lookpath-file","text":"lookPath searches for an executable named file in the directories named by the PATH environment variable. If file contains a slash, it is tried directly and the PATH is not consulted. The result may be an absolute path or a path relative to the current directory. If file is not found, lookPath returns an empty string. lookPath is not hermetic: its return value depends on the state of the environment and the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if lookPath \"diff-so-fancy\" }} # diff-so-fancy is in $PATH {{ end }}","title":"lookPath file"},{"location":"reference/templates/functions/lstat/","text":"lstat name lstat runs os.Lstat on name . If name exists it returns structured data. If name does not exist then it returns a false value. If os.Lstat returns any other error then it raises an error. The structured value returned if name exists contains the fields name , size , mode , perm , modTime , isDir , and type . lstat is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if eq (joinPath .chezmoi.homeDir \".xinitrc\" | lstat).type \"symlink\" }} # ~/.xinitrc exists and is a symlink {{ end }}","title":"lstat"},{"location":"reference/templates/functions/lstat/#lstat-name","text":"lstat runs os.Lstat on name . If name exists it returns structured data. If name does not exist then it returns a false value. If os.Lstat returns any other error then it raises an error. The structured value returned if name exists contains the fields name , size , mode , perm , modTime , isDir , and type . lstat is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if eq (joinPath .chezmoi.homeDir \".xinitrc\" | lstat).type \"symlink\" }} # ~/.xinitrc exists and is a symlink {{ end }}","title":"lstat name"},{"location":"reference/templates/functions/mozillaInstallHash/","text":"mozillaInstallHash path mozillaInstallHash returns the Mozilla install hash for path . This is a convenience function to assist the management of Firefox profiles.","title":"mozillaInstallHash"},{"location":"reference/templates/functions/mozillaInstallHash/#mozillainstallhash-path","text":"mozillaInstallHash returns the Mozilla install hash for path . This is a convenience function to assist the management of Firefox profiles.","title":"mozillaInstallHash path"},{"location":"reference/templates/functions/output/","text":"output name [ arg ...] output returns the output of executing the command name with arg s. If executing the command returns an error then template execution exits with an error. The execution occurs every time that the template is executed. It is the user's responsibility to ensure that executing the command is both idempotent and fast. Example current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }}","title":"output"},{"location":"reference/templates/functions/output/#output-name-arg","text":"output returns the output of executing the command name with arg s. If executing the command returns an error then template execution exits with an error. The execution occurs every time that the template is executed. It is the user's responsibility to ensure that executing the command is both idempotent and fast. Example current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }}","title":"output name [arg...]"},{"location":"reference/templates/functions/quoteList/","text":"quoteList list quoteList returns a list where each element is the corresponding element in list quoted. Example {{ $args := list \"alpha\" \"beta\" \"gamma\" }} command {{ $args | quoteList }} [section] array = [{{- $list | quoteList | join \", \" -}}]","title":"quoteList"},{"location":"reference/templates/functions/quoteList/#quotelist-list","text":"quoteList returns a list where each element is the corresponding element in list quoted. Example {{ $args := list \"alpha\" \"beta\" \"gamma\" }} command {{ $args | quoteList }} [section] array = [{{- $list | quoteList | join \", \" -}}]","title":"quoteList list"},{"location":"reference/templates/functions/replaceAllRegex/","text":"replaceAllRegex expr repl text replaceAllRegex returns text with all substrings matching the regular expression expr replaced with repl . It is an alternative to sprig's regexpReplaceAll function with a different argument order that supports pipelining. Example {{ \"foo subject string\" | replaceAllRegex \"foo\" \"bar\" }}","title":"replaceAllRegex"},{"location":"reference/templates/functions/replaceAllRegex/#replaceallregex-expr-repl-text","text":"replaceAllRegex returns text with all substrings matching the regular expression expr replaced with repl . It is an alternative to sprig's regexpReplaceAll function with a different argument order that supports pipelining. Example {{ \"foo subject string\" | replaceAllRegex \"foo\" \"bar\" }}","title":"replaceAllRegex expr repl text"},{"location":"reference/templates/functions/setValueAtPath/","text":"setValueAtPath path value dict setValueAtPath modifies dict to set the value at path to value and returns dict . path can be either a string containing a . -separated list of keys or a list of keys. The function will create new key/value pairs in dict if needed. This is an alternative to sprig's set function with a different argument order that supports pipelining. Example {{ dict | setValueAtPath \"key1\" \"value1\" | setValueAtPath \"key2.nestedKey\" \"value2\" | toJson }} {{ dict | setValueAtPath (list \"key2\" \"nestedKey\") \"value2\" | toJson }}","title":"setValueAtPath"},{"location":"reference/templates/functions/setValueAtPath/#setvalueatpath-path-value-dict","text":"setValueAtPath modifies dict to set the value at path to value and returns dict . path can be either a string containing a . -separated list of keys or a list of keys. The function will create new key/value pairs in dict if needed. This is an alternative to sprig's set function with a different argument order that supports pipelining. Example {{ dict | setValueAtPath \"key1\" \"value1\" | setValueAtPath \"key2.nestedKey\" \"value2\" | toJson }} {{ dict | setValueAtPath (list \"key2\" \"nestedKey\") \"value2\" | toJson }}","title":"setValueAtPath path value dict"},{"location":"reference/templates/functions/stat/","text":"stat name stat runs os.Stat on name . If name exists it returns structured data. If name does not exist then it returns a false value. If os.Stat returns any other error then it raises an error. The structured value returned if name exists contains the fields name , size , mode , perm , modTime , isDir , and type . stat is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if stat (joinPath .chezmoi.homeDir \".pyenv\") }} # ~/.pyenv exists {{ end }}","title":"stat"},{"location":"reference/templates/functions/stat/#stat-name","text":"stat runs os.Stat on name . If name exists it returns structured data. If name does not exist then it returns a false value. If os.Stat returns any other error then it raises an error. The structured value returned if name exists contains the fields name , size , mode , perm , modTime , isDir , and type . stat is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates. Example {{ if stat (joinPath .chezmoi.homeDir \".pyenv\") }} # ~/.pyenv exists {{ end }}","title":"stat name"},{"location":"reference/templates/functions/toIni/","text":"toIni value toIni returns the ini representation of value , which must be a dict. Example {{ dict \"key\" \"value\" \"section\" (dict \"subkey\" \"subvalue\") | toIni }} Warning The ini format is not well defined, and the particular variant generated by toIni might not be suitable for you.","title":"toIni"},{"location":"reference/templates/functions/toIni/#toini-value","text":"toIni returns the ini representation of value , which must be a dict. Example {{ dict \"key\" \"value\" \"section\" (dict \"subkey\" \"subvalue\") | toIni }} Warning The ini format is not well defined, and the particular variant generated by toIni might not be suitable for you.","title":"toIni value"},{"location":"reference/templates/functions/toToml/","text":"toToml value toToml returns the TOML representation of value . Example {{ dict \"key\" \"value\" | toToml }}","title":"toToml"},{"location":"reference/templates/functions/toToml/#totoml-value","text":"toToml returns the TOML representation of value . Example {{ dict \"key\" \"value\" | toToml }}","title":"toToml value"},{"location":"reference/templates/functions/toYaml/","text":"toYaml value toYaml returns the YAML representation of value . Example {{ dict \"key\" \"value\" | toYaml }}","title":"toYaml"},{"location":"reference/templates/functions/toYaml/#toyaml-value","text":"toYaml returns the YAML representation of value . Example {{ dict \"key\" \"value\" | toYaml }}","title":"toYaml value"},{"location":"reference/templates/github-functions/","text":"GitHub functions The gitHub* template functions return data from the GitHub API. By default, an anonymous GitHub API request will be made, which is subject to GitHub's rate limits (currently 60 requests per hour per source IP address). If any of the environment variables $CHEZMOI_GITHUB_ACCESS_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN are found, then the first one found will be used to authenticate the GitHub API request, with a higher rate limit (currently 5,000 requests per hour per user). In practice, GitHub API rate limits are high enough that you should rarely need to set a token, unless you are sharing a source IP address with many other GitHub users. If needed, the GitHub documentation describes how to create a personal access token .","title":"GitHub functions"},{"location":"reference/templates/github-functions/#github-functions","text":"The gitHub* template functions return data from the GitHub API. By default, an anonymous GitHub API request will be made, which is subject to GitHub's rate limits (currently 60 requests per hour per source IP address). If any of the environment variables $CHEZMOI_GITHUB_ACCESS_TOKEN , $GITHUB_ACCESS_TOKEN , or $GITHUB_TOKEN are found, then the first one found will be used to authenticate the GitHub API request, with a higher rate limit (currently 5,000 requests per hour per user). In practice, GitHub API rate limits are high enough that you should rarely need to set a token, unless you are sharing a source IP address with many other GitHub users. If needed, the GitHub documentation describes how to create a personal access token .","title":"GitHub functions"},{"location":"reference/templates/github-functions/gitHubKeys/","text":"gitHubKeys user gitHubKeys returns user 's public SSH keys from GitHub using the GitHub API. The returned value is a slice of structs with .ID and .Key fields. Warning If you use this function to populate your ~/.ssh/authorized_keys file then you potentially open SSH access to anyone who is able to modify or add to your GitHub public SSH keys, possibly including certain GitHub employees. You should not use this function on publicly-accessible machines and should always verify that no unwanted keys have been added, for example by using the -v / --verbose option when running chezmoi apply or chezmoi update . Example {{ range gitHubKeys \"user\" }} {{- .Key }} {{ end }}","title":"gitHubKeys"},{"location":"reference/templates/github-functions/gitHubKeys/#githubkeys-user","text":"gitHubKeys returns user 's public SSH keys from GitHub using the GitHub API. The returned value is a slice of structs with .ID and .Key fields. Warning If you use this function to populate your ~/.ssh/authorized_keys file then you potentially open SSH access to anyone who is able to modify or add to your GitHub public SSH keys, possibly including certain GitHub employees. You should not use this function on publicly-accessible machines and should always verify that no unwanted keys have been added, for example by using the -v / --verbose option when running chezmoi apply or chezmoi update . Example {{ range gitHubKeys \"user\" }} {{- .Key }} {{ end }}","title":"gitHubKeys user"},{"location":"reference/templates/github-functions/gitHubLatestRelease/","text":"gitHubLatestRelease owner-repo gitHubLatestRelease calls the GitHub API to retrieve the latest release about the given owner-repo , returning structured data as defined by the GitHub Go API bindings . Calls to gitHubLatestRelease are cached so calling gitHubLatestRelease with the same owner-repo will only result in one call to the GitHub API. Example {{ (gitHubLatestRelease \"docker/compose\").TagName }}","title":"gitHubLatestRelease"},{"location":"reference/templates/github-functions/gitHubLatestRelease/#githublatestrelease-owner-repo","text":"gitHubLatestRelease calls the GitHub API to retrieve the latest release about the given owner-repo , returning structured data as defined by the GitHub Go API bindings . Calls to gitHubLatestRelease are cached so calling gitHubLatestRelease with the same owner-repo will only result in one call to the GitHub API. Example {{ (gitHubLatestRelease \"docker/compose\").TagName }}","title":"gitHubLatestRelease owner-repo"},{"location":"reference/templates/github-functions/gitHubLatestTag/","text":"gitHubLatestTag owner-repo gitHubLatestTag calls the GitHub API to retrieve the latest tag for the given owner-repo , returning structured data as defined by the GitHub Go API bindings . Calls to gitHubLatestTag are cached so calling gitHubLatestTag with the same owner-repo will only result in one call to the GitHub API. Example {{ (gitHubLatestTag \"docker/compose\").Name }} Warning The gitHubLatestTag returns the first tag returned by the list repository tags GitHub API endpoint . Although this seems to be the most recent tag, the GitHub API documentation does not specify the order of the returned tags.","title":"gitHubLatestTag"},{"location":"reference/templates/github-functions/gitHubLatestTag/#githublatesttag-owner-repo","text":"gitHubLatestTag calls the GitHub API to retrieve the latest tag for the given owner-repo , returning structured data as defined by the GitHub Go API bindings . Calls to gitHubLatestTag are cached so calling gitHubLatestTag with the same owner-repo will only result in one call to the GitHub API. Example {{ (gitHubLatestTag \"docker/compose\").Name }} Warning The gitHubLatestTag returns the first tag returned by the list repository tags GitHub API endpoint . Although this seems to be the most recent tag, the GitHub API documentation does not specify the order of the returned tags.","title":"gitHubLatestTag owner-repo"},{"location":"reference/templates/gopass-functions/","text":"gopass functions The gopass* template functions return data stored in gopass using the gopass CLI ( gopass ).","title":"gopass functions"},{"location":"reference/templates/gopass-functions/#gopass-functions","text":"The gopass* template functions return data stored in gopass using the gopass CLI ( gopass ).","title":"gopass functions"},{"location":"reference/templates/gopass-functions/gopass/","text":"gopass gopass-name gopass returns passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --password $GOPASS_NAME and the first line of the output of gopass is returned with the trailing newline stripped. The output from gopass is cached so calling gopass multiple times with the same gopass-name will only invoke gopass once. Example {{ gopass \"$PASS_NAME\" }}","title":"gopass"},{"location":"reference/templates/gopass-functions/gopass/#gopass-gopass-name","text":"gopass returns passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --password $GOPASS_NAME and the first line of the output of gopass is returned with the trailing newline stripped. The output from gopass is cached so calling gopass multiple times with the same gopass-name will only invoke gopass once. Example {{ gopass \"$PASS_NAME\" }}","title":"gopass gopass-name"},{"location":"reference/templates/gopass-functions/gopassRaw/","text":"gopassRaw gopass-name gopass returns raw passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --noparsing $GOPASS_NAME and the output is returned. The output from gopassRaw is cached so calling gopassRaw multiple times with the same gopass-name will only invoke gopass once.","title":"gopassRaw"},{"location":"reference/templates/gopass-functions/gopassRaw/#gopassraw-gopass-name","text":"gopass returns raw passwords stored in gopass using the gopass CLI ( gopass ). gopass-name is passed to gopass show --noparsing $GOPASS_NAME and the output is returned. The output from gopassRaw is cached so calling gopassRaw multiple times with the same gopass-name will only invoke gopass once.","title":"gopassRaw gopass-name"},{"location":"reference/templates/init-functions/","text":"Init functions These template functions are only available when generating a config file with chezmoi init . For testing with chezmoi execute-template , pass the --init flag to enable them.","title":"Init functions"},{"location":"reference/templates/init-functions/#init-functions","text":"These template functions are only available when generating a config file with chezmoi init . For testing with chezmoi execute-template , pass the --init flag to enable them.","title":"Init functions"},{"location":"reference/templates/init-functions/exit/","text":"exit code exit stops template execution and causes chezmoi to exit with code .","title":"exit"},{"location":"reference/templates/init-functions/exit/#exit-code","text":"exit stops template execution and causes chezmoi to exit with code .","title":"exit code"},{"location":"reference/templates/init-functions/promptBool/","text":"promptBool prompt [ default ] promptBool prompts the user with prompt and returns the user's response interpreted as a boolean. If default is passed the user's response is empty then it returns default . The user's response is interpreted as follows (case insensitive): Response Result 1, on, t, true, y, yes true 0, off, f, false, n, no false","title":"promptBool"},{"location":"reference/templates/init-functions/promptBool/#promptbool-prompt-default","text":"promptBool prompts the user with prompt and returns the user's response interpreted as a boolean. If default is passed the user's response is empty then it returns default . The user's response is interpreted as follows (case insensitive): Response Result 1, on, t, true, y, yes true 0, off, f, false, n, no false","title":"promptBool prompt [default]"},{"location":"reference/templates/init-functions/promptBoolOnce/","text":"promptBoolOnce map path prompt [ default ] promptBoolOnce returns the value of map at path if it exists and is a boolean value, otherwise it prompts the user for a boolean value with prompt and an optional default using promptBool . Example {{ $hasGUI := promptBoolOnce . \"hasGUI\" \"Does this machine have a GUI\" }}","title":"promptBoolOnce"},{"location":"reference/templates/init-functions/promptBoolOnce/#promptboolonce-map-path-prompt-default","text":"promptBoolOnce returns the value of map at path if it exists and is a boolean value, otherwise it prompts the user for a boolean value with prompt and an optional default using promptBool . Example {{ $hasGUI := promptBoolOnce . \"hasGUI\" \"Does this machine have a GUI\" }}","title":"promptBoolOnce map path prompt [default]"},{"location":"reference/templates/init-functions/promptInt/","text":"promptInt prompt [ default ] promptInt prompts the user with prompt and returns the user's response interpreted as an integer. If default is passed and the user's response is empty then it returns default .","title":"promptInt"},{"location":"reference/templates/init-functions/promptInt/#promptint-prompt-default","text":"promptInt prompts the user with prompt and returns the user's response interpreted as an integer. If default is passed and the user's response is empty then it returns default .","title":"promptInt prompt [default]"},{"location":"reference/templates/init-functions/promptIntOnce/","text":"promptIntOnce map path prompt [ default ] promptIntOnce returns the value of map at path if it exists and is an integer value, otherwise it prompts the user for a integer value with prompt and an optional default using promptInt . Example {{ $monitors := promptIntOnce . \"monitors\" \"How many monitors does this machine have\" }}","title":"promptIntOnce"},{"location":"reference/templates/init-functions/promptIntOnce/#promptintonce-map-path-prompt-default","text":"promptIntOnce returns the value of map at path if it exists and is an integer value, otherwise it prompts the user for a integer value with prompt and an optional default using promptInt . Example {{ $monitors := promptIntOnce . \"monitors\" \"How many monitors does this machine have\" }}","title":"promptIntOnce map path prompt [default]"},{"location":"reference/templates/init-functions/promptString/","text":"promptString prompt [ default ] promptString prompts the user with prompt and returns the user's response with all leading and trailing spaces stripped. If default is passed and the user's response is empty then it returns default . Example {{ $email := promptString \"email\" -}} [data] email = {{ $email | quote }}","title":"promptString"},{"location":"reference/templates/init-functions/promptString/#promptstring-prompt-default","text":"promptString prompts the user with prompt and returns the user's response with all leading and trailing spaces stripped. If default is passed and the user's response is empty then it returns default . Example {{ $email := promptString \"email\" -}} [data] email = {{ $email | quote }}","title":"promptString prompt [default]"},{"location":"reference/templates/init-functions/promptStringOnce/","text":"promptStringOnce map path prompt [ default ] promptStringOnce returns the value of map at path if it exists and is an string value, otherwise it prompts the user for a string value with prompt and an optional default using promptString . Example {{ $email := promptStringOnce . \"email\" \"What is your email address\" }}","title":"promptStringOnce"},{"location":"reference/templates/init-functions/promptStringOnce/#promptstringonce-map-path-prompt-default","text":"promptStringOnce returns the value of map at path if it exists and is an string value, otherwise it prompts the user for a string value with prompt and an optional default using promptString . Example {{ $email := promptStringOnce . \"email\" \"What is your email address\" }}","title":"promptStringOnce map path prompt [default]"},{"location":"reference/templates/init-functions/stdinIsATTY/","text":"stdinIsATTY stdinIsATTY returns true if chezmoi's standard input is a TTY. It is primarily useful for determining whether prompt* functions should be called or default values be used. Example {{ $email := \"\" }} {{ if stdinIsATTY }} {{ $email = promptString \"email\" }} {{ else }} {{ $email = \"user@example.com\" }} {{ end }}","title":"stdinIsATTY"},{"location":"reference/templates/init-functions/stdinIsATTY/#stdinisatty","text":"stdinIsATTY returns true if chezmoi's standard input is a TTY. It is primarily useful for determining whether prompt* functions should be called or default values be used. Example {{ $email := \"\" }} {{ if stdinIsATTY }} {{ $email = promptString \"email\" }} {{ else }} {{ $email = \"user@example.com\" }} {{ end }}","title":"stdinIsATTY"},{"location":"reference/templates/init-functions/writeToStdout/","text":"writeToStdout string ... writeToStdout writes each string to stdout. Example {{- writeToStdout \"Hello, world\\n\" -}}","title":"writeToStdout"},{"location":"reference/templates/init-functions/writeToStdout/#writetostdout-string","text":"writeToStdout writes each string to stdout. Example {{- writeToStdout \"Hello, world\\n\" -}}","title":"writeToStdout string..."},{"location":"reference/templates/keepassxc-functions/","text":"KeePassXC functions The keepassxc* template functions return structured data retrieved from a KeePassXC database using the KeePassXC CLI ( keepassxc-cli ) The database is configured by setting keepassxc.database in the configuration file. You will be prompted for the database password the first time keepassxc-cli is run, and the password is cached, in plain text, in memory until chezmoi terminates. The command used can by changed by setting the keepassxc.command configuration variable, and extra arguments can be added by setting keepassxc.args . Also, you can disable the password prompt by setting keepassxc.prompt to false .","title":"KeePassXC functions"},{"location":"reference/templates/keepassxc-functions/#keepassxc-functions","text":"The keepassxc* template functions return structured data retrieved from a KeePassXC database using the KeePassXC CLI ( keepassxc-cli ) The database is configured by setting keepassxc.database in the configuration file. You will be prompted for the database password the first time keepassxc-cli is run, and the password is cached, in plain text, in memory until chezmoi terminates. The command used can by changed by setting the keepassxc.command configuration variable, and extra arguments can be added by setting keepassxc.args . Also, you can disable the password prompt by setting keepassxc.prompt to false .","title":"KeePassXC functions"},{"location":"reference/templates/keepassxc-functions/keepassxc/","text":"keepassxc entry keepassxc returns structured data for entry using keepassxc-cli . The output from keepassxc-cli is parsed into key-value pairs and cached so calling keepassxc multiple times with the same entry will only invoke keepassxc-cli once. Example username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }}","title":"keepassxc"},{"location":"reference/templates/keepassxc-functions/keepassxc/#keepassxc-entry","text":"keepassxc returns structured data for entry using keepassxc-cli . The output from keepassxc-cli is parsed into key-value pairs and cached so calling keepassxc multiple times with the same entry will only invoke keepassxc-cli once. Example username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }}","title":"keepassxc entry"},{"location":"reference/templates/keepassxc-functions/keepassxcAttachment/","text":"keepassxcAttachment entry name keepassxcAttachment returns the attachment with name of entry using keepassxc-cli . Info keepassxcAttachment requires keepassxc-cli version 2.7.0 or later. Example {{- keepassxcAttachment \"SSH Config\" \"config\" -}}","title":"keepassxcAttachment"},{"location":"reference/templates/keepassxc-functions/keepassxcAttachment/#keepassxcattachment-entry-name","text":"keepassxcAttachment returns the attachment with name of entry using keepassxc-cli . Info keepassxcAttachment requires keepassxc-cli version 2.7.0 or later. Example {{- keepassxcAttachment \"SSH Config\" \"config\" -}}","title":"keepassxcAttachment entry name"},{"location":"reference/templates/keepassxc-functions/keepassxcAttribute/","text":"keepassxcAttribute entry attribute keepassxcAttribute returns the attribute attribute of entry using keepassxc-cli , with any leading or trailing whitespace removed. Example {{ keepassxcAttribute \"SSH Key\" \"private-key\" }}","title":"keepassxcAttribute"},{"location":"reference/templates/keepassxc-functions/keepassxcAttribute/#keepassxcattribute-entry-attribute","text":"keepassxcAttribute returns the attribute attribute of entry using keepassxc-cli , with any leading or trailing whitespace removed. Example {{ keepassxcAttribute \"SSH Key\" \"private-key\" }}","title":"keepassxcAttribute entry attribute"},{"location":"reference/templates/keeper-functions/","text":"Keeper functions The keeper* functions return data from Keeper Commander CLI ( keeper ). The command used can by changed by setting the keeper.command configuration variable, and extra arguments can be added by setting keeper.args .","title":"Keeper functions"},{"location":"reference/templates/keeper-functions/#keeper-functions","text":"The keeper* functions return data from Keeper Commander CLI ( keeper ). The command used can by changed by setting the keeper.command configuration variable, and extra arguments can be added by setting keeper.args .","title":"Keeper functions"},{"location":"reference/templates/keeper-functions/keeper/","text":"keeper uid keeper returns structured data retreived from Keeper using the Commander CLI . uid is passed to keeper get --format=json and the output is parsed as JSON.","title":"keeper"},{"location":"reference/templates/keeper-functions/keeper/#keeper-uid","text":"keeper returns structured data retreived from Keeper using the Commander CLI . uid is passed to keeper get --format=json and the output is parsed as JSON.","title":"keeper uid"},{"location":"reference/templates/keeper-functions/keeperDataFields/","text":"keeperDataFields uid keeperDataFields returns the .data.fields elements of keeper get --format=json *uid* indexed by type . Example url = {{ (keeperDataFields \"$UID\").url }} login = {{ index (keeperDataFields \"$UID\").login 0 }} password = {{ index (keeperDataFields \"$UID\").password 0 }}","title":"keeperDataFields"},{"location":"reference/templates/keeper-functions/keeperDataFields/#keeperdatafields-uid","text":"keeperDataFields returns the .data.fields elements of keeper get --format=json *uid* indexed by type .","title":"keeperDataFields uid"},{"location":"reference/templates/keeper-functions/keeperDataFields/#example","text":"url = {{ (keeperDataFields \"$UID\").url }} login = {{ index (keeperDataFields \"$UID\").login 0 }} password = {{ index (keeperDataFields \"$UID\").password 0 }}","title":"Example"},{"location":"reference/templates/keeper-functions/keeperFindPassword/","text":"keeperFindPassword query keeperFindPassword returns the output of keeper find-password query . query can be a UID or a path.","title":"keeperFindPassword"},{"location":"reference/templates/keeper-functions/keeperFindPassword/#keeperfindpassword-query","text":"keeperFindPassword returns the output of keeper find-password query . query can be a UID or a path.","title":"keeperFindPassword query"},{"location":"reference/templates/keyring-functions/keyring/","text":"keyring service user keyring retrieves the value associated with service and user from the user's keyring. OS Keyring macOS Keychain Linux GNOME Keyring Windows Windows Credentials Manager FreeBSD GNOME Keyring Example [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} Warning On FreeBSD, the keyring template function is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and keyring will always return an empty string.","title":"keyring"},{"location":"reference/templates/keyring-functions/keyring/#keyring-service-user","text":"keyring retrieves the value associated with service and user from the user's keyring. OS Keyring macOS Keychain Linux GNOME Keyring Windows Windows Credentials Manager FreeBSD GNOME Keyring Example [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} Warning On FreeBSD, the keyring template function is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and keyring will always return an empty string.","title":"keyring service user"},{"location":"reference/templates/lastpass-functions/","text":"LastPass functions The lastpass* template functions return structured data from LastPass using the LastPass CLI ( lpass ).","title":"LastPass functions"},{"location":"reference/templates/lastpass-functions/#lastpass-functions","text":"The lastpass* template functions return structured data from LastPass using the LastPass CLI ( lpass ).","title":"LastPass functions"},{"location":"reference/templates/lastpass-functions/lastpass/","text":"lastpass id lastpass returns structured data from LastPass using the LastPass CLI ( lpass ). id is passed to lpass show --json $ID and the output from lpass is parsed as JSON. In addition, the note field, if present, is further parsed as colon-separated key-value pairs. The structured data is an array so typically the index function is used to extract the first item. The output from lastpass is cached so calling lastpass multiple times with the same id will only invoke lpass once. Example githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} {{ (index (lastpass \"SSH\") 0).note.privateKey }}","title":"lastpass"},{"location":"reference/templates/lastpass-functions/lastpass/#lastpass-id","text":"lastpass returns structured data from LastPass using the LastPass CLI ( lpass ). id is passed to lpass show --json $ID and the output from lpass is parsed as JSON. In addition, the note field, if present, is further parsed as colon-separated key-value pairs. The structured data is an array so typically the index function is used to extract the first item. The output from lastpass is cached so calling lastpass multiple times with the same id will only invoke lpass once. Example githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} {{ (index (lastpass \"SSH\") 0).note.privateKey }}","title":"lastpass id"},{"location":"reference/templates/lastpass-functions/lastpassRaw/","text":"lastpassRaw id lastpassRaw returns structured data from LastPass using the LastPass CLI ( lpass ). It behaves identically to the lastpass function, except that no further parsing is done on the note field. Example {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"lastpassRaw"},{"location":"reference/templates/lastpass-functions/lastpassRaw/#lastpassraw-id","text":"lastpassRaw returns structured data from LastPass using the LastPass CLI ( lpass ). It behaves identically to the lastpass function, except that no further parsing is done on the note field. Example {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"lastpassRaw id"},{"location":"reference/templates/pass-functions/","text":"pass functions The pass template functions return passwords stored in pass using the pass CLI ( pass ).","title":"pass functions"},{"location":"reference/templates/pass-functions/#pass-functions","text":"The pass template functions return passwords stored in pass using the pass CLI ( pass ).","title":"pass functions"},{"location":"reference/templates/pass-functions/pass/","text":"pass pass-name pass returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the first line of the output of pass is returned with the trailing newline stripped. The output from pass is cached so calling pass multiple times with the same pass-name will only invoke pass once. Example {{ pass \"$PASS_NAME\" }}","title":"pass"},{"location":"reference/templates/pass-functions/pass/#pass-pass-name","text":"pass returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the first line of the output of pass is returned with the trailing newline stripped. The output from pass is cached so calling pass multiple times with the same pass-name will only invoke pass once. Example {{ pass \"$PASS_NAME\" }}","title":"pass pass-name"},{"location":"reference/templates/pass-functions/passFields/","text":"passFields pass-name passFields returns structured data stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is parsed as colon-separated key-value pairs, one per line. The return value is a map of keys to values. Example Given the output from pass : GitHub login: username password: secret the return value will be the map: { \"login\" : \"username\" , \"password\" : \"secret\" } Example {{ (passFields \"GitHub\").password }}","title":"passFields"},{"location":"reference/templates/pass-functions/passFields/#passfields-pass-name","text":"passFields returns structured data stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is parsed as colon-separated key-value pairs, one per line. The return value is a map of keys to values. Example Given the output from pass : GitHub login: username password: secret the return value will be the map: { \"login\" : \"username\" , \"password\" : \"secret\" } Example {{ (passFields \"GitHub\").password }}","title":"passFields pass-name"},{"location":"reference/templates/pass-functions/passRaw/","text":"passRaw pass-name passRaw returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is returned. The output from pass is cached so calling passRaw multiple times with the same pass-name will only invoke pass once.","title":"passRaw"},{"location":"reference/templates/pass-functions/passRaw/#passraw-pass-name","text":"passRaw returns passwords stored in pass using the pass CLI ( pass ). pass-name is passed to pass show $PASS_NAME and the output is returned. The output from pass is cached so calling passRaw multiple times with the same pass-name will only invoke pass once.","title":"passRaw pass-name"},{"location":"reference/templates/passhole-functions/","text":"Passhole chezmoi includes support for Keepass using the Passhole CLI ( ph ).","title":"Passhole"},{"location":"reference/templates/passhole-functions/#passhole","text":"chezmoi includes support for Keepass using the Passhole CLI ( ph ).","title":"Passhole"},{"location":"reference/templates/passhole-functions/passhole/","text":"passhole path field passhole returns the field of path from a Keepass database using passhole 's ph command. Example {{ passhole \"example.com\" \"password\" }}","title":"passhole"},{"location":"reference/templates/passhole-functions/passhole/#passhole-path-field","text":"passhole returns the field of path from a Keepass database using passhole 's ph command. Example {{ passhole \"example.com\" \"password\" }}","title":"passhole path field"},{"location":"reference/templates/secret-functions/","text":"Generic secret functions The secret* template functions return the output of the generic secret command defined by the secret.command configuration variable.","title":"Generic secret functions"},{"location":"reference/templates/secret-functions/#generic-secret-functions","text":"The secret* template functions return the output of the generic secret command defined by the secret.command configuration variable.","title":"Generic secret functions"},{"location":"reference/templates/secret-functions/secret/","text":"secret [ arg ...] secret returns the output of the generic secret command defined by the secret.command configuration variable with secret.args and arg s with leading and trailing whitespace removed. The output is cached so multiple calls to secret with the same arg s will only invoke the generic secret command once.","title":"secret"},{"location":"reference/templates/secret-functions/secret/#secret-arg","text":"secret returns the output of the generic secret command defined by the secret.command configuration variable with secret.args and arg s with leading and trailing whitespace removed. The output is cached so multiple calls to secret with the same arg s will only invoke the generic secret command once.","title":"secret [arg...]"},{"location":"reference/templates/secret-functions/secretJSON/","text":"secretJSON [ arg ...] secretJSON returns structured data from the generic secret command defined by the secret.command configuration variable with secret.args and arg s. The output is parsed as JSON. The output is cached so multiple calls to secret with the same args will only invoke the generic secret command once.","title":"secretJSON"},{"location":"reference/templates/secret-functions/secretJSON/#secretjson-arg","text":"secretJSON returns structured data from the generic secret command defined by the secret.command configuration variable with secret.args and arg s. The output is parsed as JSON. The output is cached so multiple calls to secret with the same args will only invoke the generic secret command once.","title":"secretJSON [arg...]"},{"location":"reference/templates/vault-functions/vault/","text":"vault key vault returns structured data from Vault using the Vault CLI ( vault ). key is passed to vault kv get -format=json $KEY and the output from vault is parsed as JSON. The output from vault is cached so calling vault multiple times with the same key will only invoke vault once. Example {{ (vault \"$KEY\").data.data.password }}","title":"vault"},{"location":"reference/templates/vault-functions/vault/#vault-key","text":"vault returns structured data from Vault using the Vault CLI ( vault ). key is passed to vault kv get -format=json $KEY and the output from vault is parsed as JSON. The output from vault is cached so calling vault multiple times with the same key will only invoke vault once. Example {{ (vault \"$KEY\").data.data.password }}","title":"vault key"},{"location":"user-guide/command-overview/","text":"Command overview Getting started chezmoi doctor checks for common problems. If you encounter something unexpected, run this first. chezmoi init creates chezmoi's source directory and a git repo on a new machine. Daily commands chezmoi add $FILE adds $FILE from your home directory to the source directory. chezmoi edit $FILE opens your editor with the file in the source directory that corresponds to $FILE . chezmoi status gives a quick summary of what files would change if you ran chezmoi apply . chezmoi diff shows the changes that chezmoi apply would make to your home directory. chezmoi apply updates your dotfiles from the source directory. chezmoi edit --apply $FILE is like chezmoi edit $FILE but also runs chezmoi apply $FILE afterwards. chezmoi cd opens a subshell in the source directory. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi status W-->>H: chezmoi diff W->>H: chezmoi apply W->>H: chezmoi edit --apply <file> H-->>W: chezmoi cd Using chezmoi across multiple machines chezmoi init $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory. chezmoi init --apply $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory and runs chezmoi apply . chezmoi update pulls the latest changes from your remote repo and runs chezmoi apply . Use normal git commands to add, commit, and push changes to your remote repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <github-username> R->>H: chezmoi init --apply <github-username> R->>H: chezmoi update <github-username> W->>L: git commit L->>R: git push Working with templates chezmoi data prints the available template data. chezmoi add --template $FILE adds $FILE as a template. chezmoi chattr +template $FILE makes an existing file a template. chezmoi cat $FILE prints the target contents of $FILE , without changing $FILE . chezmoi execute-template is useful for testing and debugging templates.","title":"Command overview"},{"location":"user-guide/command-overview/#command-overview","text":"","title":"Command overview"},{"location":"user-guide/command-overview/#getting-started","text":"chezmoi doctor checks for common problems. If you encounter something unexpected, run this first. chezmoi init creates chezmoi's source directory and a git repo on a new machine.","title":"Getting started"},{"location":"user-guide/command-overview/#daily-commands","text":"chezmoi add $FILE adds $FILE from your home directory to the source directory. chezmoi edit $FILE opens your editor with the file in the source directory that corresponds to $FILE . chezmoi status gives a quick summary of what files would change if you ran chezmoi apply . chezmoi diff shows the changes that chezmoi apply would make to your home directory. chezmoi apply updates your dotfiles from the source directory. chezmoi edit --apply $FILE is like chezmoi edit $FILE but also runs chezmoi apply $FILE afterwards. chezmoi cd opens a subshell in the source directory. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo H->>W: chezmoi add <file> W->>W: chezmoi edit <file> W-->>H: chezmoi status W-->>H: chezmoi diff W->>H: chezmoi apply W->>H: chezmoi edit --apply <file> H-->>W: chezmoi cd","title":"Daily commands"},{"location":"user-guide/command-overview/#using-chezmoi-across-multiple-machines","text":"chezmoi init $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory. chezmoi init --apply $GITHUB_USERNAME clones your dotfiles from GitHub into the source directory and runs chezmoi apply . chezmoi update pulls the latest changes from your remote repo and runs chezmoi apply . Use normal git commands to add, commit, and push changes to your remote repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <github-username> R->>H: chezmoi init --apply <github-username> R->>H: chezmoi update <github-username> W->>L: git commit L->>R: git push","title":"Using chezmoi across multiple machines"},{"location":"user-guide/command-overview/#working-with-templates","text":"chezmoi data prints the available template data. chezmoi add --template $FILE adds $FILE as a template. chezmoi chattr +template $FILE makes an existing file a template. chezmoi cat $FILE prints the target contents of $FILE , without changing $FILE . chezmoi execute-template is useful for testing and debugging templates.","title":"Working with templates"},{"location":"user-guide/daily-operations/","text":"Daily operations Pull the latest changes from your repo and apply them You can pull the changes from your repo and apply them in a single command: $ chezmoi update This runs git pull --autostash --rebase in your source directory and then chezmoi apply . sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi update Pull the latest changes from your repo and see what would change, without actually applying the changes Run: $ chezmoi git pull -- --autostash --rebase && chezmoi diff This runs git pull --autostash --rebase in your source directory and chezmoi diff then shows the difference between the target state computed from your source directory and the actual state. If you're happy with the changes, then you can run $ chezmoi apply to apply them. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi git pull W-->>H: chezmoi diff W->>H: chezmoi apply Automatically commit and push changes to your repo chezmoi can automatically commit and push changes to your source directory to your repo. This feature is disabled by default. To enable it, add the following to your config file: ~/.config/chezmoi/chezmoi.toml [git] autoCommit = true autoPush = true Whenever a change is made to your source directory, chezmoi will commit the changes with an automatically-generated commit message (if autoCommit is true) and push them to your repo (if autoPush is true). autoPush implies autoCommit , i.e. if autoPush is true then chezmoi will auto-commit your changes. If you only set autoCommit to true then changes will be committed but not pushed. Be careful when using autoPush . If your dotfiles repo is public and you accidentally add a secret in plain text, that secret will be pushed to your public repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo W->>L: autoCommit W->>R: autoPush Install chezmoi and your dotfiles on a new machine with a single command chezmoi's install script can run chezmoi init for you by passing extra arguments to the newly installed chezmoi binary. If your dotfiles repo is github.com/$GITHUB_USERNAME/dotfiles then installing chezmoi, running chezmoi init , and running chezmoi apply can be done in a single line of shell: $ sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply $GITHUB_USERNAME If your dotfiles repo has a different name to dotfiles , or if you host your dotfiles on a different service, then see the reference manual for chezmoi init . For setting up transitory environments (e.g. short-lived Linux containers) you can install chezmoi, install your dotfiles, and then remove all traces of chezmoi, including the source directory and chezmoi's configuration directory, with a single command: $ sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --one-shot $GITHUB_USERNAME","title":"Daily operations"},{"location":"user-guide/daily-operations/#daily-operations","text":"","title":"Daily operations"},{"location":"user-guide/daily-operations/#pull-the-latest-changes-from-your-repo-and-apply-them","text":"You can pull the changes from your repo and apply them in a single command: $ chezmoi update This runs git pull --autostash --rebase in your source directory and then chezmoi apply . sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>H: chezmoi update","title":"Pull the latest changes from your repo and apply them"},{"location":"user-guide/daily-operations/#pull-the-latest-changes-from-your-repo-and-see-what-would-change-without-actually-applying-the-changes","text":"Run: $ chezmoi git pull -- --autostash --rebase && chezmoi diff This runs git pull --autostash --rebase in your source directory and chezmoi diff then shows the difference between the target state computed from your source directory and the actual state. If you're happy with the changes, then you can run $ chezmoi apply to apply them. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi git pull W-->>H: chezmoi diff W->>H: chezmoi apply","title":"Pull the latest changes from your repo and see what would change, without actually applying the changes"},{"location":"user-guide/daily-operations/#automatically-commit-and-push-changes-to-your-repo","text":"chezmoi can automatically commit and push changes to your source directory to your repo. This feature is disabled by default. To enable it, add the following to your config file: ~/.config/chezmoi/chezmoi.toml [git] autoCommit = true autoPush = true Whenever a change is made to your source directory, chezmoi will commit the changes with an automatically-generated commit message (if autoCommit is true) and push them to your repo (if autoPush is true). autoPush implies autoCommit , i.e. if autoPush is true then chezmoi will auto-commit your changes. If you only set autoCommit to true then changes will be committed but not pushed. Be careful when using autoPush . If your dotfiles repo is public and you accidentally add a secret in plain text, that secret will be pushed to your public repo. sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo W->>L: autoCommit W->>R: autoPush","title":"Automatically commit and push changes to your repo"},{"location":"user-guide/daily-operations/#install-chezmoi-and-your-dotfiles-on-a-new-machine-with-a-single-command","text":"chezmoi's install script can run chezmoi init for you by passing extra arguments to the newly installed chezmoi binary. If your dotfiles repo is github.com/$GITHUB_USERNAME/dotfiles then installing chezmoi, running chezmoi init , and running chezmoi apply can be done in a single line of shell: $ sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --apply $GITHUB_USERNAME If your dotfiles repo has a different name to dotfiles , or if you host your dotfiles on a different service, then see the reference manual for chezmoi init . For setting up transitory environments (e.g. short-lived Linux containers) you can install chezmoi, install your dotfiles, and then remove all traces of chezmoi, including the source directory and chezmoi's configuration directory, with a single command: $ sh -c \" $( curl -fsLS get.chezmoi.io ) \" -- init --one-shot $GITHUB_USERNAME","title":"Install chezmoi and your dotfiles on a new machine with a single command"},{"location":"user-guide/include-files-from-elsewhere/","text":"Include dotfiles from elsewhere The sections below contain examples of how to use .chezmoiexternal.toml to include files from external sources. For more details, check the reference manual . Include a subdirectory from a URL To include a subdirectory from another repository, e.g. Oh My Zsh , you cannot use git submodules because chezmoi uses its own format for the source state and Oh My Zsh is not distributed in this format. Instead, you can use the .chezmoiexternal.$FORMAT to tell chezmoi to import dotfiles from an external source. For example, to import Oh My Zsh, the zsh-syntax-highlighting plugin , and powerlevel10k , put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 To apply the changes, run: $ chezmoi apply chezmoi will download the archives and unpack them as if they were part of the source state. chezmoi caches downloaded archives locally to avoid re-downloading them every time you run a chezmoi command, and will only re-download them at most every refreshPeriod (default never). In the above example refreshPeriod is set to 168h (one week) for .oh-my-zsh and .oh-my-zsh/custom/plugins/zsh-syntax-highlighting because the URL point to tarballs of the master branch, which changes over time. No refresh period is set for .oh-my-zsh/custom/themes/powerlevel10k because the URL points to the a tarball of a tagged version, which does not change over time. To bump the version of powerlevel10k, change the version in the URL. To force a refresh the downloaded archives, use the --refresh-externals flag to chezmoi apply : $ chezmoi --refresh-externals apply --refresh-externals can be shortened to -R : $ chezmoi -R apply When using Oh My Zsh, make sure you disable auto-updates by setting DISABLE_AUTO_UPDATE=\"true\" in ~/.zshrc . Auto updates will cause the ~/.oh-my-zsh directory to drift out of sync with chezmoi's source state. To update Oh My Zsh and its plugins, refresh the downloaded archives. Include a subdirectory with selected files from a URL Use include pattern filters to include only selected files from an archive URL. For example, to import just the required source files of the zsh-syntax-highlighting plugin in the example above, add in include filter to the zsh-syntax-highlighting section as shown below: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" include = [ \"*/*.zsh\" , \"*/.version\" , \"*/.revision-hash\" , \"*/highlighters/**\" ] Include a single file from a URL Including single files uses the same mechanism as including a subdirectory above, except with the external type file instead of archive . For example, to include plug.vim from github.com/junegunn/vim-plug in ~/.vim/autoload/plug.vim put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\" Include a subdirectory from a git repository You can configure chezmoi to keep a git repository up to date in a subdirectory by using the external type git-repo , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" If the directory does not exist then chezmoi will run git clone to clone it. If the directory does exist then chezmoi will run git pull to pull the latest changes, but not more often than every refreshPeriod . In the above example the refreshPeriod is 168h which is one week. The default refreshPeriod is zero, which disables refreshes. You can force a refresh (i.e. force a git pull ) by passing the --refresh-externals / -R flag to chezmoi apply . You can customize the arguments to git clone and git pull by setting the $DIR.clone.args and $DIR.pull.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" [\".vim/pack/alker0/chezmoi.vim\".pull] args = [ \"--ff-only\" ] Note chezmoi's support for git-repo externals is limited to running git clone and/or git pull in a directory. The contents of git-repo externals are not manifested in commands like chezmoi archive or chezmoi dump . Note chezmoi's support for git-repo externals currently requires git to be in your $PATH . Extract a single file from an archive You can extract a single file from an archive using the $ENTRY.filter.command and $ENTRY.filter.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml {{ $ ageVersion : = \"1.0.0\" - }} [\".local/bin/age\"] type = \"file\" url = \"https://github.com/FiloSottile/age/releases/download/v{{ $ageVersion }}/age-v{{ $ageVersion }}-{{ .chezmoi.os }}-{{ .chezmoi.arch }}.tar.gz\" executable = true refreshPeriod = \"168h\" [\".local/bin/age\".filter] command = \"tar\" args = [ \"--extract\" , \"--file\" , \"/dev/stdin\" , \"--gzip\" , \"--to-stdout\" , \"age/age\" ] This will extract the single archive member age/age from the given URL (which is computed for the current OS and architecture) to the target ./local/bin/age and set its executable bit. Import archives It is occasionally useful to import entire archives of configuration into your source state. The import command does this. For example, to import the latest version github.com/ohmyzsh/ohmyzsh to ~/.oh-my-zsh run: $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz Note This only updates the source state. You will need to run: $ chezmoi apply to update your destination directory.","title":"Include files from elsewhere"},{"location":"user-guide/include-files-from-elsewhere/#include-dotfiles-from-elsewhere","text":"The sections below contain examples of how to use .chezmoiexternal.toml to include files from external sources. For more details, check the reference manual .","title":"Include dotfiles from elsewhere"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-from-a-url","text":"To include a subdirectory from another repository, e.g. Oh My Zsh , you cannot use git submodules because chezmoi uses its own format for the source state and Oh My Zsh is not distributed in this format. Instead, you can use the .chezmoiexternal.$FORMAT to tell chezmoi to import dotfiles from an external source. For example, to import Oh My Zsh, the zsh-syntax-highlighting plugin , and powerlevel10k , put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh\"] type = \"archive\" url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" [\".oh-my-zsh/custom/themes/powerlevel10k\"] type = \"archive\" url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\" exact = true stripComponents = 1 To apply the changes, run: $ chezmoi apply chezmoi will download the archives and unpack them as if they were part of the source state. chezmoi caches downloaded archives locally to avoid re-downloading them every time you run a chezmoi command, and will only re-download them at most every refreshPeriod (default never). In the above example refreshPeriod is set to 168h (one week) for .oh-my-zsh and .oh-my-zsh/custom/plugins/zsh-syntax-highlighting because the URL point to tarballs of the master branch, which changes over time. No refresh period is set for .oh-my-zsh/custom/themes/powerlevel10k because the URL points to the a tarball of a tagged version, which does not change over time. To bump the version of powerlevel10k, change the version in the URL. To force a refresh the downloaded archives, use the --refresh-externals flag to chezmoi apply : $ chezmoi --refresh-externals apply --refresh-externals can be shortened to -R : $ chezmoi -R apply When using Oh My Zsh, make sure you disable auto-updates by setting DISABLE_AUTO_UPDATE=\"true\" in ~/.zshrc . Auto updates will cause the ~/.oh-my-zsh directory to drift out of sync with chezmoi's source state. To update Oh My Zsh and its plugins, refresh the downloaded archives.","title":"Include a subdirectory from a URL"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-with-selected-files-from-a-url","text":"Use include pattern filters to include only selected files from an archive URL. For example, to import just the required source files of the zsh-syntax-highlighting plugin in the example above, add in include filter to the zsh-syntax-highlighting section as shown below: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"] type = \"archive\" url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\" exact = true stripComponents = 1 refreshPeriod = \"168h\" include = [ \"*/*.zsh\" , \"*/.version\" , \"*/.revision-hash\" , \"*/highlighters/**\" ]","title":"Include a subdirectory with selected files from a URL"},{"location":"user-guide/include-files-from-elsewhere/#include-a-single-file-from-a-url","text":"Including single files uses the same mechanism as including a subdirectory above, except with the external type file instead of archive . For example, to include plug.vim from github.com/junegunn/vim-plug in ~/.vim/autoload/plug.vim put the following in ~/.local/share/chezmoi/.chezmoiexternal.toml : ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/autoload/plug.vim\"] type = \"file\" url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" refreshPeriod = \"168h\"","title":"Include a single file from a URL"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-from-a-git-repository","text":"You can configure chezmoi to keep a git repository up to date in a subdirectory by using the external type git-repo , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" If the directory does not exist then chezmoi will run git clone to clone it. If the directory does exist then chezmoi will run git pull to pull the latest changes, but not more often than every refreshPeriod . In the above example the refreshPeriod is 168h which is one week. The default refreshPeriod is zero, which disables refreshes. You can force a refresh (i.e. force a git pull ) by passing the --refresh-externals / -R flag to chezmoi apply . You can customize the arguments to git clone and git pull by setting the $DIR.clone.args and $DIR.pull.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml [\".vim/pack/alker0/chezmoi.vim\"] type = \"git-repo\" url = \"https://github.com/alker0/chezmoi.vim.git\" refreshPeriod = \"168h\" [\".vim/pack/alker0/chezmoi.vim\".pull] args = [ \"--ff-only\" ] Note chezmoi's support for git-repo externals is limited to running git clone and/or git pull in a directory. The contents of git-repo externals are not manifested in commands like chezmoi archive or chezmoi dump . Note chezmoi's support for git-repo externals currently requires git to be in your $PATH .","title":"Include a subdirectory from a git repository"},{"location":"user-guide/include-files-from-elsewhere/#extract-a-single-file-from-an-archive","text":"You can extract a single file from an archive using the $ENTRY.filter.command and $ENTRY.filter.args variables in .chezmoiexternal.$FORMAT , for example: ~/.local/share/chezmoi/.chezmoiexternal.toml {{ $ ageVersion : = \"1.0.0\" - }} [\".local/bin/age\"] type = \"file\" url = \"https://github.com/FiloSottile/age/releases/download/v{{ $ageVersion }}/age-v{{ $ageVersion }}-{{ .chezmoi.os }}-{{ .chezmoi.arch }}.tar.gz\" executable = true refreshPeriod = \"168h\" [\".local/bin/age\".filter] command = \"tar\" args = [ \"--extract\" , \"--file\" , \"/dev/stdin\" , \"--gzip\" , \"--to-stdout\" , \"age/age\" ] This will extract the single archive member age/age from the given URL (which is computed for the current OS and architecture) to the target ./local/bin/age and set its executable bit.","title":"Extract a single file from an archive"},{"location":"user-guide/include-files-from-elsewhere/#import-archives","text":"It is occasionally useful to import entire archives of configuration into your source state. The import command does this. For example, to import the latest version github.com/ohmyzsh/ohmyzsh to ~/.oh-my-zsh run: $ curl -s -L -o ${ TMPDIR } /oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz $ mkdir -p $( chezmoi source-path ) /dot_oh-my-zsh $ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${ TMPDIR } /oh-my-zsh-master.tar.gz Note This only updates the source state. You will need to run: $ chezmoi apply to update your destination directory.","title":"Import archives"},{"location":"user-guide/manage-different-types-of-file/","text":"Manage different types of file Have chezmoi create a directory, but ignore its contents If you want chezmoi to create a directory, but ignore its contents, say ~/src , first run: $ mkdir -p $( chezmoi source-path ) /src This creates the directory in the source state, which means that chezmoi will create it (if it does not already exist) when you run chezmoi apply . However, as this is an empty directory it will be ignored by git. So, create a file in the directory in the source state that will be seen by git (so git does not ignore the directory) but ignored by chezmoi (so chezmoi does not include it in the target state): $ touch $( chezmoi source-path ) /src/.keep chezmoi automatically creates .keep files when you add an empty directory with chezmoi add . Ensure that a target is removed Create a file called .chezmoiremove in the source directory containing a list of patterns of files to remove. chezmoi will remove anything in the target directory that matches the pattern. As this command is potentially dangerous, you should run chezmoi in verbose, dry-run mode beforehand to see what would be removed: $ chezmoi apply --dry-run --verbose .chezmoiremove is interpreted as a template, so you can remove different files on different machines. Negative matches (patterns prefixed with a ! ) or targets listed in .chezmoiignore will never be removed. Manage part, but not all, of a file chezmoi, by default, manages whole files, but there are two ways to manage just parts of a file. Firstly, a modify_ script receives the current contents of the file on the standard input and chezmoi reads the target contents of the file from the script's standard output. This can be used to change parts of a file, for example using sed . Hint If you need random access to the file to modify it, then you can write standard input to a temporary file, modify the temporary file, and then write the temporary file to the standard output, for example: #!/bin/sh tempfile = \" $( mktemp ) \" trap 'rm -rf \"${tempfile}\"' EXIT cat > \" ${ tempfile } \" # modify ${tempfile} cat \" ${ tempfile } \" Note If the file does not exist then the standard input to the modify_ script will be empty and it is the script's responsibility to write a complete file to the standard output. modify_ scripts that contain the string chezmoi:modify-template are executed as templates with the current contents of the file passed as .chezmoi.stdin and the result of the template execution used as the new contents of the file. Example To replace the string old with new in a file while leaving the rest of the file unchanged, use the modify script: {{- /* chezmoi:modify-template */ -}} {{- .chezmoi.stdin | replaceAllRegex \"old\" \"new\" }} To set individual values in JSON, TOML, and YAML files you can use the setValueAtPath template function, for example: {{- /* chezmoi:modify-template */ -}} {{ fromJson .chezmoi.stdin | setValueAtPath \"key.nestedKey\" \"value\" | toPrettyJson }} Warning Modify templates must not have a .tmpl extension. Secondly, if only a small part of the file changes then consider using a template to re-generate the full contents of the file from the current state. For example, Kubernetes configurations include a current context that can be substituted with: ~/.local/share/chezmoi/dot_kube/config.tmpl current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }} Hint For managing ini files with a mix of settings and state (such as recently used files or window positions), there is a third party tool called chezmoi_modify_manager that builds upon modify_ scripts. See related software for more information. Manage a file's permissions, but not its contents chezmoi's create_ attributes allows you to tell chezmoi to create a file if it does not already exist. chezmoi, however, will apply any permission changes from the executable_ , private_ , and readonly_ attributes. This can be used to control a file's permissions without altering its contents. For example, if you want to ensure that ~/.kube/config always has permissions 600 then if you create an empty file called dot_kube/private_config in your source state, chezmoi will ensure ~/.kube/config 's permissions are 0600 when you run chezmoi apply without changing its contents. This approach does have the downside that chezmoi will create the file if it does not already exist. If you only want chezmoi apply to set a file's permissions if it already exists and not create the file otherwise, you can use a run_ script. For example, create a file in your source state called run_set_kube_config_permissions.sh containing: #!/bin/sh FILE = \" $HOME /.kube/config\" if [ -f \" $FILE \" ] ; then if [ \" $( stat -c %a \" $FILE \" ) \" ! = \"600\" ] ; then chmod 600 \" $FILE \" fi fi Handle configuration files which are externally modified Some programs modify their configuration files. When you next run chezmoi apply , any modifications made by the program will be lost. You can track changes to these files by replacing with a symlink back to a file in your source directory, which is under version control. Here is a worked example for VSCode's settings.json on Linux: Copy the configuration file to your source directory: $ cp ~/.config/Code/User/settings.json $( chezmoi source-path ) Tell chezmoi to ignore this file: $ echo settings.json >> $( chezmoi source-path ) /.chezmoiignore Tell chezmoi that ~/.config/Code/User/settings.json should be a symlink to the file in your source directory: $ mkdir -p $( chezmoi source-path ) /private_dot_config/private_Code/User $ echo -n \"{{ .chezmoi.sourceDir }}/settings.json\" > $( chezmoi source-path ) /private_dot_config/private_Code/User/symlink_settings.json.tmpl The prefix private_ is used because the ~/.config and ~/.config/Code directories are private by default. Apply the changes: $ chezmoi apply -v Now, when the program modifies its configuration file it will modify the file in the source state instead. Populate ~/.ssh/authorized_keys with your public SSH keys from GitHub chezmoi can retrieve your public SSH keys from GitHub, which can be useful for populating your ~/.ssh/authorized_keys . Put the following in your ~/.local/share/chezmoi/dot_ssh/authorized_keys.tmpl : {{ range gitHubKeys \"$GITHUB_USERNAME\" -}} {{ .Key }} {{ end -}}","title":"Manage different types of file"},{"location":"user-guide/manage-different-types-of-file/#manage-different-types-of-file","text":"","title":"Manage different types of file"},{"location":"user-guide/manage-different-types-of-file/#have-chezmoi-create-a-directory-but-ignore-its-contents","text":"If you want chezmoi to create a directory, but ignore its contents, say ~/src , first run: $ mkdir -p $( chezmoi source-path ) /src This creates the directory in the source state, which means that chezmoi will create it (if it does not already exist) when you run chezmoi apply . However, as this is an empty directory it will be ignored by git. So, create a file in the directory in the source state that will be seen by git (so git does not ignore the directory) but ignored by chezmoi (so chezmoi does not include it in the target state): $ touch $( chezmoi source-path ) /src/.keep chezmoi automatically creates .keep files when you add an empty directory with chezmoi add .","title":"Have chezmoi create a directory, but ignore its contents"},{"location":"user-guide/manage-different-types-of-file/#ensure-that-a-target-is-removed","text":"Create a file called .chezmoiremove in the source directory containing a list of patterns of files to remove. chezmoi will remove anything in the target directory that matches the pattern. As this command is potentially dangerous, you should run chezmoi in verbose, dry-run mode beforehand to see what would be removed: $ chezmoi apply --dry-run --verbose .chezmoiremove is interpreted as a template, so you can remove different files on different machines. Negative matches (patterns prefixed with a ! ) or targets listed in .chezmoiignore will never be removed.","title":"Ensure that a target is removed"},{"location":"user-guide/manage-different-types-of-file/#manage-part-but-not-all-of-a-file","text":"chezmoi, by default, manages whole files, but there are two ways to manage just parts of a file. Firstly, a modify_ script receives the current contents of the file on the standard input and chezmoi reads the target contents of the file from the script's standard output. This can be used to change parts of a file, for example using sed . Hint If you need random access to the file to modify it, then you can write standard input to a temporary file, modify the temporary file, and then write the temporary file to the standard output, for example: #!/bin/sh tempfile = \" $( mktemp ) \" trap 'rm -rf \"${tempfile}\"' EXIT cat > \" ${ tempfile } \" # modify ${tempfile} cat \" ${ tempfile } \" Note If the file does not exist then the standard input to the modify_ script will be empty and it is the script's responsibility to write a complete file to the standard output. modify_ scripts that contain the string chezmoi:modify-template are executed as templates with the current contents of the file passed as .chezmoi.stdin and the result of the template execution used as the new contents of the file. Example To replace the string old with new in a file while leaving the rest of the file unchanged, use the modify script: {{- /* chezmoi:modify-template */ -}} {{- .chezmoi.stdin | replaceAllRegex \"old\" \"new\" }} To set individual values in JSON, TOML, and YAML files you can use the setValueAtPath template function, for example: {{- /* chezmoi:modify-template */ -}} {{ fromJson .chezmoi.stdin | setValueAtPath \"key.nestedKey\" \"value\" | toPrettyJson }} Warning Modify templates must not have a .tmpl extension. Secondly, if only a small part of the file changes then consider using a template to re-generate the full contents of the file from the current state. For example, Kubernetes configurations include a current context that can be substituted with: ~/.local/share/chezmoi/dot_kube/config.tmpl current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }} Hint For managing ini files with a mix of settings and state (such as recently used files or window positions), there is a third party tool called chezmoi_modify_manager that builds upon modify_ scripts. See related software for more information.","title":"Manage part, but not all, of a file"},{"location":"user-guide/manage-different-types-of-file/#manage-a-files-permissions-but-not-its-contents","text":"chezmoi's create_ attributes allows you to tell chezmoi to create a file if it does not already exist. chezmoi, however, will apply any permission changes from the executable_ , private_ , and readonly_ attributes. This can be used to control a file's permissions without altering its contents. For example, if you want to ensure that ~/.kube/config always has permissions 600 then if you create an empty file called dot_kube/private_config in your source state, chezmoi will ensure ~/.kube/config 's permissions are 0600 when you run chezmoi apply without changing its contents. This approach does have the downside that chezmoi will create the file if it does not already exist. If you only want chezmoi apply to set a file's permissions if it already exists and not create the file otherwise, you can use a run_ script. For example, create a file in your source state called run_set_kube_config_permissions.sh containing: #!/bin/sh FILE = \" $HOME /.kube/config\" if [ -f \" $FILE \" ] ; then if [ \" $( stat -c %a \" $FILE \" ) \" ! = \"600\" ] ; then chmod 600 \" $FILE \" fi fi","title":"Manage a file's permissions, but not its contents"},{"location":"user-guide/manage-different-types-of-file/#handle-configuration-files-which-are-externally-modified","text":"Some programs modify their configuration files. When you next run chezmoi apply , any modifications made by the program will be lost. You can track changes to these files by replacing with a symlink back to a file in your source directory, which is under version control. Here is a worked example for VSCode's settings.json on Linux: Copy the configuration file to your source directory: $ cp ~/.config/Code/User/settings.json $( chezmoi source-path ) Tell chezmoi to ignore this file: $ echo settings.json >> $( chezmoi source-path ) /.chezmoiignore Tell chezmoi that ~/.config/Code/User/settings.json should be a symlink to the file in your source directory: $ mkdir -p $( chezmoi source-path ) /private_dot_config/private_Code/User $ echo -n \"{{ .chezmoi.sourceDir }}/settings.json\" > $( chezmoi source-path ) /private_dot_config/private_Code/User/symlink_settings.json.tmpl The prefix private_ is used because the ~/.config and ~/.config/Code directories are private by default. Apply the changes: $ chezmoi apply -v Now, when the program modifies its configuration file it will modify the file in the source state instead.","title":"Handle configuration files which are externally modified"},{"location":"user-guide/manage-different-types-of-file/#populate-sshauthorized_keys-with-your-public-ssh-keys-from-github","text":"chezmoi can retrieve your public SSH keys from GitHub, which can be useful for populating your ~/.ssh/authorized_keys . Put the following in your ~/.local/share/chezmoi/dot_ssh/authorized_keys.tmpl : {{ range gitHubKeys \"$GITHUB_USERNAME\" -}} {{ .Key }} {{ end -}}","title":"Populate ~/.ssh/authorized_keys with your public SSH keys from GitHub"},{"location":"user-guide/manage-machine-to-machine-differences/","text":"Manage machine-to-machine differences Use templates The primary goal of chezmoi is to manage configuration files across multiple machines, for example your personal macOS laptop, your work Ubuntu desktop, and your work Linux laptop. You will want to keep much configuration the same across these, but also need machine-specific configurations for email addresses, credentials, etc. chezmoi achieves this functionality by using text/template for the source state where needed. For example, your home ~/.gitconfig on your personal machine might look like: ~/.gitconfig [user] email = \"me@home.org\" Whereas at work it might be: ~/.gitconfig [user] email = \"firstname.lastname@company.com\" To handle this, on each machine create a configuration file called ~/.config/chezmoi/chezmoi.toml defining variables that might vary from machine to machine. For example, for your home machine: ~/.config/chezmoi/chezmoi.toml [data] email = \"me@home.org\" If you intend to store private data (e.g. access tokens) in ~/.config/chezmoi/chezmoi.toml , make sure it has permissions 0600 . If you prefer, you can use JSON or YAML for your configuration file. Variable names must start with a letter and be followed by zero or more letters or digits. Then, add ~/.gitconfig to chezmoi using the --autotemplate flag to turn it into a template and automatically detect variables from the data section of your ~/.config/chezmoi/chezmoi.toml file: $ chezmoi add --autotemplate ~/.gitconfig You can then open the template (which will be saved in the file ~/.local/share/chezmoi/dot_gitconfig.tmpl ): $ chezmoi edit ~/.gitconfig The file should look something like: ~/.local/share/chezmoi/dot_gitconfig.tmpl [user] email = {{ . email | quote }} To disable automatic variable detection, use the --template or -T option to chezmoi add instead of --autotemplate . Templates are often used to capture machine-specific differences. For example, in your ~/.local/share/chezmoi/dot_bashrc.tmpl you might have: ~/.local/share/chezmoi/dot_bashrc.tmpl # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} For a full list of variables, run: $ chezmoi data For more advanced usage, you can use the full power of the text/template language. chezmoi includes all of the text functions from sprig and its own functions for interacting with password managers . Templates can be executed directly from the command line, without the need to create a file on disk, with the execute-template command, for example: $ chezmoi execute-template \"{{ .chezmoi.os }}/{{ .chezmoi.arch }}\" This is useful when developing or debugging templates. Some password managers allow you to store complete files. The files can be retrieved with chezmoi's template functions. For example, if you have a file stored in 1Password with the UUID uuid then you can retrieve it with the template: {{- onepasswordDocument \"uuid\" -}} The - s inside the brackets remove any whitespace before or after the template expression, which is useful if your editor has added any newlines. If, after executing the template, the file contents are empty, the target file will be removed. This can be used to ensure that files are only present on certain machines. If you want an empty file to be created anyway, you will need to give it an empty_ prefix. Ignore files or a directory on different machines For coarser-grained control of files and entire directories managed on different machines, or to exclude certain files completely, you can create .chezmoiignore files in the source directory. These specify a list of patterns that chezmoi should ignore, and are interpreted as templates. An example .chezmoiignore file might look like: ~/.local/share/chezmoi/.chezmoiignore README.md {{- if ne .chezmoi.hostname \"work-laptop\" }} .work # only manage .work on work-laptop {{- end }} The use of ne (not equal) is deliberate. What we want to achieve is \"only install .work if hostname is work-laptop \" but chezmoi installs everything by default, so we have to turn the logic around and instead write \"ignore .work unless the hostname is work-laptop \". Patterns can be excluded by prefixing them with a ! , for example: ~/.local/share/chezmoi/.chezmoiignore f* !foo will ignore all files beginning with an f except foo . You can see what files chezmoi ignores with the command $ chezmoi ignored Handle different file locations on different systems with the same contents If you want to have the same file contents in different locations on different systems, but maintain only a single file in your source state, you can use a shared template. Create the common file in the .chezmoitemplates directory in the source state. For example, create .chezmoitemplates/file.conf . The contents of this file are available in templates with the template $NAME . function where $NAME is the name of the file ( . passes the current data to the template code in file.conf ; see https://pkg.go.dev/text/template#hdr-Actions for details). Then create files for each system, for example Library/Application Support/App/file.conf.tmpl for macOS and dot_config/app/file.conf.tmpl for Linux. Both template files should contain {{- template \"file.conf\" . -}} . Finally, tell chezmoi to ignore files where they are not needed by adding lines to your .chezmoiignore file, for example: ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} Library/Application Support/App/file.conf {{ end }} {{ if ne .chezmoi.os \"linux\" }} .config/app/file.conf {{ end }} Use completely different dotfiles on different machines chezmoi's template functionality allows you to change a file's contents based on any variable. For example, if you want ~/.bashrc to be different on Linux and macOS you would create a file in the source state called dot_bashrc.tmpl containing: ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" -}} # macOS .bashrc contents {{ else if eq .chezmoi.os \"linux\" -}} # Linux .bashrc contents {{ end -}} However, if the differences between the two versions are so large that you'd prefer to use completely separate files in the source state, you can achieve this using a symbolic link template. Create the following files: ~/.local/share/chezmoi/symlink_dot_bashrc.tmpl .bashrc_{{ .chezmoi.os }} ~/.local/share/chezmoi/dot_bashrc_darwin # macOS .bashrc contents ~/.local/share/chezmoi/dot_bashrc_linux # Linux .bashrc contents ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} .bashrc_darwin {{ end }} {{ if ne .chezmoi.os \"linux\" }} .bashrc_linux {{ end }} This will make ~/.bashrc a symlink to .bashrc_darwin on darwin and to .bashrc_linux on linux . The .chezmoiignore configuration ensures that only the OS-specific .bashrc_os file will be installed on each OS. Without using symlinks The same thing can be achieved using the include function. ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" }} {{ include \".bashrc_darwin\" }} {{ end }} {{ if eq .chezmoi.os \"linux\" }} {{ include \".bashrc_linux\" }} {{ end }}","title":"Manage machine-to-machine differences"},{"location":"user-guide/manage-machine-to-machine-differences/#manage-machine-to-machine-differences","text":"","title":"Manage machine-to-machine differences"},{"location":"user-guide/manage-machine-to-machine-differences/#use-templates","text":"The primary goal of chezmoi is to manage configuration files across multiple machines, for example your personal macOS laptop, your work Ubuntu desktop, and your work Linux laptop. You will want to keep much configuration the same across these, but also need machine-specific configurations for email addresses, credentials, etc. chezmoi achieves this functionality by using text/template for the source state where needed. For example, your home ~/.gitconfig on your personal machine might look like: ~/.gitconfig [user] email = \"me@home.org\" Whereas at work it might be: ~/.gitconfig [user] email = \"firstname.lastname@company.com\" To handle this, on each machine create a configuration file called ~/.config/chezmoi/chezmoi.toml defining variables that might vary from machine to machine. For example, for your home machine: ~/.config/chezmoi/chezmoi.toml [data] email = \"me@home.org\" If you intend to store private data (e.g. access tokens) in ~/.config/chezmoi/chezmoi.toml , make sure it has permissions 0600 . If you prefer, you can use JSON or YAML for your configuration file. Variable names must start with a letter and be followed by zero or more letters or digits. Then, add ~/.gitconfig to chezmoi using the --autotemplate flag to turn it into a template and automatically detect variables from the data section of your ~/.config/chezmoi/chezmoi.toml file: $ chezmoi add --autotemplate ~/.gitconfig You can then open the template (which will be saved in the file ~/.local/share/chezmoi/dot_gitconfig.tmpl ): $ chezmoi edit ~/.gitconfig The file should look something like: ~/.local/share/chezmoi/dot_gitconfig.tmpl [user] email = {{ . email | quote }} To disable automatic variable detection, use the --template or -T option to chezmoi add instead of --autotemplate . Templates are often used to capture machine-specific differences. For example, in your ~/.local/share/chezmoi/dot_bashrc.tmpl you might have: ~/.local/share/chezmoi/dot_bashrc.tmpl # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} For a full list of variables, run: $ chezmoi data For more advanced usage, you can use the full power of the text/template language. chezmoi includes all of the text functions from sprig and its own functions for interacting with password managers . Templates can be executed directly from the command line, without the need to create a file on disk, with the execute-template command, for example: $ chezmoi execute-template \"{{ .chezmoi.os }}/{{ .chezmoi.arch }}\" This is useful when developing or debugging templates. Some password managers allow you to store complete files. The files can be retrieved with chezmoi's template functions. For example, if you have a file stored in 1Password with the UUID uuid then you can retrieve it with the template: {{- onepasswordDocument \"uuid\" -}} The - s inside the brackets remove any whitespace before or after the template expression, which is useful if your editor has added any newlines. If, after executing the template, the file contents are empty, the target file will be removed. This can be used to ensure that files are only present on certain machines. If you want an empty file to be created anyway, you will need to give it an empty_ prefix.","title":"Use templates"},{"location":"user-guide/manage-machine-to-machine-differences/#ignore-files-or-a-directory-on-different-machines","text":"For coarser-grained control of files and entire directories managed on different machines, or to exclude certain files completely, you can create .chezmoiignore files in the source directory. These specify a list of patterns that chezmoi should ignore, and are interpreted as templates. An example .chezmoiignore file might look like: ~/.local/share/chezmoi/.chezmoiignore README.md {{- if ne .chezmoi.hostname \"work-laptop\" }} .work # only manage .work on work-laptop {{- end }} The use of ne (not equal) is deliberate. What we want to achieve is \"only install .work if hostname is work-laptop \" but chezmoi installs everything by default, so we have to turn the logic around and instead write \"ignore .work unless the hostname is work-laptop \". Patterns can be excluded by prefixing them with a ! , for example: ~/.local/share/chezmoi/.chezmoiignore f* !foo will ignore all files beginning with an f except foo . You can see what files chezmoi ignores with the command $ chezmoi ignored","title":"Ignore files or a directory on different machines"},{"location":"user-guide/manage-machine-to-machine-differences/#handle-different-file-locations-on-different-systems-with-the-same-contents","text":"If you want to have the same file contents in different locations on different systems, but maintain only a single file in your source state, you can use a shared template. Create the common file in the .chezmoitemplates directory in the source state. For example, create .chezmoitemplates/file.conf . The contents of this file are available in templates with the template $NAME . function where $NAME is the name of the file ( . passes the current data to the template code in file.conf ; see https://pkg.go.dev/text/template#hdr-Actions for details). Then create files for each system, for example Library/Application Support/App/file.conf.tmpl for macOS and dot_config/app/file.conf.tmpl for Linux. Both template files should contain {{- template \"file.conf\" . -}} . Finally, tell chezmoi to ignore files where they are not needed by adding lines to your .chezmoiignore file, for example: ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} Library/Application Support/App/file.conf {{ end }} {{ if ne .chezmoi.os \"linux\" }} .config/app/file.conf {{ end }}","title":"Handle different file locations on different systems with the same contents"},{"location":"user-guide/manage-machine-to-machine-differences/#use-completely-different-dotfiles-on-different-machines","text":"chezmoi's template functionality allows you to change a file's contents based on any variable. For example, if you want ~/.bashrc to be different on Linux and macOS you would create a file in the source state called dot_bashrc.tmpl containing: ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" -}} # macOS .bashrc contents {{ else if eq .chezmoi.os \"linux\" -}} # Linux .bashrc contents {{ end -}} However, if the differences between the two versions are so large that you'd prefer to use completely separate files in the source state, you can achieve this using a symbolic link template. Create the following files: ~/.local/share/chezmoi/symlink_dot_bashrc.tmpl .bashrc_{{ .chezmoi.os }} ~/.local/share/chezmoi/dot_bashrc_darwin # macOS .bashrc contents ~/.local/share/chezmoi/dot_bashrc_linux # Linux .bashrc contents ~/.local/share/chezmoi/.chezmoiignore {{ if ne .chezmoi.os \"darwin\" }} .bashrc_darwin {{ end }} {{ if ne .chezmoi.os \"linux\" }} .bashrc_linux {{ end }} This will make ~/.bashrc a symlink to .bashrc_darwin on darwin and to .bashrc_linux on linux . The .chezmoiignore configuration ensures that only the OS-specific .bashrc_os file will be installed on each OS.","title":"Use completely different dotfiles on different machines"},{"location":"user-guide/manage-machine-to-machine-differences/#without-using-symlinks","text":"The same thing can be achieved using the include function. ~/.local/share/chezmoi/dot_bashrc.tmpl {{ if eq .chezmoi.os \"darwin\" }} {{ include \".bashrc_darwin\" }} {{ end }} {{ if eq .chezmoi.os \"linux\" }} {{ include \".bashrc_linux\" }} {{ end }}","title":"Without using symlinks"},{"location":"user-guide/setup/","text":"Setup Understand chezmoi's files and directories chezmoi generates your dotfiles for your local machine. It combines two main sources of data: The source directory , ~/.local/share/chezmoi , is common to all your machines, and is a clone of your dotfiles repo. Each file that chezmoi manages has a corresponding file in the source directory. The config file , typically ~/.config/chezmoi/chezmoi.toml (although you can use JSON or YAML if you prefer), is specific to the local machine. Files whose contents are the same on all of your machines are copied verbatim from the source directory. Files which vary from machine to machine are executed as templates, typically using data from the local machine's config file to tune the final contents specific to the local machine. Use a hosted repo to manage your dotfiles across multiple machines chezmoi relies on your version control system and hosted repo to share changes across multiple machines. You should create a repo on the source code repository of your choice (e.g. Bitbucket , GitHub , or GitLab , many people call their repo dotfiles ) and push the repo in the source directory here. For example: $ chezmoi cd $ git remote add origin https://github.com/ $GITHUB_USERNAME /dotfiles.git $ git push -u origin main $ exit On another machine you can checkout this repo: $ chezmoi init https://github.com/ $GITHUB_USERNAME /dotfiles.git You can then see what would be changed: $ chezmoi diff If you're happy with the changes then apply them: $ chezmoi apply The above commands can be combined into a single init, checkout, and apply: $ chezmoi init --apply --verbose https://github.com/ $GITHUB_USERNAME /dotfiles.git These commands are summarized this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply R->>H: chezmoi init --apply <repo> Use a private repo to store your dotfiles chezmoi supports storing your dotfiles in both public and private repos. chezmoi is designed so that your dotfiles repo can be public by making it easy for you to store your secrets either in your password manager, in encrypted files, or in private configuration files. Your dotfiles repo can still be private, if you choose. If you use a private repo for your dotfiles then you will typically need to enter your credentials (e.g. your username and password) each time you interact with the repo, for example when pulling or pushing changes. chezmoi itself does not store any credentials, but instead relies on your local git configuration for these operations. When using a private repo on GitHub without --ssh , when prompted for a password you will need to enter a GitHub personal access token . For more information on these changes, read the GitHub blog post on Token authentication requirements for Git operations Create a config file on a new machine automatically chezmoi init can also create a config file automatically, if one does not already exist. If your repo contains a file called .chezmoi.$FORMAT.tmpl where $FORMAT is one of the supported config file formats (e.g. json , toml , or yaml ) then chezmoi init will execute that template to generate your initial config file. Specifically, if you have .chezmoi.toml.tmpl that looks like this: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{- $email := promptStringOnce . \"email\" \"Email address\" -}} [data] email = {{ $email | quote }} Then chezmoi init will create an initial chezmoi.toml using this template. promptStringOnce is a special function that prompts the user (you) for a value if it is not already set in your data . To test this template, use chezmoi execute-template with the --init and --promptString flags, for example: $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl Re-create your config file If you change your config file template, chezmoi will warn you if your current config file was not generated from that template. You can re-generate your config file by running: $ chezmoi init If you are using any prompt* template functions in your config file template you will be prompted again. However, you can avoid this with the following example template logic: {{- $email := promptStringOnce . \"email\" \"Email address\" -}} [data] email = {{ $email | quote }} This will cause chezmoi use the email variable from your data and fallback to promptString only if it is not set.","title":"Setup"},{"location":"user-guide/setup/#setup","text":"","title":"Setup"},{"location":"user-guide/setup/#understand-chezmois-files-and-directories","text":"chezmoi generates your dotfiles for your local machine. It combines two main sources of data: The source directory , ~/.local/share/chezmoi , is common to all your machines, and is a clone of your dotfiles repo. Each file that chezmoi manages has a corresponding file in the source directory. The config file , typically ~/.config/chezmoi/chezmoi.toml (although you can use JSON or YAML if you prefer), is specific to the local machine. Files whose contents are the same on all of your machines are copied verbatim from the source directory. Files which vary from machine to machine are executed as templates, typically using data from the local machine's config file to tune the final contents specific to the local machine.","title":"Understand chezmoi's files and directories"},{"location":"user-guide/setup/#use-a-hosted-repo-to-manage-your-dotfiles-across-multiple-machines","text":"chezmoi relies on your version control system and hosted repo to share changes across multiple machines. You should create a repo on the source code repository of your choice (e.g. Bitbucket , GitHub , or GitLab , many people call their repo dotfiles ) and push the repo in the source directory here. For example: $ chezmoi cd $ git remote add origin https://github.com/ $GITHUB_USERNAME /dotfiles.git $ git push -u origin main $ exit On another machine you can checkout this repo: $ chezmoi init https://github.com/ $GITHUB_USERNAME /dotfiles.git You can then see what would be changed: $ chezmoi diff If you're happy with the changes then apply them: $ chezmoi apply The above commands can be combined into a single init, checkout, and apply: $ chezmoi init --apply --verbose https://github.com/ $GITHUB_USERNAME /dotfiles.git These commands are summarized this sequence diagram: sequenceDiagram participant H as home directory participant W as working copy participant L as local repo participant R as remote repo R->>W: chezmoi init <repo> W-->>H: chezmoi diff W->>H: chezmoi apply R->>H: chezmoi init --apply <repo>","title":"Use a hosted repo to manage your dotfiles across multiple machines"},{"location":"user-guide/setup/#use-a-private-repo-to-store-your-dotfiles","text":"chezmoi supports storing your dotfiles in both public and private repos. chezmoi is designed so that your dotfiles repo can be public by making it easy for you to store your secrets either in your password manager, in encrypted files, or in private configuration files. Your dotfiles repo can still be private, if you choose. If you use a private repo for your dotfiles then you will typically need to enter your credentials (e.g. your username and password) each time you interact with the repo, for example when pulling or pushing changes. chezmoi itself does not store any credentials, but instead relies on your local git configuration for these operations. When using a private repo on GitHub without --ssh , when prompted for a password you will need to enter a GitHub personal access token . For more information on these changes, read the GitHub blog post on Token authentication requirements for Git operations","title":"Use a private repo to store your dotfiles"},{"location":"user-guide/setup/#create-a-config-file-on-a-new-machine-automatically","text":"chezmoi init can also create a config file automatically, if one does not already exist. If your repo contains a file called .chezmoi.$FORMAT.tmpl where $FORMAT is one of the supported config file formats (e.g. json , toml , or yaml ) then chezmoi init will execute that template to generate your initial config file. Specifically, if you have .chezmoi.toml.tmpl that looks like this: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{- $email := promptStringOnce . \"email\" \"Email address\" -}} [data] email = {{ $email | quote }} Then chezmoi init will create an initial chezmoi.toml using this template. promptStringOnce is a special function that prompts the user (you) for a value if it is not already set in your data . To test this template, use chezmoi execute-template with the --init and --promptString flags, for example: $ chezmoi execute-template --init --promptString email = me@home.org < ~/.local/share/chezmoi/.chezmoi.toml.tmpl","title":"Create a config file on a new machine automatically"},{"location":"user-guide/setup/#re-create-your-config-file","text":"If you change your config file template, chezmoi will warn you if your current config file was not generated from that template. You can re-generate your config file by running: $ chezmoi init If you are using any prompt* template functions in your config file template you will be prompted again. However, you can avoid this with the following example template logic: {{- $email := promptStringOnce . \"email\" \"Email address\" -}} [data] email = {{ $email | quote }} This will cause chezmoi use the email variable from your data and fallback to promptString only if it is not set.","title":"Re-create your config file"},{"location":"user-guide/templating/","text":"Templating Introduction Templates are used to change the contents of a file depending on the environment. For example, you can use the hostname of the machine to create different configurations on different machines. chezmoi uses the text/template syntax from Go extended with text template functions from sprig . When reading files from the source state, chezmoi interprets them as a template if either of the following is true: The file name has a .tmpl suffix. The file is in the .chezmoitemplates directory, or a subdirectory of .chezmoitemplates . Template data chezmoi provides a variety of template variables. For a full list, run $ chezmoi data These come from a variety of sources (later data overwrite earlier ones): Variables populated by chezmoi are in .chezmoi , for example .chezmoi.os . Variables created by you in the .chezmoidata.$FORMAT configuration file. The various supported formats (json, toml and yaml) are read in alphabetical order. Variables created by you in the data section of the configuration file. Furthermore, chezmoi provides a variety of functions to retrieve data at runtime from password managers, environment variables, and the filesystem. Creating a template file There are several ways to create a template: When adding a file for the first time, pass the --template argument, for example: $ chezmoi add --template ~/.zshrc When adding a file for the first time, you can pass the --autotemplate argument, which tells chezmoi to make the file as a template and automatically replace variables that chezmoi knows about, for example: $ chezmoi add --autotemplate ~/.zshrc If a file is already managed by chezmoi, but is not a template, you can make it a template by running, for example: $ chezmoi chattr +template ~/.zshrc You can create a template manually in the source directory by giving it a .tmpl extension, for example: $ chezmoi cd $ $EDITOR dot_zshrc.tmpl Templates in .chezmoitemplates must be created manually, for example: $ chezmoi cd $ mkdir -p .chezmoitemplates $ cd .chezmoitemplates $ $EDITOR mytemplate Editing a template file The easiest way to edit a template is to use chezmoi edit , for example: $ chezmoi edit ~/.zshrc This will open the source file for ~/.zshrc in $EDITOR . When you quit the editor, chezmoi will check the template syntax. If you want the changes you make to be immediately applied after you quit the editor, use the --apply option, for example: $ chezmoi edit --apply ~/.zshrc Testing templates Templates can be tested with the chezmoi execute-template command which treats each of its arguments as a template and executes it. This can be useful for testing small fragments of templates, for example: $ chezmoi execute-template '{{ .chezmoi.hostname }}' If there are no arguments, chezmoi execute-template will read the template from the standard input. This can be useful for testing whole files, for example: $ chezmoi cd $ chezmoi execute-template < dot_zshrc.tmpl Template syntax Template actions are written inside double curly brackets, {{ and }} . Actions can be variables, pipelines, or control statements. Text outside actions is copied literally. Variables are written literally, for example: {{ .chezmoi.hostname }} Conditional expressions can be written using if , else if , else , and end , for example: {{ if eq .chezmoi.os \"darwin\" }} # darwin {{ else if eq .chezmoi.os \"linux\" }} # linux {{ else }} # other operating system {{ end }} For a full description of the template syntax, see the text/template documentation . Removing whitespace For formatting reasons you might want to leave some whitespace after or before the template code. This whitespace will remain in the final file, which you might not want. A solution for this is to place a minus sign and a space next to the brackets. So {{- for the left brackets and -}} for the right brackets. Here's an example: HOSTNAME={{- .chezmoi.hostname }} This will result in HOSTNAME=myhostname Notice that this will remove any number of tabs, spaces and even newlines and carriage returns. Debugging templates If there is a mistake in one of your templates and you want to debug it, chezmoi can help you. You can use this subcommand to test and play with the examples in these docs as well. There is a very handy subcommand called execute-template . chezmoi will interpret any data coming from stdin or at the end of the command. It will then interpret all templates and output the result to stdout. For example with the command: $ chezmoi execute-template '{{ .chezmoi.os }}/{{ .chezmoi.arch }}' chezmoi will output the current OS and architecture to stdout. You can also feed the contents of a file to this command by typing: $ cat foo.txt | chezmoi execute-template Simple logic A very useful feature of chezmoi templates is the ability to perform logical operations. # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} In this example chezmoi will look at the hostname of the machine and if that is equal to \"work-laptop\", the text between the if and the end will be included in the result. Boolean functions Function Return value eq Returns true if the first argument is equal to any of the other arguments not Returns the boolean negation of its single argument and Returns the boolean AND of its arguments by returning the first empty argument or the last argument, that is, and x y behaves as if x then y else x . All the arguments are evaluated or Returns the boolean OR of its arguments by returning the first non-empty argument or the last argument, that is, or x y behaves as if x then x else y All the arguments are evaluated Integer functions Function Return value len Returns the integer length of its argument eq Returns the boolean truth of arg1 == arg2 ne Returns the boolean truth of arg1 != arg2 lt Returns the boolean truth of arg1 < arg2 le Returns the boolean truth of arg1 <= arg2 gt Returns the boolean truth of arg1 > arg2 ge Returns the boolean truth of arg1 >= arg2 More complicated logic Up until now, we have only seen if statements that can handle at most two variables. In this part we will see how to create more complicated expressions. You can also create more complicated expressions. The eq command can accept multiple arguments. It will check if the first argument is equal to any of the other arguments. {{ if eq \"foo\" \"foo\" \"bar\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"foo\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"bar\" }}hello{{end}} The first two examples will output hello and the last example will output nothing. The operators or and and can also accept multiple arguments. Chaining operators You can perform multiple checks in one if statement. {{ if (and (eq .chezmoi.os \"linux\") (ne .email \"me@home.org\")) }} ... {{ end }} This will check if the operating system is Linux and the configured email is not the home email. The brackets are needed here, because otherwise all the arguments will be give to the and command. This way you can chain as many operators together as you like. Helper functions chezmoi has added multiple helper functions to the text/template syntax. chezmoi includes sprig , an extension to the text/template format that contains many helper functions. Take a look at their documentation for a list. chezmoi adds a few functions of its own as well. Take a look at the reference for complete list. Template variables chezmoi defines a few useful templates variables that depend on the system you are currently on. A list of the variables defined by chezmoi can be found here . There are, however more variables than that. To view the variables available on your system, execute: $ chezmoi data This outputs the variables in JSON format by default. To access the variable chezmoi.kernel.osrelease in a template, use {{ .chezmoi.kernel.osrelease }} This way you can also access the variables you defined yourself. Using .chezmoitemplates Files in the .chezmoitemplates subdirectory are parsed as templates and are available to be included in other templates using the template action with a name equal to their relative path to the .chezmoitemplates directory. By default, such templates will be executed with nil data. If you want to access template variables (e.g. .chezmoi.os ) in the template you must pass the data explicitly. For example: .chezmoitemplates/part.tmpl: {{ if eq .chezmoi.os \"linux\" }} # linux config {{ else }} # non-linux config {{ end }} dot_file.tmpl: {{ template \"part.tmpl\" . }} Using .chezmoitemplates for creating similar files When you have multiple similar files, but they aren't quite the same, you can create a template file in the directory .chezmoitemplates . This template can be inserted in other template files, for example: Create .local/share/chezmoi/.chezmoitemplates/alacritty : some: config fontsize: {{ . }} more: config Notice the file name doesn't have to end in .tmpl , as all files in the directory .chezmoitemplates are interpreted as templates. Create other files using the template ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" 12 -}} ~/.local/share/chezmoi/big-font.yml.tmpl {{- template \"alacritty\" 18 -}} Here we're calling the shared alacritty template with the font size as the . value passed in. You can test this with chezmoi cat : $ chezmoi cat ~/small-font.yml some: config fontsize: 12 more: config $ chezmoi cat ~/big-font.yml some: config fontsize: 18 more: config Passing multiple arguments In the example above only one arguments is passed to the template. To pass more arguments to the template, you can do it in two ways. Via the config file This method is useful if you want to use the same template arguments multiple times, because you don't specify the arguments every time. Instead you specify them in the file ~/.config/chezmoi/chezmoi.toml : ~/.config/chezmoi/chezmoi.toml [data.alacritty.big] fontsize = 18 font = \"DejaVu Serif\" [data.alacritty.small] fontsize = 12 font = \"DejaVu Sans Mono\" Use the variables in ~/.local/share/chezmoi/.chezmoitemplates/alacritty : ~/.local/share/chezmoi/.chezmoitemplates/alacritty some: config fontsize: {{ .fontsize }} font: {{ .font }} more: config And connect them with ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" .alacritty.small -}} At the moment, this means that you'll have to duplicate the alacritty data in the config file on every machine, but a feature will be added to avoid this. By passing a dictionary Using the same alacritty configuration as above, you can pass the arguments to it with a dictionary, for example ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" dict \"fontsize\" 12 \"font\" \"DejaVu Sans Mono\" -}}","title":"Templating"},{"location":"user-guide/templating/#templating","text":"","title":"Templating"},{"location":"user-guide/templating/#introduction","text":"Templates are used to change the contents of a file depending on the environment. For example, you can use the hostname of the machine to create different configurations on different machines. chezmoi uses the text/template syntax from Go extended with text template functions from sprig . When reading files from the source state, chezmoi interprets them as a template if either of the following is true: The file name has a .tmpl suffix. The file is in the .chezmoitemplates directory, or a subdirectory of .chezmoitemplates .","title":"Introduction"},{"location":"user-guide/templating/#template-data","text":"chezmoi provides a variety of template variables. For a full list, run $ chezmoi data These come from a variety of sources (later data overwrite earlier ones): Variables populated by chezmoi are in .chezmoi , for example .chezmoi.os . Variables created by you in the .chezmoidata.$FORMAT configuration file. The various supported formats (json, toml and yaml) are read in alphabetical order. Variables created by you in the data section of the configuration file. Furthermore, chezmoi provides a variety of functions to retrieve data at runtime from password managers, environment variables, and the filesystem.","title":"Template data"},{"location":"user-guide/templating/#creating-a-template-file","text":"There are several ways to create a template: When adding a file for the first time, pass the --template argument, for example: $ chezmoi add --template ~/.zshrc When adding a file for the first time, you can pass the --autotemplate argument, which tells chezmoi to make the file as a template and automatically replace variables that chezmoi knows about, for example: $ chezmoi add --autotemplate ~/.zshrc If a file is already managed by chezmoi, but is not a template, you can make it a template by running, for example: $ chezmoi chattr +template ~/.zshrc You can create a template manually in the source directory by giving it a .tmpl extension, for example: $ chezmoi cd $ $EDITOR dot_zshrc.tmpl Templates in .chezmoitemplates must be created manually, for example: $ chezmoi cd $ mkdir -p .chezmoitemplates $ cd .chezmoitemplates $ $EDITOR mytemplate","title":"Creating a template file"},{"location":"user-guide/templating/#editing-a-template-file","text":"The easiest way to edit a template is to use chezmoi edit , for example: $ chezmoi edit ~/.zshrc This will open the source file for ~/.zshrc in $EDITOR . When you quit the editor, chezmoi will check the template syntax. If you want the changes you make to be immediately applied after you quit the editor, use the --apply option, for example: $ chezmoi edit --apply ~/.zshrc","title":"Editing a template file"},{"location":"user-guide/templating/#testing-templates","text":"Templates can be tested with the chezmoi execute-template command which treats each of its arguments as a template and executes it. This can be useful for testing small fragments of templates, for example: $ chezmoi execute-template '{{ .chezmoi.hostname }}' If there are no arguments, chezmoi execute-template will read the template from the standard input. This can be useful for testing whole files, for example: $ chezmoi cd $ chezmoi execute-template < dot_zshrc.tmpl","title":"Testing templates"},{"location":"user-guide/templating/#template-syntax","text":"Template actions are written inside double curly brackets, {{ and }} . Actions can be variables, pipelines, or control statements. Text outside actions is copied literally. Variables are written literally, for example: {{ .chezmoi.hostname }} Conditional expressions can be written using if , else if , else , and end , for example: {{ if eq .chezmoi.os \"darwin\" }} # darwin {{ else if eq .chezmoi.os \"linux\" }} # linux {{ else }} # other operating system {{ end }} For a full description of the template syntax, see the text/template documentation .","title":"Template syntax"},{"location":"user-guide/templating/#removing-whitespace","text":"For formatting reasons you might want to leave some whitespace after or before the template code. This whitespace will remain in the final file, which you might not want. A solution for this is to place a minus sign and a space next to the brackets. So {{- for the left brackets and -}} for the right brackets. Here's an example: HOSTNAME={{- .chezmoi.hostname }} This will result in HOSTNAME=myhostname Notice that this will remove any number of tabs, spaces and even newlines and carriage returns.","title":"Removing whitespace"},{"location":"user-guide/templating/#debugging-templates","text":"If there is a mistake in one of your templates and you want to debug it, chezmoi can help you. You can use this subcommand to test and play with the examples in these docs as well. There is a very handy subcommand called execute-template . chezmoi will interpret any data coming from stdin or at the end of the command. It will then interpret all templates and output the result to stdout. For example with the command: $ chezmoi execute-template '{{ .chezmoi.os }}/{{ .chezmoi.arch }}' chezmoi will output the current OS and architecture to stdout. You can also feed the contents of a file to this command by typing: $ cat foo.txt | chezmoi execute-template","title":"Debugging templates"},{"location":"user-guide/templating/#simple-logic","text":"A very useful feature of chezmoi templates is the ability to perform logical operations. # common config export EDITOR=vi # machine-specific configuration {{- if eq .chezmoi.hostname \"work-laptop\" }} # this will only be included in ~/.bashrc on work-laptop {{- end }} In this example chezmoi will look at the hostname of the machine and if that is equal to \"work-laptop\", the text between the if and the end will be included in the result.","title":"Simple logic"},{"location":"user-guide/templating/#boolean-functions","text":"Function Return value eq Returns true if the first argument is equal to any of the other arguments not Returns the boolean negation of its single argument and Returns the boolean AND of its arguments by returning the first empty argument or the last argument, that is, and x y behaves as if x then y else x . All the arguments are evaluated or Returns the boolean OR of its arguments by returning the first non-empty argument or the last argument, that is, or x y behaves as if x then x else y All the arguments are evaluated","title":"Boolean functions"},{"location":"user-guide/templating/#integer-functions","text":"Function Return value len Returns the integer length of its argument eq Returns the boolean truth of arg1 == arg2 ne Returns the boolean truth of arg1 != arg2 lt Returns the boolean truth of arg1 < arg2 le Returns the boolean truth of arg1 <= arg2 gt Returns the boolean truth of arg1 > arg2 ge Returns the boolean truth of arg1 >= arg2","title":"Integer functions"},{"location":"user-guide/templating/#more-complicated-logic","text":"Up until now, we have only seen if statements that can handle at most two variables. In this part we will see how to create more complicated expressions. You can also create more complicated expressions. The eq command can accept multiple arguments. It will check if the first argument is equal to any of the other arguments. {{ if eq \"foo\" \"foo\" \"bar\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"foo\" }}hello{{end}} {{ if eq \"foo\" \"bar\" \"bar\" }}hello{{end}} The first two examples will output hello and the last example will output nothing. The operators or and and can also accept multiple arguments.","title":"More complicated logic"},{"location":"user-guide/templating/#chaining-operators","text":"You can perform multiple checks in one if statement. {{ if (and (eq .chezmoi.os \"linux\") (ne .email \"me@home.org\")) }} ... {{ end }} This will check if the operating system is Linux and the configured email is not the home email. The brackets are needed here, because otherwise all the arguments will be give to the and command. This way you can chain as many operators together as you like.","title":"Chaining operators"},{"location":"user-guide/templating/#helper-functions","text":"chezmoi has added multiple helper functions to the text/template syntax. chezmoi includes sprig , an extension to the text/template format that contains many helper functions. Take a look at their documentation for a list. chezmoi adds a few functions of its own as well. Take a look at the reference for complete list.","title":"Helper functions"},{"location":"user-guide/templating/#template-variables","text":"chezmoi defines a few useful templates variables that depend on the system you are currently on. A list of the variables defined by chezmoi can be found here . There are, however more variables than that. To view the variables available on your system, execute: $ chezmoi data This outputs the variables in JSON format by default. To access the variable chezmoi.kernel.osrelease in a template, use {{ .chezmoi.kernel.osrelease }} This way you can also access the variables you defined yourself.","title":"Template variables"},{"location":"user-guide/templating/#using-chezmoitemplates","text":"Files in the .chezmoitemplates subdirectory are parsed as templates and are available to be included in other templates using the template action with a name equal to their relative path to the .chezmoitemplates directory. By default, such templates will be executed with nil data. If you want to access template variables (e.g. .chezmoi.os ) in the template you must pass the data explicitly. For example: .chezmoitemplates/part.tmpl: {{ if eq .chezmoi.os \"linux\" }} # linux config {{ else }} # non-linux config {{ end }} dot_file.tmpl: {{ template \"part.tmpl\" . }}","title":"Using .chezmoitemplates"},{"location":"user-guide/templating/#using-chezmoitemplates-for-creating-similar-files","text":"When you have multiple similar files, but they aren't quite the same, you can create a template file in the directory .chezmoitemplates . This template can be inserted in other template files, for example: Create .local/share/chezmoi/.chezmoitemplates/alacritty : some: config fontsize: {{ . }} more: config Notice the file name doesn't have to end in .tmpl , as all files in the directory .chezmoitemplates are interpreted as templates. Create other files using the template ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" 12 -}} ~/.local/share/chezmoi/big-font.yml.tmpl {{- template \"alacritty\" 18 -}} Here we're calling the shared alacritty template with the font size as the . value passed in. You can test this with chezmoi cat : $ chezmoi cat ~/small-font.yml some: config fontsize: 12 more: config $ chezmoi cat ~/big-font.yml some: config fontsize: 18 more: config","title":"Using .chezmoitemplates for creating similar files"},{"location":"user-guide/templating/#passing-multiple-arguments","text":"In the example above only one arguments is passed to the template. To pass more arguments to the template, you can do it in two ways.","title":"Passing multiple arguments"},{"location":"user-guide/templating/#via-the-config-file","text":"This method is useful if you want to use the same template arguments multiple times, because you don't specify the arguments every time. Instead you specify them in the file ~/.config/chezmoi/chezmoi.toml : ~/.config/chezmoi/chezmoi.toml [data.alacritty.big] fontsize = 18 font = \"DejaVu Serif\" [data.alacritty.small] fontsize = 12 font = \"DejaVu Sans Mono\" Use the variables in ~/.local/share/chezmoi/.chezmoitemplates/alacritty : ~/.local/share/chezmoi/.chezmoitemplates/alacritty some: config fontsize: {{ .fontsize }} font: {{ .font }} more: config And connect them with ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" .alacritty.small -}} At the moment, this means that you'll have to duplicate the alacritty data in the config file on every machine, but a feature will be added to avoid this.","title":"Via the config file"},{"location":"user-guide/templating/#by-passing-a-dictionary","text":"Using the same alacritty configuration as above, you can pass the arguments to it with a dictionary, for example ~/.local/share/chezmoi/small-font.yml.tmpl : ~/.local/share/chezmoi/small-font.yml.tmpl {{- template \"alacritty\" dict \"fontsize\" 12 \"font\" \"DejaVu Sans Mono\" -}}","title":"By passing a dictionary"},{"location":"user-guide/use-scripts-to-perform-actions/","text":"Use scripts to perform actions Understand how scripts work chezmoi supports scripts, which are executed when you run chezmoi apply . The scripts can either run every time you run chezmoi apply , or only when their contents have changed. In verbose mode, the script's contents will be printed before executing it. In dry-run mode, the script is not executed. Scripts are any file in the source directory with the prefix run_ , and are executed in alphabetical order. Scripts that should only be run if they have not been run before have the prefix run_once_ . Scripts that should be run whenever their contents change have the run_onchange_ prefix. Scripts break chezmoi's declarative approach, and as such should be used sparingly. Any script should be idempotent, even run_once_ and run_onchange_ scripts. Scripts are normally run while chezmoi updates your dotfiles. To configure scripts to run before or after your dotfiles are updated use the before_ and after_ attributes respectively, e.g. run_once_before_install-password-manager.sh . Scripts must be created manually in the source directory, typically by running chezmoi cd and then creating a file with a run_ prefix. There is no need to set the executable bit on the script, as chezmoi will set the executable bit before executing the script. Scripts with the suffix .tmpl are treated as templates, with the usual template variables available. If, after executing the template, the result is only whitespace or an empty string, then the script is not executed. This is useful for disabling scripts. When chezmoi executes a script, it first generates the script contents in a file in a temporary directory with the executable bit set, and then executes the contents with exec(3) . Consequently, the script's contents must either include a #! line or be an executable binary. Set environment variables You can set extra environment variables for your scripts in the scriptEnv section of your config file. For example, to set the $MY_VAR environment variable to my_value , specify: ~/.config/chezmoi/chezmoi.toml [scriptEnv] MY_VAR = \"my_value\" Note By default, chezmoi diff will print the contents of scripts that would be run by chezmoi apply . To exclude scripts from the output of chezmoi diff , set diff.exclude in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ] Similarly, chezmoi status will print the names of the scripts that it will execute with the status R . This can similarly disabled by setting status.exclude to [\"scripts\"] in your configuration file. Install packages with scripts Change to the source directory and create a file called run_once_install-packages.sh : $ chezmoi cd $ $EDITOR run_once_install-packages.sh In this file create your package installation script, e.g. #!/bin/sh sudo apt install ripgrep The next time you run chezmoi apply or chezmoi update this script will be run. As it has the run_once_ prefix, it will not be run again unless its contents change, for example if you add more packages to be installed. This script can also be a template. For example, if you create run_once_install-packages.sh.tmpl with the contents: ~/.local/share/chezmoi/run_once_install-packages.sh.tmpl {{ if eq .chezmoi.os \"linux\" -}} #!/bin/sh sudo apt install ripgrep {{ else if eq .chezmoi.os \"darwin\" -}} #!/bin/sh brew install ripgrep {{ end -}} This will install ripgrep on both Debian/Ubuntu Linux systems and macOS. Run a script when the contents of another file changes chezmoi's run_ scripts are run every time you run chezmoi apply , whereas run_once_ scripts are run only when their contents have changed, after executing them as templates. You can use this to cause a run_once_ script to run when the contents of another file has changed by including a checksum of the other file's contents in the script. For example, if your dconf settings are stored in dconf.ini in your source directory then you can make chezmoi apply only load them when the contents of dconf.ini has changed by adding the following script as run_once_dconf-load.sh.tmpl : ~/.local/share/chezmoi/run_once_dconf-load.sh.tmpl #!/bin/bash # dconf.ini hash: {{ include \"dconf.ini\" | sha256sum }} dconf load / < {{ joinPath .chezmoi.sourceDir \"dconf.ini\" | quote }} As the SHA256 sum of dconf.ini is included in a comment in the script, the contents of the script will change whenever the contents of dconf.ini are changed, so chezmoi will re-run the script whenever the contents of dconf.ini change. In this example you should also add dconf.ini to .chezmoiignore so chezmoi does not create dconf.ini in your home directory. Clear the state of run_once_ scripts chezmoi stores whether and when run_once_ scripts have been run in the scriptState bucket of its persistent state. To clear the state of run_once_ scripts, run: $ chezmoi state delete-bucket --bucket = scriptState","title":"Use scripts to perform actions"},{"location":"user-guide/use-scripts-to-perform-actions/#use-scripts-to-perform-actions","text":"","title":"Use scripts to perform actions"},{"location":"user-guide/use-scripts-to-perform-actions/#understand-how-scripts-work","text":"chezmoi supports scripts, which are executed when you run chezmoi apply . The scripts can either run every time you run chezmoi apply , or only when their contents have changed. In verbose mode, the script's contents will be printed before executing it. In dry-run mode, the script is not executed. Scripts are any file in the source directory with the prefix run_ , and are executed in alphabetical order. Scripts that should only be run if they have not been run before have the prefix run_once_ . Scripts that should be run whenever their contents change have the run_onchange_ prefix. Scripts break chezmoi's declarative approach, and as such should be used sparingly. Any script should be idempotent, even run_once_ and run_onchange_ scripts. Scripts are normally run while chezmoi updates your dotfiles. To configure scripts to run before or after your dotfiles are updated use the before_ and after_ attributes respectively, e.g. run_once_before_install-password-manager.sh . Scripts must be created manually in the source directory, typically by running chezmoi cd and then creating a file with a run_ prefix. There is no need to set the executable bit on the script, as chezmoi will set the executable bit before executing the script. Scripts with the suffix .tmpl are treated as templates, with the usual template variables available. If, after executing the template, the result is only whitespace or an empty string, then the script is not executed. This is useful for disabling scripts. When chezmoi executes a script, it first generates the script contents in a file in a temporary directory with the executable bit set, and then executes the contents with exec(3) . Consequently, the script's contents must either include a #! line or be an executable binary.","title":"Understand how scripts work"},{"location":"user-guide/use-scripts-to-perform-actions/#set-environment-variables","text":"You can set extra environment variables for your scripts in the scriptEnv section of your config file. For example, to set the $MY_VAR environment variable to my_value , specify: ~/.config/chezmoi/chezmoi.toml [scriptEnv] MY_VAR = \"my_value\" Note By default, chezmoi diff will print the contents of scripts that would be run by chezmoi apply . To exclude scripts from the output of chezmoi diff , set diff.exclude in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ] Similarly, chezmoi status will print the names of the scripts that it will execute with the status R . This can similarly disabled by setting status.exclude to [\"scripts\"] in your configuration file.","title":"Set environment variables"},{"location":"user-guide/use-scripts-to-perform-actions/#install-packages-with-scripts","text":"Change to the source directory and create a file called run_once_install-packages.sh : $ chezmoi cd $ $EDITOR run_once_install-packages.sh In this file create your package installation script, e.g. #!/bin/sh sudo apt install ripgrep The next time you run chezmoi apply or chezmoi update this script will be run. As it has the run_once_ prefix, it will not be run again unless its contents change, for example if you add more packages to be installed. This script can also be a template. For example, if you create run_once_install-packages.sh.tmpl with the contents: ~/.local/share/chezmoi/run_once_install-packages.sh.tmpl {{ if eq .chezmoi.os \"linux\" -}} #!/bin/sh sudo apt install ripgrep {{ else if eq .chezmoi.os \"darwin\" -}} #!/bin/sh brew install ripgrep {{ end -}} This will install ripgrep on both Debian/Ubuntu Linux systems and macOS.","title":"Install packages with scripts"},{"location":"user-guide/use-scripts-to-perform-actions/#run-a-script-when-the-contents-of-another-file-changes","text":"chezmoi's run_ scripts are run every time you run chezmoi apply , whereas run_once_ scripts are run only when their contents have changed, after executing them as templates. You can use this to cause a run_once_ script to run when the contents of another file has changed by including a checksum of the other file's contents in the script. For example, if your dconf settings are stored in dconf.ini in your source directory then you can make chezmoi apply only load them when the contents of dconf.ini has changed by adding the following script as run_once_dconf-load.sh.tmpl : ~/.local/share/chezmoi/run_once_dconf-load.sh.tmpl #!/bin/bash # dconf.ini hash: {{ include \"dconf.ini\" | sha256sum }} dconf load / < {{ joinPath .chezmoi.sourceDir \"dconf.ini\" | quote }} As the SHA256 sum of dconf.ini is included in a comment in the script, the contents of the script will change whenever the contents of dconf.ini are changed, so chezmoi will re-run the script whenever the contents of dconf.ini change. In this example you should also add dconf.ini to .chezmoiignore so chezmoi does not create dconf.ini in your home directory.","title":"Run a script when the contents of another file changes"},{"location":"user-guide/use-scripts-to-perform-actions/#clear-the-state-of-run_once_-scripts","text":"chezmoi stores whether and when run_once_ scripts have been run in the scriptState bucket of its persistent state. To clear the state of run_once_ scripts, run: $ chezmoi state delete-bucket --bucket = scriptState","title":"Clear the state of run_once_ scripts"},{"location":"user-guide/advanced/customize-your-source-directory/","text":"Customize your source directory Use a subdirectory of your dotfiles repo as the root of the source state By default, chezmoi uses the root of your dotfiles repo as the root of the source state. If your source state contains many entries in its root, then your target directory (usually your home directory) will in turn be filled with many entries in its root as well. You can reduce the number of entries by keeping .chezmoiignore up to date, but this can become tiresome. Instead, you can specify that chezmoi should read the source state from a subdirectory of the source directory instead by creating a file called .chezmoiroot containing the relative path to this subdirectory. For example, given: ~/.local/share/chezmoi/.chezmoiroot home Then chezmoi will read the source state from the home subdirectory of your source directory, for example the desired state of ~/.gitconfig will be read from ~/.local/share/chezmoi/home/dot_gitconfig (instead of ~/.local/share/chezmoi/dot_gitconfig ). When migrating an existing chezmoi dotfiles repo to use .chezmoiroot you will need to move the relevant files in to the new root subdirectory manually. You do not need to move files that are ignored by chezmoi in all cases (i.e. are listed in .chezmoiignore when executed as a template on all machines), and you can afterwards remove their entries from home/.chezmoiignore . Use a different version control system to git Although chezmoi is primarily designed to use a git repo for the source state, it does not require git and can be used with other version control systems, such as fossil or pijul . The version control system is used in only three places: chezmoi init will use git clone to clone the source repo if it does not already exist. chezmoi update will use git pull by default to pull the latest changes. chezmoi's auto add, commit, and push functionality use git status , git add , git commit and git push . Using a different version control system (VCS) to git can be achieved in two ways. Firstly, if your VCS is compatible with git's CLI, then you can set the git.command configuration variable to your VCS command and set useBuiltinGit to false . Otherwise, you can use your VCS to create the source directory before running chezmoi init , for example: $ fossil clone https://dotfiles.example.com/ dotfiles.fossil $ mkdir -p .local/share/chezmoi/.git $ cd .local/share/chezmoi $ fossil open ~/dotfiles.fossil $ chezmoi init --apply Note The creation of an empty .git directory in the source directory is required for chezmoi to be able to identify the work tree. For updates, you can set the update.command and update.args configuration variables and chezmoi update will use these instead of git pull , for example: ~/.config/chezmoi/chezmoi.toml [update] command = \"fossil\" args = [ \"update\" ] Currently, it is not possible to override the auto add, commit, and push behavior for non-git VCSs, so you will have to commit changes manually, for example: $ chezmoi cd $ fossil add . $ fossil commit","title":"Customize your source directory"},{"location":"user-guide/advanced/customize-your-source-directory/#customize-your-source-directory","text":"","title":"Customize your source directory"},{"location":"user-guide/advanced/customize-your-source-directory/#use-a-subdirectory-of-your-dotfiles-repo-as-the-root-of-the-source-state","text":"By default, chezmoi uses the root of your dotfiles repo as the root of the source state. If your source state contains many entries in its root, then your target directory (usually your home directory) will in turn be filled with many entries in its root as well. You can reduce the number of entries by keeping .chezmoiignore up to date, but this can become tiresome. Instead, you can specify that chezmoi should read the source state from a subdirectory of the source directory instead by creating a file called .chezmoiroot containing the relative path to this subdirectory. For example, given: ~/.local/share/chezmoi/.chezmoiroot home Then chezmoi will read the source state from the home subdirectory of your source directory, for example the desired state of ~/.gitconfig will be read from ~/.local/share/chezmoi/home/dot_gitconfig (instead of ~/.local/share/chezmoi/dot_gitconfig ). When migrating an existing chezmoi dotfiles repo to use .chezmoiroot you will need to move the relevant files in to the new root subdirectory manually. You do not need to move files that are ignored by chezmoi in all cases (i.e. are listed in .chezmoiignore when executed as a template on all machines), and you can afterwards remove their entries from home/.chezmoiignore .","title":"Use a subdirectory of your dotfiles repo as the root of the source state"},{"location":"user-guide/advanced/customize-your-source-directory/#use-a-different-version-control-system-to-git","text":"Although chezmoi is primarily designed to use a git repo for the source state, it does not require git and can be used with other version control systems, such as fossil or pijul . The version control system is used in only three places: chezmoi init will use git clone to clone the source repo if it does not already exist. chezmoi update will use git pull by default to pull the latest changes. chezmoi's auto add, commit, and push functionality use git status , git add , git commit and git push . Using a different version control system (VCS) to git can be achieved in two ways. Firstly, if your VCS is compatible with git's CLI, then you can set the git.command configuration variable to your VCS command and set useBuiltinGit to false . Otherwise, you can use your VCS to create the source directory before running chezmoi init , for example: $ fossil clone https://dotfiles.example.com/ dotfiles.fossil $ mkdir -p .local/share/chezmoi/.git $ cd .local/share/chezmoi $ fossil open ~/dotfiles.fossil $ chezmoi init --apply Note The creation of an empty .git directory in the source directory is required for chezmoi to be able to identify the work tree. For updates, you can set the update.command and update.args configuration variables and chezmoi update will use these instead of git pull , for example: ~/.config/chezmoi/chezmoi.toml [update] command = \"fossil\" args = [ \"update\" ] Currently, it is not possible to override the auto add, commit, and push behavior for non-git VCSs, so you will have to commit changes manually, for example: $ chezmoi cd $ fossil add . $ fossil commit","title":"Use a different version control system to git"},{"location":"user-guide/advanced/migrate-away-from-chezmoi/","text":"Migrate away from chezmoi chezmoi provides several mechanisms to help you move to an alternative dotfile manager (or even no dotfile manager at all) in the future: chezmoi creates your dotfiles just as if you were not using a dotfile manager at all. Your dotfiles are regular files, directories, and symlinks. You can run chezmoi purge to delete all traces of chezmoi and then, if you're migrating to a new dotfile manager, then you can use whatever mechanism it provides to add your dotfiles to your new system. chezmoi has a chezmoi archive command that generates a tarball of your dotfiles. You can replace the contents of your dotfiles repo with the contents of the archive and you've effectively immediately migrated away from chezmoi. chezmoi has a chezmoi dump command that dumps the interpreted (target) state in a machine-readable form, so you can write scripts around chezmoi.","title":"Migrate away from chezmoi"},{"location":"user-guide/advanced/migrate-away-from-chezmoi/#migrate-away-from-chezmoi","text":"chezmoi provides several mechanisms to help you move to an alternative dotfile manager (or even no dotfile manager at all) in the future: chezmoi creates your dotfiles just as if you were not using a dotfile manager at all. Your dotfiles are regular files, directories, and symlinks. You can run chezmoi purge to delete all traces of chezmoi and then, if you're migrating to a new dotfile manager, then you can use whatever mechanism it provides to add your dotfiles to your new system. chezmoi has a chezmoi archive command that generates a tarball of your dotfiles. You can replace the contents of your dotfiles repo with the contents of the archive and you've effectively immediately migrated away from chezmoi. chezmoi has a chezmoi dump command that dumps the interpreted (target) state in a machine-readable form, so you can write scripts around chezmoi.","title":"Migrate away from chezmoi"},{"location":"user-guide/advanced/use-chezmoi-with-watchman/","text":"Use chezmoi with Watchman chezmoi can be used with Watchman to automatically run chezmoi apply whenever your source state changes, but there are some limitations because Watchman runs actions in the background without a terminal. Firstly, Watchman spawns a server which runs actions when filesystems change. This server reads its environment variables when it is started, typically on the first invocation of the watchman command. If you use a password manager that uses environment variables to persist login sessions, then you must login to your password manager before you run the first watchman command, and your session might eventually time out. Secondly, Watchman runs processes without a terminal, and so cannot run interactive processes. For chezmoi apply , you can use the --force flag to suppress prompts to overwrite files that have been modified since chezmoi last wrote them. However, if any other part of chezmoi apply is interactive, for example if your password manager prompts for a password, then it will not work with Watchman. Tell watchman to watch your source directory: $ CHEZMOI_SOURCE_PATH = \" $( chezmoi source-path ) \" $ watchman watch \" ${ CHEZMOI_SOURCE_PATH } \" Tell watchman to run chezmoi apply --force whenever your source directory changes: $ watchman -j <<EOT [\"trigger\", \"${CHEZMOI_SOURCE_PATH}\", { \"name\": \"chezmoi-apply\", \"command\": [\"chezmoi\", \"apply\", \"--force\"] }] EOT You can now make changes to your source directory and Watchman will run chezmoi apply --force on each change. To shutdown the Watchman server, run: ```console $ watchman shutdown-server ```","title":"Use chezmoi with Watchman"},{"location":"user-guide/advanced/use-chezmoi-with-watchman/#use-chezmoi-with-watchman","text":"chezmoi can be used with Watchman to automatically run chezmoi apply whenever your source state changes, but there are some limitations because Watchman runs actions in the background without a terminal. Firstly, Watchman spawns a server which runs actions when filesystems change. This server reads its environment variables when it is started, typically on the first invocation of the watchman command. If you use a password manager that uses environment variables to persist login sessions, then you must login to your password manager before you run the first watchman command, and your session might eventually time out. Secondly, Watchman runs processes without a terminal, and so cannot run interactive processes. For chezmoi apply , you can use the --force flag to suppress prompts to overwrite files that have been modified since chezmoi last wrote them. However, if any other part of chezmoi apply is interactive, for example if your password manager prompts for a password, then it will not work with Watchman. Tell watchman to watch your source directory: $ CHEZMOI_SOURCE_PATH = \" $( chezmoi source-path ) \" $ watchman watch \" ${ CHEZMOI_SOURCE_PATH } \" Tell watchman to run chezmoi apply --force whenever your source directory changes: $ watchman -j <<EOT [\"trigger\", \"${CHEZMOI_SOURCE_PATH}\", { \"name\": \"chezmoi-apply\", \"command\": [\"chezmoi\", \"apply\", \"--force\"] }] EOT You can now make changes to your source directory and Watchman will run chezmoi apply --force on each change. To shutdown the Watchman server, run: ```console $ watchman shutdown-server ```","title":"Use chezmoi with Watchman"},{"location":"user-guide/encryption/","text":"Encryption chezmoi supports encrypting files with age and gpg . Encrypted files are stored in ASCII-armored format in the source directory with the encrypted_ attribute and are automatically decrypted when needed. Add files to be encrypted with the --encrypt flag, for example: $ chezmoi add --encrypt ~/.ssh/id_rsa chezmoi edit will transparently decrypt the file before editing and re-encrypt it afterwards.","title":"Encryption"},{"location":"user-guide/encryption/#encryption","text":"chezmoi supports encrypting files with age and gpg . Encrypted files are stored in ASCII-armored format in the source directory with the encrypted_ attribute and are automatically decrypted when needed. Add files to be encrypted with the --encrypt flag, for example: $ chezmoi add --encrypt ~/.ssh/id_rsa chezmoi edit will transparently decrypt the file before editing and re-encrypt it afterwards.","title":"Encryption"},{"location":"user-guide/encryption/age/","text":"age chezmoi supports encrypting files with age . Generate a key using age-keygen : $ age-keygen -o $HOME /key.txt Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p Specify age encryption in your configuration file, being sure to specify at least the identity and one recipient: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"/home/user/key.txt\" recipient = \"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\" chezmoi supports multiple recipients and recipient files, and multiple identities. Symmetric encryption To use age's symmetric encryption, specify a single identity and enable symmetric encryption in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"~/.ssh/id_rsa\" symmetric = true Symmetric encryption with a passphrase To use age's symmetric encryption with a passphrase, set age.passphrase to true in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] passphrase = true You will be prompted for the passphrase whenever you run chezmoi add --encrypt and whenever chezmoi needs to decrypt the file, for example when you run chezmoi apply , chezmoi diff , or chezmoi status . Builtin age encryption chezmoi has builtin support for age encryption which is automatically used if the age command is not found in $PATH . Info The builtin age encryption does not support passphrases, symmetric encryption, or SSH keys. Passphrases are not supported because chezmoi needs to decrypt files regularly, e.g. when running a chezmoi diff or a chezmoi status command, not just when running chezmoi apply . Prompting for a passphrase each time would quickly become tiresome. Symmetric encryption may be supported in the future. Please open an issue if you want this. SSH keys are not supported as the age documentation explicitly recommends not using them : When integrating age into a new system, it's recommended that you only support X25519 keys, and not SSH keys. The latter are supported for manual encryption operations.","title":"age"},{"location":"user-guide/encryption/age/#age","text":"chezmoi supports encrypting files with age . Generate a key using age-keygen : $ age-keygen -o $HOME /key.txt Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p Specify age encryption in your configuration file, being sure to specify at least the identity and one recipient: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"/home/user/key.txt\" recipient = \"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\" chezmoi supports multiple recipients and recipient files, and multiple identities.","title":"age"},{"location":"user-guide/encryption/age/#symmetric-encryption","text":"To use age's symmetric encryption, specify a single identity and enable symmetric encryption in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] identity = \"~/.ssh/id_rsa\" symmetric = true","title":"Symmetric encryption"},{"location":"user-guide/encryption/age/#symmetric-encryption-with-a-passphrase","text":"To use age's symmetric encryption with a passphrase, set age.passphrase to true in your config file, for example: ~/.config/chezmoi/chezmoi.toml encryption = \"age\" [age] passphrase = true You will be prompted for the passphrase whenever you run chezmoi add --encrypt and whenever chezmoi needs to decrypt the file, for example when you run chezmoi apply , chezmoi diff , or chezmoi status .","title":"Symmetric encryption with a passphrase"},{"location":"user-guide/encryption/age/#builtin-age-encryption","text":"chezmoi has builtin support for age encryption which is automatically used if the age command is not found in $PATH . Info The builtin age encryption does not support passphrases, symmetric encryption, or SSH keys. Passphrases are not supported because chezmoi needs to decrypt files regularly, e.g. when running a chezmoi diff or a chezmoi status command, not just when running chezmoi apply . Prompting for a passphrase each time would quickly become tiresome. Symmetric encryption may be supported in the future. Please open an issue if you want this. SSH keys are not supported as the age documentation explicitly recommends not using them : When integrating age into a new system, it's recommended that you only support X25519 keys, and not SSH keys. The latter are supported for manual encryption operations.","title":"Builtin age encryption"},{"location":"user-guide/encryption/gpg/","text":"gpg chezmoi supports encrypting files with gpg . Encrypted files are stored in the source state and automatically be decrypted when generating the target state or editing a file contents with chezmoi edit . Asymmetric (private/public-key) encryption Specify the encryption key to use in your configuration file ( chezmoi.toml ) with the gpg.recipient key: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] recipient = \"...\" chezmoi will encrypt files: gpg --armor --recipient $RECIPIENT --encrypt and store the encrypted file in the source state. The file will automatically be decrypted when generating the target state. Symmetric encryption Specify symmetric encryption in your configuration file: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] symmetric = true chezmoi will encrypt files: gpg --armor --symmetric Encrypting files with a passphrase If you want to encrypt your files with a passphrase, but don't mind the passphrase being stored in plaintext on your machines, then you can use the following configuration: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{ $passphrase := promptStringOnce . \"passphrase\" \"passphrase\" -}} encryption = \"gpg\" [data] passphrase = {{ $passphrase | quote }} [gpg] symmetric = true args = [\"--batch\", \"--passphrase\", {{ $passphrase | quote }}, \"--no-symkey-cache\"] This will prompt you for the passphrase the first time you run chezmoi init on a new machine, and then remember the passphrase in your configuration file. Muting gpg output Since gpg sends some info messages to stderr instead of stdout, you will see some output even if you redirect stdout to /dev/null . You can mute this by adding --quiet to the gpg.args key in your configuration: ~/.local/share/chezmoi/.chezmoi.toml.tmpl [gpg] args = [ \"--quiet\" ]","title":"gpg"},{"location":"user-guide/encryption/gpg/#gpg","text":"chezmoi supports encrypting files with gpg . Encrypted files are stored in the source state and automatically be decrypted when generating the target state or editing a file contents with chezmoi edit .","title":"gpg"},{"location":"user-guide/encryption/gpg/#asymmetric-privatepublic-key-encryption","text":"Specify the encryption key to use in your configuration file ( chezmoi.toml ) with the gpg.recipient key: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] recipient = \"...\" chezmoi will encrypt files: gpg --armor --recipient $RECIPIENT --encrypt and store the encrypted file in the source state. The file will automatically be decrypted when generating the target state.","title":"Asymmetric (private/public-key) encryption"},{"location":"user-guide/encryption/gpg/#symmetric-encryption","text":"Specify symmetric encryption in your configuration file: ~/.config/chezmoi/chezmoi.toml encryption = \"gpg\" [gpg] symmetric = true chezmoi will encrypt files: gpg --armor --symmetric","title":"Symmetric encryption"},{"location":"user-guide/encryption/gpg/#encrypting-files-with-a-passphrase","text":"If you want to encrypt your files with a passphrase, but don't mind the passphrase being stored in plaintext on your machines, then you can use the following configuration: ~/.local/share/chezmoi/.chezmoi.toml.tmpl {{ $passphrase := promptStringOnce . \"passphrase\" \"passphrase\" -}} encryption = \"gpg\" [data] passphrase = {{ $passphrase | quote }} [gpg] symmetric = true args = [\"--batch\", \"--passphrase\", {{ $passphrase | quote }}, \"--no-symkey-cache\"] This will prompt you for the passphrase the first time you run chezmoi init on a new machine, and then remember the passphrase in your configuration file.","title":"Encrypting files with a passphrase"},{"location":"user-guide/encryption/gpg/#muting-gpg-output","text":"Since gpg sends some info messages to stderr instead of stdout, you will see some output even if you redirect stdout to /dev/null . You can mute this by adding --quiet to the gpg.args key in your configuration: ~/.local/share/chezmoi/.chezmoi.toml.tmpl [gpg] args = [ \"--quiet\" ]","title":"Muting gpg output"},{"location":"user-guide/frequently-asked-questions/design/","text":"Design Do I have to use chezmoi edit to edit my dotfiles? No. chezmoi edit is a convenience command that has a couple of useful features, but you don't have to use it. You can also run chezmoi cd and then just edit the files in the source state directly. After saving an edited file you can run chezmoi diff to check what effect the changes would have, and run chezmoi apply if you're happy with them. If there are inconsistencies that you want to keep, then chezmoi merge-all will help you resolve any differences. chezmoi edit provides the following useful features: The arguments to chezmoi edit are the files in their target location, so you don't have to think about source state attributes and your editor's syntax highlighting will work. If the dotfile is encrypted in the source state, then chezmoi edit will decrypt it to a private directory, open that file in your $EDITOR , and then re-encrypt the file when you quit your editor. This makes encryption transparent. With the --diff and --apply options you can see what would change and apply those changes without having to run chezmoi diff or chezmoi apply . If you have configured git auto commits or git auto pushes then chezmoi edit will create commits and push them for you. If you chose to edit files in the source state and you're using VIM then github.com/alker0/chezmoi.vim gives you syntax highlighting, however you edit your files. Besides using the plugin, you can use modeline to tell VIM the correct filetype. For example, put # vim: filetype=zsh at the top of dot_zshrc , and VIM will treat dot_zshrc as zsh file. Why doesn't chezmoi use symlinks like GNU Stow? Symlinks are first class citizens in chezmoi: chezmoi supports creating them, updating them, removing them, and even more advanced features not found in other dotfile managers like having the same symlink point to different targets on different machines by using a template. With chezmoi, you only use a symlink where you really need a symlink, in contrast to some other dotfile managers (e.g. GNU Stow) which require the use of symlinks as a layer of indirection between a dotfile's location (which can be anywhere in your home directory) and a dotfile's content (which needs to be in a centralized directory that you manage with version control). chezmoi solves this problem in a different way. Instead of using a symlink to redirect from the dotfile's location to the centralized directory, chezmoi generates the dotfile as a regular file in its final location from the contents of the centralized directory. This approach allows chezmoi to provide features that are not possible when using symlinks, for example having files that are encrypted, executable, private, or templates. There is nothing special about dotfiles managed by chezmoi whereas dotfiles managed with GNU Stow are special because they're actually symlinks to somewhere else. The only advantage to using GNU Stow-style symlinks is that changes that you make to the dotfile's contents in the centralized directory are immediately visible whenever you save them, whereas chezmoi currently requires you to pass the --watch flag to chezmoi edit or set edit.watch to true in your configuration file. If you really want to use symlinks, then chezmoi provides a symlink mode which uses symlinks where possible. This configures chezmoi to work like GNU Stow and have it create a set of symlinks back to a central directory, but this currently requires a bit of manual work (as described in #167 ). chezmoi might get some automation to help (see #886 for example) but it does need some convincing use cases that demonstrate that a symlink from a dotfile's location to its contents in a central directory is better than just having the correct dotfile contents. What are the limitations of chezmoi's symlink mode? In symlink mode chezmoi replaces targets with symlinks to the source directory if the target is a regular file and is not encrypted, executable, private, or a template. Symlinks cannot be used for encrypted files because the source state contains the ciphertext, not the plaintext. Symlinks cannot be used for executable files as the executable bit would need to be set on the file in the source directory and chezmoi uses only regular files and directories in its source state for portability across operating systems. This may change in the future. Symlinks cannot be used for private files because git does not persist group and world permission bits. Symlinks cannot be used for templated files because the source state contains the template, not the result of executing the template. Symlinks cannot be used for entire directories because of chezmoi's use of attributes in the filename mangles entries in the directory, directories might have the exact_ attribute and contain empty files, and the directory's entries might not be usable with symlinks. In symlink mode, running chezmoi add does not immediately replace the targets with a symlink. You must run chezmoi apply to create the symlinks. Why does chezmoi use weird filenames? There are a number of criticisms of how chezmoi uses filenames: The long source file names are weird and verbose. Not all possible file permissions can be represented. Everything is in a single directory, which can end up containing many entries. chezmoi's decision to store metadata in filenames is a deliberate, practical, compromise. Firstly, almost all programs store metadata in filenames: the filename's extension. chezmoi extends the filename to storing metadata in attributes in the filename's prefix as well. The dot_ attribute makes it transparent which dotfiles are managed by chezmoi and which files are ignored by chezmoi. chezmoi ignores all files and directories that start with . so no special whitelists are needed for version control systems and their control files (e.g. .git and .gitignore ). chezmoi needs per-file metadata to know how to interpret the source file's contents, for example to know when the source file is a template or if the file's contents are encrypted. By storing this metadata in the filename, the metadata is unambiguously associated with a single file and adding, updating, or removing a single file touches only a single file in the source state. Changes to the metadata (e.g. chezmoi chattr +template $TARGET ) are simple file renames and isolated to the affected file. If chezmoi were to, say, use a common configuration file listing which files were templates and/or encrypted, then changes to any file would require updates to the common configuration file. Automating updates to configuration files requires a round trip (read config file, update config, write config) and it is not always possible preserve comments and formatting. chezmoi's attributes of executable_ , private_ , and readonly_ allow the file permissions 0o644 , 0o755 , 0o600 , 0o700 , 0o444 , 0o555 , 0o400 , and 0o500 to be represented. Directories can only have permissions 0o755 , 0o700 , or 0o500 . In practice, these cover all permissions typically used for dotfiles. If this does cause a genuine problem for you, please open an issue on GitHub . File permissions and modes like executable_ , private_ , readonly_ , and symlink_ could also be stored in the filesystem, rather than in the filename. However, this requires the permissions to be preserved and handled by the underlying version control system and filesystem. chezmoi provides first-class support for Windows, where the executable_ and private_ attributes have no direct equivalents and symbolic links are not always permitted. By using regular files and directories, chezmoi avoids variations in the operating system, version control system, and filesystem making it both more robust and more portable. chezmoi uses a 1:1 mapping between entries in the source state and entries in the target state. This mapping is bi-directional and unambiguous. However, this also means that dotfiles that in the same directory in the target state must be in the same directory in the source state. In particular, every entry managed by chezmoi in the root of your home directory has a corresponding entry in the root of your source directory, which can mean that you end up with a lot of entries in the root of your source directory. This can be mitigated by using .chezmoiroot file. If chezmoi were to permit, say, multiple separate source directories (so you could, say, put dot_bashrc in a bash/ subdirectory, and dot_vimrc in a vim/ subdirectory, but have chezmoi apply map these to ~/.bashrc and ~/.vimrc in the root of your home directory) then the mapping between source and target states is no longer bidirectional nor unambiguous, which significantly increases complexity and requires more user interaction. For example, if both bash/dot_bashrc and vim/dot_bashrc exist, what should be the contents of ~/.bashrc ? If you run chezmoi add ~/.zshrc , should dot_zshrc be stored in the source bash/ directory, the source vim/ directory, or somewhere else? How does the user communicate their preferences? chezmoi has many users and any changes to the source state representation must be backwards-compatible. In summary, chezmoi's source state representation is a compromise with both advantages and disadvantages. Changes to the representation will be considered, but must meet the following criteria, in order of importance: Be fully backwards-compatible for existing users. Fix a genuine problem encountered in practice. Be independent of the underlying operating system, version control system, and filesystem. Not add significant extra complexity to the user interface or underlying implementation. Can chezmoi support multiple sources or multiple source states? With some dotfile managers, dotfiles can be distributed across multiple directories or even multiple repos. For example, the user might have one directory per application, or separate repos for home and work configurations, or even separate git submodules for different applications. These can be considered multiple sources of truth for the target state. This, however, comes with complications: Multiple sources of truth complicate the user interface. When running chezmoi add $FILE , which source should $FILE be added to? Multiple sources of truth do not compose easily if target files overlap. For example, if you have two sources, both of which need to set an environment variable in .bashrc , how do you handle this when both, only one, or neither source might be activated? What if the sources are mutually exclusive, e.g. if the VIM source and the Emacs source both want to set the $EDITOR environment variable? Multiple sources of truth are not always independent. Related to the previous point, consider a source that adds an applications's configuration files and shell completions. Should the shell completions be part of the applications's source or of the shell's source? chezmoi instead makes the opinionated choice to use a single source of truth, i.e. a single branch in a single git repo. Using a single source of truth avoids the inherent complexity and ambiguity of multiple sources. chezmoi provides mechanisms like templates (for minor differences), .chezmoiignore (for controlling the presence or otherwise of complete files and directories), and password manager integration (so secrets never need to be stored in a repo) handle machine-to-machine differences. Externals make it easy to pull in dotfiles from third-party sources. That said, if you are keen to use multiple sources of truth with chezmoi, you have a number of options with some scripting around chezmoi. Firstly, you can run chezmoi apply with different arguments to the --config and --source flags which will apply to the same destination. So that you only have to type one command you can wrap this in a shell function, for example: chezmoi-apply () { chezmoi apply --config ~/.config/chezmoi-home/chezmoi.toml \\ --source ~/.local/share/chezmoi-home && \\ chezmoi apply --config ~/.config/chezmoi-work/chezmoi.toml \\ --source ~/.local/share/chezmoi-work } If you want to generate multiple configuration files with chezmoi init then you will need the --config-path flag. For more advanced use, use the --destination , --cache , and --persistent-state flags. Secondly, you can assemble a single source state from multiple sources and then use chezmoi apply . For example, if you have multiple source states in subdirectories of ~/.dotfiles : #!/bin/bash # create a combined source state in a temporary directory combined_source = \" $( mktemp -d ) \" # remove the temporary source state on exit trap 'rm -rf -- \"${combined_source}\"' INT TERM # copy files from multiple sources into the temporary source state for source in $HOME /.dotfiles/* ; do cp -r \" ${ source } \" /* \" ${ combined_source } \" done # apply the temporary source state chezmoi apply --source \" ${ combined_source } \" Thirdly, you can use a run_ script to invoke a second instance of chezmoi, as used by @felipecrs . Why does chezmoi cd spawn a shell instead of just changing directory? chezmoi cd spawns a shell because it is not possible for a program to change the working directory of its parent process. You can add a shell function instead: chezmoi-cd () { cd $( chezmoi source-path ) } Typing chezmoi-cd will then change the directory of your current shell to chezmoi's source directory. Why are the prompt* functions only available in config file templates? chezmoi regularly needs to execute templates to determine the target contents of files. For example, templates are executed for the apply , diff , and status commands, amongst many others. Having to interactively respond each time would quickly become tiresome. Therefore, chezmoi only provides these functions when generating a config file from a config file template (e.g. when you run chezmoi init or chezmoi --init apply ). Why not use Ansible/Chef/Puppet/Salt, or similar to manage my dotfiles instead? Whole system management tools are more than capable of managing your dotfiles, but they are large systems that entail several disadvantages. Compared to whole system management tools, chezmoi offers: Small, focused feature set designed for dotfiles. There's simply less to learn with chezmoi compared to whole system management tools. Easy installation and execution on every platform, without root access. Installing chezmoi requires only copying a single binary file with no external dependencies. Executing chezmoi just involves running the binary. In contrast, installing and running a whole system management tool typically requires installing a scripting language runtime, several packages, and running a system service, all typically requiring root access. chezmoi's focus and simple installation means that it runs almost everywhere: from tiny ARM-based Linux systems to Windows desktops, from inside lightweight containers to FreeBSD-based virtual machines in the cloud. Can I use chezmoi to manage files outside my home directory? In practice, yes, you can, but this usage is strongly discouraged beyond using your system's package manager to install the packages you need. chezmoi is designed to operate on your home directory, and is explicitly not a full system configuration management tool. That said, there are some ways to have chezmoi manage a few files outside your home directory. chezmoi's scripts can execute arbitrary commands, so you can use a run_ script that is run every time you run chezmoi apply , to, for example: Make the target file outside your home directory a symlink to a file managed by chezmoi in your home directory. Copy a file managed by chezmoi inside your home directory to the target file. Execute a template with chezmoi execute-template --output=$FILENAME template where $FILENAME is outside the target directory. chezmoi executes all scripts as the user executing chezmoi, so you may need to add extra privilege elevation commands like sudo or PowerShell start -verb runas -wait to your script. chezmoi, by default, operates on your home directory but this can be overridden with the --destination command line flag or by specifying destDir in your config file, and could even be the root directory ( / or C:\\ ). This allows you, in theory, to use chezmoi to manage any file in your filesystem, but this usage is extremely strongly discouraged. If your needs extend beyond modifying a handful of files outside your target system, then existing configuration management tools like Puppet , Chef , Ansible , and Salt are much better suited - and of course can be called from a chezmoi run_ script. Put your Puppet Manifests, Chef Recipes, Ansible Modules, and Salt Modules in a directory ignored by .chezmoiignore so they do not pollute your home directory. What inspired chezmoi? chezmoi was inspired by Puppet , but was created because Puppet is an overkill for managing your personal configuration files. The focus of chezmoi will always be personal home directory management. If your needs grow beyond that, switch to a whole system configuration management tool. Where does the name \"chezmoi\" come from? \"chezmoi\" splits to \"chez moi\" and pronounced /\u0283e\u026a mwa/ (shay-moi) meaning \"at my house\" in French. It's seven letters long, which is an appropriate length for a command that is only run occasionally. If you prefer a shorter command, add an alias to your shell configuration, for example: alias cz = chezmoi","title":"Design"},{"location":"user-guide/frequently-asked-questions/design/#design","text":"","title":"Design"},{"location":"user-guide/frequently-asked-questions/design/#do-i-have-to-use-chezmoi-edit-to-edit-my-dotfiles","text":"No. chezmoi edit is a convenience command that has a couple of useful features, but you don't have to use it. You can also run chezmoi cd and then just edit the files in the source state directly. After saving an edited file you can run chezmoi diff to check what effect the changes would have, and run chezmoi apply if you're happy with them. If there are inconsistencies that you want to keep, then chezmoi merge-all will help you resolve any differences. chezmoi edit provides the following useful features: The arguments to chezmoi edit are the files in their target location, so you don't have to think about source state attributes and your editor's syntax highlighting will work. If the dotfile is encrypted in the source state, then chezmoi edit will decrypt it to a private directory, open that file in your $EDITOR , and then re-encrypt the file when you quit your editor. This makes encryption transparent. With the --diff and --apply options you can see what would change and apply those changes without having to run chezmoi diff or chezmoi apply . If you have configured git auto commits or git auto pushes then chezmoi edit will create commits and push them for you. If you chose to edit files in the source state and you're using VIM then github.com/alker0/chezmoi.vim gives you syntax highlighting, however you edit your files. Besides using the plugin, you can use modeline to tell VIM the correct filetype. For example, put # vim: filetype=zsh at the top of dot_zshrc , and VIM will treat dot_zshrc as zsh file.","title":"Do I have to use chezmoi edit to edit my dotfiles?"},{"location":"user-guide/frequently-asked-questions/design/#why-doesnt-chezmoi-use-symlinks-like-gnu-stow","text":"Symlinks are first class citizens in chezmoi: chezmoi supports creating them, updating them, removing them, and even more advanced features not found in other dotfile managers like having the same symlink point to different targets on different machines by using a template. With chezmoi, you only use a symlink where you really need a symlink, in contrast to some other dotfile managers (e.g. GNU Stow) which require the use of symlinks as a layer of indirection between a dotfile's location (which can be anywhere in your home directory) and a dotfile's content (which needs to be in a centralized directory that you manage with version control). chezmoi solves this problem in a different way. Instead of using a symlink to redirect from the dotfile's location to the centralized directory, chezmoi generates the dotfile as a regular file in its final location from the contents of the centralized directory. This approach allows chezmoi to provide features that are not possible when using symlinks, for example having files that are encrypted, executable, private, or templates. There is nothing special about dotfiles managed by chezmoi whereas dotfiles managed with GNU Stow are special because they're actually symlinks to somewhere else. The only advantage to using GNU Stow-style symlinks is that changes that you make to the dotfile's contents in the centralized directory are immediately visible whenever you save them, whereas chezmoi currently requires you to pass the --watch flag to chezmoi edit or set edit.watch to true in your configuration file. If you really want to use symlinks, then chezmoi provides a symlink mode which uses symlinks where possible. This configures chezmoi to work like GNU Stow and have it create a set of symlinks back to a central directory, but this currently requires a bit of manual work (as described in #167 ). chezmoi might get some automation to help (see #886 for example) but it does need some convincing use cases that demonstrate that a symlink from a dotfile's location to its contents in a central directory is better than just having the correct dotfile contents.","title":"Why doesn't chezmoi use symlinks like GNU Stow?"},{"location":"user-guide/frequently-asked-questions/design/#what-are-the-limitations-of-chezmois-symlink-mode","text":"In symlink mode chezmoi replaces targets with symlinks to the source directory if the target is a regular file and is not encrypted, executable, private, or a template. Symlinks cannot be used for encrypted files because the source state contains the ciphertext, not the plaintext. Symlinks cannot be used for executable files as the executable bit would need to be set on the file in the source directory and chezmoi uses only regular files and directories in its source state for portability across operating systems. This may change in the future. Symlinks cannot be used for private files because git does not persist group and world permission bits. Symlinks cannot be used for templated files because the source state contains the template, not the result of executing the template. Symlinks cannot be used for entire directories because of chezmoi's use of attributes in the filename mangles entries in the directory, directories might have the exact_ attribute and contain empty files, and the directory's entries might not be usable with symlinks. In symlink mode, running chezmoi add does not immediately replace the targets with a symlink. You must run chezmoi apply to create the symlinks.","title":"What are the limitations of chezmoi's symlink mode?"},{"location":"user-guide/frequently-asked-questions/design/#why-does-chezmoi-use-weird-filenames","text":"There are a number of criticisms of how chezmoi uses filenames: The long source file names are weird and verbose. Not all possible file permissions can be represented. Everything is in a single directory, which can end up containing many entries. chezmoi's decision to store metadata in filenames is a deliberate, practical, compromise. Firstly, almost all programs store metadata in filenames: the filename's extension. chezmoi extends the filename to storing metadata in attributes in the filename's prefix as well. The dot_ attribute makes it transparent which dotfiles are managed by chezmoi and which files are ignored by chezmoi. chezmoi ignores all files and directories that start with . so no special whitelists are needed for version control systems and their control files (e.g. .git and .gitignore ). chezmoi needs per-file metadata to know how to interpret the source file's contents, for example to know when the source file is a template or if the file's contents are encrypted. By storing this metadata in the filename, the metadata is unambiguously associated with a single file and adding, updating, or removing a single file touches only a single file in the source state. Changes to the metadata (e.g. chezmoi chattr +template $TARGET ) are simple file renames and isolated to the affected file. If chezmoi were to, say, use a common configuration file listing which files were templates and/or encrypted, then changes to any file would require updates to the common configuration file. Automating updates to configuration files requires a round trip (read config file, update config, write config) and it is not always possible preserve comments and formatting. chezmoi's attributes of executable_ , private_ , and readonly_ allow the file permissions 0o644 , 0o755 , 0o600 , 0o700 , 0o444 , 0o555 , 0o400 , and 0o500 to be represented. Directories can only have permissions 0o755 , 0o700 , or 0o500 . In practice, these cover all permissions typically used for dotfiles. If this does cause a genuine problem for you, please open an issue on GitHub . File permissions and modes like executable_ , private_ , readonly_ , and symlink_ could also be stored in the filesystem, rather than in the filename. However, this requires the permissions to be preserved and handled by the underlying version control system and filesystem. chezmoi provides first-class support for Windows, where the executable_ and private_ attributes have no direct equivalents and symbolic links are not always permitted. By using regular files and directories, chezmoi avoids variations in the operating system, version control system, and filesystem making it both more robust and more portable. chezmoi uses a 1:1 mapping between entries in the source state and entries in the target state. This mapping is bi-directional and unambiguous. However, this also means that dotfiles that in the same directory in the target state must be in the same directory in the source state. In particular, every entry managed by chezmoi in the root of your home directory has a corresponding entry in the root of your source directory, which can mean that you end up with a lot of entries in the root of your source directory. This can be mitigated by using .chezmoiroot file. If chezmoi were to permit, say, multiple separate source directories (so you could, say, put dot_bashrc in a bash/ subdirectory, and dot_vimrc in a vim/ subdirectory, but have chezmoi apply map these to ~/.bashrc and ~/.vimrc in the root of your home directory) then the mapping between source and target states is no longer bidirectional nor unambiguous, which significantly increases complexity and requires more user interaction. For example, if both bash/dot_bashrc and vim/dot_bashrc exist, what should be the contents of ~/.bashrc ? If you run chezmoi add ~/.zshrc , should dot_zshrc be stored in the source bash/ directory, the source vim/ directory, or somewhere else? How does the user communicate their preferences? chezmoi has many users and any changes to the source state representation must be backwards-compatible. In summary, chezmoi's source state representation is a compromise with both advantages and disadvantages. Changes to the representation will be considered, but must meet the following criteria, in order of importance: Be fully backwards-compatible for existing users. Fix a genuine problem encountered in practice. Be independent of the underlying operating system, version control system, and filesystem. Not add significant extra complexity to the user interface or underlying implementation.","title":"Why does chezmoi use weird filenames?"},{"location":"user-guide/frequently-asked-questions/design/#can-chezmoi-support-multiple-sources-or-multiple-source-states","text":"With some dotfile managers, dotfiles can be distributed across multiple directories or even multiple repos. For example, the user might have one directory per application, or separate repos for home and work configurations, or even separate git submodules for different applications. These can be considered multiple sources of truth for the target state. This, however, comes with complications: Multiple sources of truth complicate the user interface. When running chezmoi add $FILE , which source should $FILE be added to? Multiple sources of truth do not compose easily if target files overlap. For example, if you have two sources, both of which need to set an environment variable in .bashrc , how do you handle this when both, only one, or neither source might be activated? What if the sources are mutually exclusive, e.g. if the VIM source and the Emacs source both want to set the $EDITOR environment variable? Multiple sources of truth are not always independent. Related to the previous point, consider a source that adds an applications's configuration files and shell completions. Should the shell completions be part of the applications's source or of the shell's source? chezmoi instead makes the opinionated choice to use a single source of truth, i.e. a single branch in a single git repo. Using a single source of truth avoids the inherent complexity and ambiguity of multiple sources. chezmoi provides mechanisms like templates (for minor differences), .chezmoiignore (for controlling the presence or otherwise of complete files and directories), and password manager integration (so secrets never need to be stored in a repo) handle machine-to-machine differences. Externals make it easy to pull in dotfiles from third-party sources. That said, if you are keen to use multiple sources of truth with chezmoi, you have a number of options with some scripting around chezmoi. Firstly, you can run chezmoi apply with different arguments to the --config and --source flags which will apply to the same destination. So that you only have to type one command you can wrap this in a shell function, for example: chezmoi-apply () { chezmoi apply --config ~/.config/chezmoi-home/chezmoi.toml \\ --source ~/.local/share/chezmoi-home && \\ chezmoi apply --config ~/.config/chezmoi-work/chezmoi.toml \\ --source ~/.local/share/chezmoi-work } If you want to generate multiple configuration files with chezmoi init then you will need the --config-path flag. For more advanced use, use the --destination , --cache , and --persistent-state flags. Secondly, you can assemble a single source state from multiple sources and then use chezmoi apply . For example, if you have multiple source states in subdirectories of ~/.dotfiles : #!/bin/bash # create a combined source state in a temporary directory combined_source = \" $( mktemp -d ) \" # remove the temporary source state on exit trap 'rm -rf -- \"${combined_source}\"' INT TERM # copy files from multiple sources into the temporary source state for source in $HOME /.dotfiles/* ; do cp -r \" ${ source } \" /* \" ${ combined_source } \" done # apply the temporary source state chezmoi apply --source \" ${ combined_source } \" Thirdly, you can use a run_ script to invoke a second instance of chezmoi, as used by @felipecrs .","title":"Can chezmoi support multiple sources or multiple source states?"},{"location":"user-guide/frequently-asked-questions/design/#why-does-chezmoi-cd-spawn-a-shell-instead-of-just-changing-directory","text":"chezmoi cd spawns a shell because it is not possible for a program to change the working directory of its parent process. You can add a shell function instead: chezmoi-cd () { cd $( chezmoi source-path ) } Typing chezmoi-cd will then change the directory of your current shell to chezmoi's source directory.","title":"Why does chezmoi cd spawn a shell instead of just changing directory?"},{"location":"user-guide/frequently-asked-questions/design/#why-are-the-prompt-functions-only-available-in-config-file-templates","text":"chezmoi regularly needs to execute templates to determine the target contents of files. For example, templates are executed for the apply , diff , and status commands, amongst many others. Having to interactively respond each time would quickly become tiresome. Therefore, chezmoi only provides these functions when generating a config file from a config file template (e.g. when you run chezmoi init or chezmoi --init apply ).","title":"Why are the prompt* functions only available in config file templates?"},{"location":"user-guide/frequently-asked-questions/design/#why-not-use-ansiblechefpuppetsalt-or-similar-to-manage-my-dotfiles-instead","text":"Whole system management tools are more than capable of managing your dotfiles, but they are large systems that entail several disadvantages. Compared to whole system management tools, chezmoi offers: Small, focused feature set designed for dotfiles. There's simply less to learn with chezmoi compared to whole system management tools. Easy installation and execution on every platform, without root access. Installing chezmoi requires only copying a single binary file with no external dependencies. Executing chezmoi just involves running the binary. In contrast, installing and running a whole system management tool typically requires installing a scripting language runtime, several packages, and running a system service, all typically requiring root access. chezmoi's focus and simple installation means that it runs almost everywhere: from tiny ARM-based Linux systems to Windows desktops, from inside lightweight containers to FreeBSD-based virtual machines in the cloud.","title":"Why not use Ansible/Chef/Puppet/Salt, or similar to manage my dotfiles instead?"},{"location":"user-guide/frequently-asked-questions/design/#can-i-use-chezmoi-to-manage-files-outside-my-home-directory","text":"In practice, yes, you can, but this usage is strongly discouraged beyond using your system's package manager to install the packages you need. chezmoi is designed to operate on your home directory, and is explicitly not a full system configuration management tool. That said, there are some ways to have chezmoi manage a few files outside your home directory. chezmoi's scripts can execute arbitrary commands, so you can use a run_ script that is run every time you run chezmoi apply , to, for example: Make the target file outside your home directory a symlink to a file managed by chezmoi in your home directory. Copy a file managed by chezmoi inside your home directory to the target file. Execute a template with chezmoi execute-template --output=$FILENAME template where $FILENAME is outside the target directory. chezmoi executes all scripts as the user executing chezmoi, so you may need to add extra privilege elevation commands like sudo or PowerShell start -verb runas -wait to your script. chezmoi, by default, operates on your home directory but this can be overridden with the --destination command line flag or by specifying destDir in your config file, and could even be the root directory ( / or C:\\ ). This allows you, in theory, to use chezmoi to manage any file in your filesystem, but this usage is extremely strongly discouraged. If your needs extend beyond modifying a handful of files outside your target system, then existing configuration management tools like Puppet , Chef , Ansible , and Salt are much better suited - and of course can be called from a chezmoi run_ script. Put your Puppet Manifests, Chef Recipes, Ansible Modules, and Salt Modules in a directory ignored by .chezmoiignore so they do not pollute your home directory.","title":"Can I use chezmoi to manage files outside my home directory?"},{"location":"user-guide/frequently-asked-questions/design/#what-inspired-chezmoi","text":"chezmoi was inspired by Puppet , but was created because Puppet is an overkill for managing your personal configuration files. The focus of chezmoi will always be personal home directory management. If your needs grow beyond that, switch to a whole system configuration management tool.","title":"What inspired chezmoi?"},{"location":"user-guide/frequently-asked-questions/design/#where-does-the-name-chezmoi-come-from","text":"\"chezmoi\" splits to \"chez moi\" and pronounced /\u0283e\u026a mwa/ (shay-moi) meaning \"at my house\" in French. It's seven letters long, which is an appropriate length for a command that is only run occasionally. If you prefer a shorter command, add an alias to your shell configuration, for example: alias cz = chezmoi","title":"Where does the name \"chezmoi\" come from?"},{"location":"user-guide/frequently-asked-questions/encryption/","text":"Encryption How do I configure chezmoi to encrypt files but only request a passphrase the first time chezmoi init is run? The following steps use age for encryption. This can be achieved with the following process: Generate an age private key. Encrypt the private key with a passphrase. Configure chezmoi to decrypt the private key if needed. Configure chezmoi to use the private key. Add encrypted files. First, change to chezmoi's source directory: $ chezmoi cd Generate an age private key encrypted with a passphrase in the file key.txt.age with the command: $ age-keygen | age --passphrase > key.txt.age Public key: age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl Enter passphrase (leave empty to autogenerate a secure one): Confirm passphrase: Use a strong passphrase and make a note of the public key ( age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl in this case). Add key.txt.age to .chezmoiignore so that chezmoi does not try to create it: $ echo key.txt.age >> .chezmoiignore Configure chezmoi to decrypt the passphrase-encrypted private key if needed: $ cat > run_once_before_decrypt-private-key.sh.tmpl <<EOF # !/bin/sh if [ ! -f \"${HOME}/key.txt\" ]; then age --decrypt --output \"${HOME}/key.txt\" \"{{ .chezmoi.sourceDir }}/key.txt.age\" chmod 600 \"${HOME}/key.txt\" fi EOF Configure chezmoi to use the public and private key for encryption: $ cat >> .chezmoi.toml.tmpl <<EOF encryption = \"age\" [age] identity = \"~/key.txt\" recipient = \"age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl\" EOF age.recipient must be your public key from above. Run chezmoi init --apply to generate the chezmoi's config file and decrypt the private key: $ chezmoi init --apply Enter passphrase: At this stage everything is configured and git status should report: $ git status On branch main Untracked files: (use \"git add <file>...\" to include in what will be committed) .chezmoi.toml.tmpl .chezmoiignore key.txt.age run_once_before_decrypt-private-key.sh.tmpl nothing added to commit but untracked files present (use \"git add\" to track) If you're happy with the changes you can commit them. All four files should be committed. Add files that you want to encrypt using the --encrypt argument to chezmoi add , for example: $ chezmoi add --encrypt ~/.ssh/id_rsa When you run chezmoi init on a new machine you will be prompted to enter your passphrase once to decrypt key.txt.age . Your decrypted private key will be stored in ~/key.txt .","title":"Encryption"},{"location":"user-guide/frequently-asked-questions/encryption/#encryption","text":"","title":"Encryption"},{"location":"user-guide/frequently-asked-questions/encryption/#how-do-i-configure-chezmoi-to-encrypt-files-but-only-request-a-passphrase-the-first-time-chezmoi-init-is-run","text":"The following steps use age for encryption. This can be achieved with the following process: Generate an age private key. Encrypt the private key with a passphrase. Configure chezmoi to decrypt the private key if needed. Configure chezmoi to use the private key. Add encrypted files. First, change to chezmoi's source directory: $ chezmoi cd Generate an age private key encrypted with a passphrase in the file key.txt.age with the command: $ age-keygen | age --passphrase > key.txt.age Public key: age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl Enter passphrase (leave empty to autogenerate a secure one): Confirm passphrase: Use a strong passphrase and make a note of the public key ( age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl in this case). Add key.txt.age to .chezmoiignore so that chezmoi does not try to create it: $ echo key.txt.age >> .chezmoiignore Configure chezmoi to decrypt the passphrase-encrypted private key if needed: $ cat > run_once_before_decrypt-private-key.sh.tmpl <<EOF # !/bin/sh if [ ! -f \"${HOME}/key.txt\" ]; then age --decrypt --output \"${HOME}/key.txt\" \"{{ .chezmoi.sourceDir }}/key.txt.age\" chmod 600 \"${HOME}/key.txt\" fi EOF Configure chezmoi to use the public and private key for encryption: $ cat >> .chezmoi.toml.tmpl <<EOF encryption = \"age\" [age] identity = \"~/key.txt\" recipient = \"age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl\" EOF age.recipient must be your public key from above. Run chezmoi init --apply to generate the chezmoi's config file and decrypt the private key: $ chezmoi init --apply Enter passphrase: At this stage everything is configured and git status should report: $ git status On branch main Untracked files: (use \"git add <file>...\" to include in what will be committed) .chezmoi.toml.tmpl .chezmoiignore key.txt.age run_once_before_decrypt-private-key.sh.tmpl nothing added to commit but untracked files present (use \"git add\" to track) If you're happy with the changes you can commit them. All four files should be committed. Add files that you want to encrypt using the --encrypt argument to chezmoi add , for example: $ chezmoi add --encrypt ~/.ssh/id_rsa When you run chezmoi init on a new machine you will be prompted to enter your passphrase once to decrypt key.txt.age . Your decrypted private key will be stored in ~/key.txt .","title":"How do I configure chezmoi to encrypt files but only request a passphrase the first time chezmoi init is run?"},{"location":"user-guide/frequently-asked-questions/general/","text":"General What other questions have been asked about chezmoi? See the issues and discussions . Where do I ask a question that isn't answered here? Please open an issue on GitHub or start a discussion . I like chezmoi. How do I say thanks? Thank you! chezmoi was written to scratch a personal itch, and I'm very happy that it's useful to you. Please give chezmoi a star on GitHub , and if you're happy to share your public dotfile repo then tag it with chezmoi . If you write an article or give a talk on chezmoi please inform the author (e.g. by opening an issue ) so it can be added to chezmoi's articles, podcasts, and videos page . Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :)","title":"General"},{"location":"user-guide/frequently-asked-questions/general/#general","text":"","title":"General"},{"location":"user-guide/frequently-asked-questions/general/#what-other-questions-have-been-asked-about-chezmoi","text":"See the issues and discussions .","title":"What other questions have been asked about chezmoi?"},{"location":"user-guide/frequently-asked-questions/general/#where-do-i-ask-a-question-that-isnt-answered-here","text":"Please open an issue on GitHub or start a discussion .","title":"Where do I ask a question that isn't answered here?"},{"location":"user-guide/frequently-asked-questions/general/#i-like-chezmoi-how-do-i-say-thanks","text":"Thank you! chezmoi was written to scratch a personal itch, and I'm very happy that it's useful to you. Please give chezmoi a star on GitHub , and if you're happy to share your public dotfile repo then tag it with chezmoi . If you write an article or give a talk on chezmoi please inform the author (e.g. by opening an issue ) so it can be added to chezmoi's articles, podcasts, and videos page . Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :)","title":"I like chezmoi. How do I say thanks?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/","text":"Troubleshooting How can I quickly check for problems with chezmoi on my machine? Run: $ chezmoi doctor Anything ok is fine, anything warning is only a problem if you want to use the related feature, and anything error indicates a definite problem. A specific command is not behaving as I expect. How can I debug it? The --verbose flag makes chezmoi to print extra information about what it is doing. The --debug flag makes chezmoi print very detailed step by step information. The output of chezmoi diff is broken and does not contain color. What could be wrong? By default, chezmoi's diff output includes ANSI color escape sequences (e.g. ESC[37m ) and is piped into your pager (by default less ). chezmoi assumes that your pager passes through the ANSI color escape sequences, as configured on many systems, but not all. If your pager does not pass through ANSI color escape sequences then you will see monochrome diff output with uninterpreted ANSI color escape sequences. This can typically by fixed by setting the environment variable $ export LESS = -R which instructs less to display \"raw\" control characters via the -R / --RAW-CONTROL-CHARS option. You can also set the pager configuration variable in your config file, for example: ~/.config/chezmoi/chezmoi.toml pager = \"less -R\" If you have set a different pager (via the pager configuration variable or PAGER environment variable) then you must ensure that it passes through raw control characters. Alternatively, you can use the --color=false option to chezmoi to disable colors or the --no-pager option to chezmoi to disable the pager. Why do I get a blank buffer or empty file when running chezmoi edit ? In this case, chezmoi edit typically prints a warning like: chezmoi: warning: $EDITOR $TMPDIR/$FILENAME: returned in less than 1s chezmoi edit performs a bit of magic to improve the experience of editing files in the source state by invoking your editor with filenames in a temporary directory that look like filenames in your home directory. What's happening here is that your editor command is exiting immediately, so chezmoi thinks you've finished editing and so removes the temporary directory, but actually your editor command has forked a edit process in the background, and that edit process opens a now non-existent file. To fix this you have to configure your editor command to remain in the foreground until you have finished editing the file, so chezmoi knows when to remove the temporary directory. VIM VSCode Pass the -f flag, e.g. by setting the edit.flags configuration variable to [\"-f\"] , or by setting the EDITOR environment variable to include the -f flag, e.g. export EDITOR=\"vim -f\" . Pass the --wait flag, e.g. by setting the edit.flags configuration variable to [\"--wait\"] or by setting the EDITOR environment variable to include the --wait flag, e.g. export EDITOR=\"code --wait\" . The \"bit of magic\" that chezmoi edit performs includes: chezmoi edit makes the filename opened by your editor more closely match the target filename, which can help your editor choose the correct syntax highlighting. For example, if you run chezmoi edit ~/.zshrc , your editor is be opened with $TMPDIR/.zshrc but you'll actually be editing ~/.local/share/chezmoi/dot_zshrc . Under the hood, chezmoi creates a hardlink in a temporary directory to the file in your source directory, so even though your editor thinks it's editing .zshrc , it is really editing dot_zshrc in your source directory. If the source file is encrypted then chezmoi edit transparently decrypts and re-encrypts the file for you. Specifically, chezmoi decrypts the file into a private temporary directory and open your editor with the decrypted file, and re-encrypts the file when you exit your editor. If the source file is a template, then chezmoi edit preserves the .tmpl extension. chezmoi makes ~/.ssh/config group writeable. How do I stop this? By default, chezmoi uses your system's umask when creating files. On most systems the default umask is 022 but some systems use 002 , which means that files and directories are group writeable by default. You can override this for chezmoi by setting the umask configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml umask = 0 o022 Note This will apply to all files and directories that chezmoi manages and will ensure that none of them are group writeable. It is not currently possible to control group write permissions for individual files or directories. Please open an issue on GitHub if you need this. chezmoi reports chezmoi: user: lookup userid NNNNN: input/output error This is likely because the chezmoi binary you are using was statically compiled with musl and the machine you are running on uses LDAP or NIS. The immediate fix is to use a package built for your distribution (e.g a .deb or .rpm ) which is linked against glibc and includes LDAP/NIS support instead of the statically-compiled binary. If the problem still persists, then please open an issue on GitHub . chezmoi reports chezmoi: timeout or chezmoi: timeout obtaining persistent state lock chezmoi will report this when it is unable to lock its persistent state ( ~/.config/chezmoi/chezmoistate.boltdb ), typically because another instance of chezmoi is currently running and holding the lock. This can happen, for example, if you have a run_ script that invokes chezmoi , or are running chezmoi in another window. Under the hood, chezmoi uses bbolt which permits multiple simultaneous readers, but only one writer (with no readers). Commands that take a write lock include add , apply , edit , forget , import , init , state , unmanage , and update . Commands that take a read lock include diff , status , and verify . chezmoi reports chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: exec format error when executing a template script This error occurs when you have a newline before the #! in your script. Suppress the newline by including a - before the closing }} on the first line. For example, if your template script begins with {{ if eq .chezmoi.os \"linux\" }} #!/bin/sh change this to {{ if eq .chezmoi.os \"linux\" -}} #!/bin/sh chezmoi reports chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: permission denied when executing a script This error occurs when your temporary directory is mounted with the noexec option. As chezmoi scripts can be templates, encrypted, or both, chezmoi needs to write the final script's contents to a file so that it can be executed by the operating system. By default, chezmoi will use $TMPDIR for this. You can change the temporary directory into which chezmoi writes and executes scripts with the scriptTempDir configuration variable. For example, to use a subdirectory of your home directory you can use: ~/.config/chezmoi/chezmoi.toml scriptTempDir = \"~/tmp\" chezmoi reports chezmoi: mkdir xxxxx: no such file or directory when trying to manage file or directory This error occurs when you try to add directory/file to be managed via chezmoi but the same directory is only listed in .chezmoiexternal.$FORMAT . A workaround can be applied in a such case via manually creating import directory in chezmoi source directory (typically ~/.local/share/chezmoi ) and create .keep file. For example, if .chezmoiexternal.toml has the configuration: [\".config/nvim\"] type = \"git-repo\" url = \"https://github.com/NvChad/NvChad.git\" refreshPeriod = \"168h\" [\".config/nvim\".pull] args = [ \"--ff-only\" ] Now chezmoi add ~/.config/direnv/direnvrc will raise the error: chezmoi: mkdir /home/<user>/.local/share/chezmoi/dot_config/direnv: no such file or directory But the workaround can be applied: $ chezmoi cd $ mkdir -p dot_config/ $ touch dot_config/.keep Now once that done chezmoi add ~/.config/direnv/direnvrc should work. For reference see this issue chezmoi reports read /dev/stdin: permission denied or write /dev/stdout: permission denied when I redirect standard input or standard output This error occurs when you installed chezmoi with snap and is caused by a long-standing bug in snap . This is not a bug in chezmoi and there is nothing that chezmoi can do about this. However, there are two workarounds: Firstly, you can use alternatives to shell redirection. For standard input: $ chezmoi $COMMAND < $FILENAME # fails $ cat $FILENAME | chezmoi $COMMAND # succeeds For standard output: $ chezmoi $COMMAND > $FILENAME # fails $ chezmoi $COMMAND -o $FILENAME # succeeds $ chezmoi $COMMAND --output = $FILENAME # succeeds $ chezmoi $COMMAND | tee $FILENAME >/dev/null # succeeds Secondly, you can install chezmoi with any of the many supported install methods instead of snap. chezmoi reports fork/exec ...: no such file or directory when running scripts on Termux You are likely using a hardcoded script interpreter in the shebang line of your scripts, e.g. #!/bin/bash /bin/bash does not exist on Termux. You must update the shebang line to point to the actual bash interpreter. The easiest way to do this is make the script a template and use the lookPath template function, for example: #!{{ lookPath \"bash\" }}","title":"Troubleshooting"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#how-can-i-quickly-check-for-problems-with-chezmoi-on-my-machine","text":"Run: $ chezmoi doctor Anything ok is fine, anything warning is only a problem if you want to use the related feature, and anything error indicates a definite problem.","title":"How can I quickly check for problems with chezmoi on my machine?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#a-specific-command-is-not-behaving-as-i-expect-how-can-i-debug-it","text":"The --verbose flag makes chezmoi to print extra information about what it is doing. The --debug flag makes chezmoi print very detailed step by step information.","title":"A specific command is not behaving as I expect. How can I debug it?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#the-output-of-chezmoi-diff-is-broken-and-does-not-contain-color-what-could-be-wrong","text":"By default, chezmoi's diff output includes ANSI color escape sequences (e.g. ESC[37m ) and is piped into your pager (by default less ). chezmoi assumes that your pager passes through the ANSI color escape sequences, as configured on many systems, but not all. If your pager does not pass through ANSI color escape sequences then you will see monochrome diff output with uninterpreted ANSI color escape sequences. This can typically by fixed by setting the environment variable $ export LESS = -R which instructs less to display \"raw\" control characters via the -R / --RAW-CONTROL-CHARS option. You can also set the pager configuration variable in your config file, for example: ~/.config/chezmoi/chezmoi.toml pager = \"less -R\" If you have set a different pager (via the pager configuration variable or PAGER environment variable) then you must ensure that it passes through raw control characters. Alternatively, you can use the --color=false option to chezmoi to disable colors or the --no-pager option to chezmoi to disable the pager.","title":"The output of chezmoi diff is broken and does not contain color. What could be wrong?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#why-do-i-get-a-blank-buffer-or-empty-file-when-running-chezmoi-edit","text":"In this case, chezmoi edit typically prints a warning like: chezmoi: warning: $EDITOR $TMPDIR/$FILENAME: returned in less than 1s chezmoi edit performs a bit of magic to improve the experience of editing files in the source state by invoking your editor with filenames in a temporary directory that look like filenames in your home directory. What's happening here is that your editor command is exiting immediately, so chezmoi thinks you've finished editing and so removes the temporary directory, but actually your editor command has forked a edit process in the background, and that edit process opens a now non-existent file. To fix this you have to configure your editor command to remain in the foreground until you have finished editing the file, so chezmoi knows when to remove the temporary directory. VIM VSCode Pass the -f flag, e.g. by setting the edit.flags configuration variable to [\"-f\"] , or by setting the EDITOR environment variable to include the -f flag, e.g. export EDITOR=\"vim -f\" . Pass the --wait flag, e.g. by setting the edit.flags configuration variable to [\"--wait\"] or by setting the EDITOR environment variable to include the --wait flag, e.g. export EDITOR=\"code --wait\" . The \"bit of magic\" that chezmoi edit performs includes: chezmoi edit makes the filename opened by your editor more closely match the target filename, which can help your editor choose the correct syntax highlighting. For example, if you run chezmoi edit ~/.zshrc , your editor is be opened with $TMPDIR/.zshrc but you'll actually be editing ~/.local/share/chezmoi/dot_zshrc . Under the hood, chezmoi creates a hardlink in a temporary directory to the file in your source directory, so even though your editor thinks it's editing .zshrc , it is really editing dot_zshrc in your source directory. If the source file is encrypted then chezmoi edit transparently decrypts and re-encrypts the file for you. Specifically, chezmoi decrypts the file into a private temporary directory and open your editor with the decrypted file, and re-encrypts the file when you exit your editor. If the source file is a template, then chezmoi edit preserves the .tmpl extension.","title":"Why do I get a blank buffer or empty file when running chezmoi edit?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-makes-sshconfig-group-writeable-how-do-i-stop-this","text":"By default, chezmoi uses your system's umask when creating files. On most systems the default umask is 022 but some systems use 002 , which means that files and directories are group writeable by default. You can override this for chezmoi by setting the umask configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml umask = 0 o022 Note This will apply to all files and directories that chezmoi manages and will ensure that none of them are group writeable. It is not currently possible to control group write permissions for individual files or directories. Please open an issue on GitHub if you need this.","title":"chezmoi makes ~/.ssh/config group writeable. How do I stop this?"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-user-lookup-userid-nnnnn-inputoutput-error","text":"This is likely because the chezmoi binary you are using was statically compiled with musl and the machine you are running on uses LDAP or NIS. The immediate fix is to use a package built for your distribution (e.g a .deb or .rpm ) which is linked against glibc and includes LDAP/NIS support instead of the statically-compiled binary. If the problem still persists, then please open an issue on GitHub .","title":"chezmoi reports chezmoi: user: lookup userid NNNNN: input/output error"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-timeout-or-chezmoi-timeout-obtaining-persistent-state-lock","text":"chezmoi will report this when it is unable to lock its persistent state ( ~/.config/chezmoi/chezmoistate.boltdb ), typically because another instance of chezmoi is currently running and holding the lock. This can happen, for example, if you have a run_ script that invokes chezmoi , or are running chezmoi in another window. Under the hood, chezmoi uses bbolt which permits multiple simultaneous readers, but only one writer (with no readers). Commands that take a write lock include add , apply , edit , forget , import , init , state , unmanage , and update . Commands that take a read lock include diff , status , and verify .","title":"chezmoi reports chezmoi: timeout or chezmoi: timeout obtaining persistent state lock"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-forkexec-tmpxxxxxxxxxxxx-exec-format-error-when-executing-a-template-script","text":"This error occurs when you have a newline before the #! in your script. Suppress the newline by including a - before the closing }} on the first line. For example, if your template script begins with {{ if eq .chezmoi.os \"linux\" }} #!/bin/sh change this to {{ if eq .chezmoi.os \"linux\" -}} #!/bin/sh","title":"chezmoi reports chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: exec format error when executing a template script"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-forkexec-tmpxxxxxxxxxxxx-permission-denied-when-executing-a-script","text":"This error occurs when your temporary directory is mounted with the noexec option. As chezmoi scripts can be templates, encrypted, or both, chezmoi needs to write the final script's contents to a file so that it can be executed by the operating system. By default, chezmoi will use $TMPDIR for this. You can change the temporary directory into which chezmoi writes and executes scripts with the scriptTempDir configuration variable. For example, to use a subdirectory of your home directory you can use: ~/.config/chezmoi/chezmoi.toml scriptTempDir = \"~/tmp\"","title":"chezmoi reports chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: permission denied when executing a script"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-mkdir-xxxxx-no-such-file-or-directory-when-trying-to-manage-file-or-directory","text":"This error occurs when you try to add directory/file to be managed via chezmoi but the same directory is only listed in .chezmoiexternal.$FORMAT . A workaround can be applied in a such case via manually creating import directory in chezmoi source directory (typically ~/.local/share/chezmoi ) and create .keep file. For example, if .chezmoiexternal.toml has the configuration: [\".config/nvim\"] type = \"git-repo\" url = \"https://github.com/NvChad/NvChad.git\" refreshPeriod = \"168h\" [\".config/nvim\".pull] args = [ \"--ff-only\" ] Now chezmoi add ~/.config/direnv/direnvrc will raise the error: chezmoi: mkdir /home/<user>/.local/share/chezmoi/dot_config/direnv: no such file or directory But the workaround can be applied: $ chezmoi cd $ mkdir -p dot_config/ $ touch dot_config/.keep Now once that done chezmoi add ~/.config/direnv/direnvrc should work. For reference see this issue","title":"chezmoi reports chezmoi: mkdir xxxxx: no such file or directory when trying to manage file or directory"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-read-devstdin-permission-denied-or-write-devstdout-permission-denied-when-i-redirect-standard-input-or-standard-output","text":"This error occurs when you installed chezmoi with snap and is caused by a long-standing bug in snap . This is not a bug in chezmoi and there is nothing that chezmoi can do about this. However, there are two workarounds: Firstly, you can use alternatives to shell redirection. For standard input: $ chezmoi $COMMAND < $FILENAME # fails $ cat $FILENAME | chezmoi $COMMAND # succeeds For standard output: $ chezmoi $COMMAND > $FILENAME # fails $ chezmoi $COMMAND -o $FILENAME # succeeds $ chezmoi $COMMAND --output = $FILENAME # succeeds $ chezmoi $COMMAND | tee $FILENAME >/dev/null # succeeds Secondly, you can install chezmoi with any of the many supported install methods instead of snap.","title":"chezmoi reports read /dev/stdin: permission denied or write /dev/stdout: permission denied when I redirect standard input or standard output"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-forkexec-no-such-file-or-directory-when-running-scripts-on-termux","text":"You are likely using a hardcoded script interpreter in the shebang line of your scripts, e.g. #!/bin/bash /bin/bash does not exist on Termux. You must update the shebang line to point to the actual bash interpreter. The easiest way to do this is make the script a template and use the lookPath template function, for example: #!{{ lookPath \"bash\" }}","title":"chezmoi reports fork/exec ...: no such file or directory when running scripts on Termux"},{"location":"user-guide/frequently-asked-questions/usage/","text":"Usage How do I edit my dotfiles with chezmoi? There are five popular approaches: Use chezmoi edit $FILE . This will open the source file for $FILE in your editor, including . For extra ease, use chezmoi edit --apply $FILE to apply the changes when you quit your editor, and chezmoi edit --watch $FILE to apply the changes whenever you save the file. Use chezmoi cd and edit the files in the source directory directly. Run chezmoi diff to see what changes would be made, and chezmoi apply to make the changes. If your editor supports opening directories, run chezmoi edit with no arguments to open the source directory. Edit the file in your home directory, and then either re-add it by running chezmoi add $FILE or chezmoi re-add . Edit the file in your home directory, and then merge your changes with source state by running chezmoi merge $FILE . Note re-add doesn't work with templates. What are the consequences of \"bare\" modifications to the target files? If my .zshrc is managed by chezmoi and I edit ~/.zshrc without using chezmoi edit , what happens? Until you run chezmoi apply your modified ~/.zshrc will remain in place. When you run chezmoi apply chezmoi will detect that ~/.zshrc has changed since chezmoi last wrote it and prompt you what to do. You can resolve differences with a merge tool by running chezmoi merge ~/.zshrc . How can I tell what dotfiles in my home directory aren't managed by chezmoi? Is there an easy way to have chezmoi manage a subset of them? chezmoi unmanaged will list everything not managed by chezmoi. You can add entire directories with chezmoi add . How can I tell what dotfiles in my home directory are currently managed by chezmoi? chezmoi managed will list everything managed by chezmoi. If there's a mechanism in place for the above, is there also a way to tell chezmoi to ignore specific files or groups of files (e.g. by directory name or by glob)? By default, chezmoi ignores everything that you haven't explicitly added. If you have files in your source directory that you don't want added to your destination directory when you run chezmoi apply add their names to a file called .chezmoiignore in the source state. Patterns are supported, and you can change what's ignored from machine to machine. The full usage and syntax is described in the reference manual . If the target already exists, but is \"behind\" the source, can chezmoi be configured to preserve the target version before replacing it with one derived from the source? Yes. Run chezmoi add will update the source state with the target. To see diffs of what would change, without actually changing anything, use chezmoi diff . Once I've made a change to the source directory, how do I commit it? You have several options: chezmoi cd opens a shell in the source directory, where you can run your usual version control commands, like git add and git commit . chezmoi git runs git in the source directory and pass extra arguments to the command. If you're passing any flags, you'll need to use -- to prevent chezmoi from consuming them, for example chezmoi git -- commit -m \"Update dotfiles\" . You can configure chezmoi to automatically commit and push changes to your source state, as described in the how-to guide . I've made changes to both the destination state and the source state that I want to keep. How can I keep them both? chezmoi merge will open a merge tool to resolve differences between the source state, target state, and destination state. Copy the changes you want to keep in to the source state. Can I store/share my shell history with chezmoi? Not easily. chezmoi's only shared state between machines is your git repo, and creating a commit every time a command is entered would quickly become cumbersome. Instead, consider using a tool like atuin . You can use chezmoi to install and configure atuin on new machines. How do I install pre-requisites for templates? If you have a template that depends on some other tool, like curl , you may need to install it before chezmoi renders the template. To do so, use a run_before script that is not a template. Something like: run_before_00-install-pre-requisites.sh #!/bin/bash set -eu # Install curl if it's not already installed if ! command -v curl >/dev/null ; then sudo apt update sudo apt install -y curl fi Chezmoi will make sure to execute it before templating other files. Tip You can use scriptEnv to inject data into your scripts through environment variables . How do I enable shell completions? chezmoi includes shell completions for bash , Fig , fish , PowerShell , and zsh . If you have installed chezmoi via your package manager then the shell completion should already be installed. Please open an issue if this is not working correctly. chezmoi provides a completion command and a completion template function which return the shell completions for the given shell. These can be used either as a one-off or as part of your dotfiles repo. The details of how to use these depend on your shell.","title":"Usage"},{"location":"user-guide/frequently-asked-questions/usage/#usage","text":"","title":"Usage"},{"location":"user-guide/frequently-asked-questions/usage/#how-do-i-edit-my-dotfiles-with-chezmoi","text":"There are five popular approaches: Use chezmoi edit $FILE . This will open the source file for $FILE in your editor, including . For extra ease, use chezmoi edit --apply $FILE to apply the changes when you quit your editor, and chezmoi edit --watch $FILE to apply the changes whenever you save the file. Use chezmoi cd and edit the files in the source directory directly. Run chezmoi diff to see what changes would be made, and chezmoi apply to make the changes. If your editor supports opening directories, run chezmoi edit with no arguments to open the source directory. Edit the file in your home directory, and then either re-add it by running chezmoi add $FILE or chezmoi re-add . Edit the file in your home directory, and then merge your changes with source state by running chezmoi merge $FILE . Note re-add doesn't work with templates.","title":"How do I edit my dotfiles with chezmoi?"},{"location":"user-guide/frequently-asked-questions/usage/#what-are-the-consequences-of-bare-modifications-to-the-target-files-if-my-zshrc-is-managed-by-chezmoi-and-i-edit-zshrc-without-using-chezmoi-edit-what-happens","text":"Until you run chezmoi apply your modified ~/.zshrc will remain in place. When you run chezmoi apply chezmoi will detect that ~/.zshrc has changed since chezmoi last wrote it and prompt you what to do. You can resolve differences with a merge tool by running chezmoi merge ~/.zshrc .","title":"What are the consequences of \"bare\" modifications to the target files? If my .zshrc is managed by chezmoi and I edit ~/.zshrc without using chezmoi edit, what happens?"},{"location":"user-guide/frequently-asked-questions/usage/#how-can-i-tell-what-dotfiles-in-my-home-directory-arent-managed-by-chezmoi-is-there-an-easy-way-to-have-chezmoi-manage-a-subset-of-them","text":"chezmoi unmanaged will list everything not managed by chezmoi. You can add entire directories with chezmoi add .","title":"How can I tell what dotfiles in my home directory aren't managed by chezmoi? Is there an easy way to have chezmoi manage a subset of them?"},{"location":"user-guide/frequently-asked-questions/usage/#how-can-i-tell-what-dotfiles-in-my-home-directory-are-currently-managed-by-chezmoi","text":"chezmoi managed will list everything managed by chezmoi.","title":"How can I tell what dotfiles in my home directory are currently managed by chezmoi?"},{"location":"user-guide/frequently-asked-questions/usage/#if-theres-a-mechanism-in-place-for-the-above-is-there-also-a-way-to-tell-chezmoi-to-ignore-specific-files-or-groups-of-files-eg-by-directory-name-or-by-glob","text":"By default, chezmoi ignores everything that you haven't explicitly added. If you have files in your source directory that you don't want added to your destination directory when you run chezmoi apply add their names to a file called .chezmoiignore in the source state. Patterns are supported, and you can change what's ignored from machine to machine. The full usage and syntax is described in the reference manual .","title":"If there's a mechanism in place for the above, is there also a way to tell chezmoi to ignore specific files or groups of files (e.g. by directory name or by glob)?"},{"location":"user-guide/frequently-asked-questions/usage/#if-the-target-already-exists-but-is-behind-the-source-can-chezmoi-be-configured-to-preserve-the-target-version-before-replacing-it-with-one-derived-from-the-source","text":"Yes. Run chezmoi add will update the source state with the target. To see diffs of what would change, without actually changing anything, use chezmoi diff .","title":"If the target already exists, but is \"behind\" the source, can chezmoi be configured to preserve the target version before replacing it with one derived from the source?"},{"location":"user-guide/frequently-asked-questions/usage/#once-ive-made-a-change-to-the-source-directory-how-do-i-commit-it","text":"You have several options: chezmoi cd opens a shell in the source directory, where you can run your usual version control commands, like git add and git commit . chezmoi git runs git in the source directory and pass extra arguments to the command. If you're passing any flags, you'll need to use -- to prevent chezmoi from consuming them, for example chezmoi git -- commit -m \"Update dotfiles\" . You can configure chezmoi to automatically commit and push changes to your source state, as described in the how-to guide .","title":"Once I've made a change to the source directory, how do I commit it?"},{"location":"user-guide/frequently-asked-questions/usage/#ive-made-changes-to-both-the-destination-state-and-the-source-state-that-i-want-to-keep-how-can-i-keep-them-both","text":"chezmoi merge will open a merge tool to resolve differences between the source state, target state, and destination state. Copy the changes you want to keep in to the source state.","title":"I've made changes to both the destination state and the source state that I want to keep. How can I keep them both?"},{"location":"user-guide/frequently-asked-questions/usage/#can-i-storeshare-my-shell-history-with-chezmoi","text":"Not easily. chezmoi's only shared state between machines is your git repo, and creating a commit every time a command is entered would quickly become cumbersome. Instead, consider using a tool like atuin . You can use chezmoi to install and configure atuin on new machines.","title":"Can I store/share my shell history with chezmoi?"},{"location":"user-guide/frequently-asked-questions/usage/#how-do-i-install-pre-requisites-for-templates","text":"If you have a template that depends on some other tool, like curl , you may need to install it before chezmoi renders the template. To do so, use a run_before script that is not a template. Something like: run_before_00-install-pre-requisites.sh #!/bin/bash set -eu # Install curl if it's not already installed if ! command -v curl >/dev/null ; then sudo apt update sudo apt install -y curl fi Chezmoi will make sure to execute it before templating other files. Tip You can use scriptEnv to inject data into your scripts through environment variables .","title":"How do I install pre-requisites for templates?"},{"location":"user-guide/frequently-asked-questions/usage/#how-do-i-enable-shell-completions","text":"chezmoi includes shell completions for bash , Fig , fish , PowerShell , and zsh . If you have installed chezmoi via your package manager then the shell completion should already be installed. Please open an issue if this is not working correctly. chezmoi provides a completion command and a completion template function which return the shell completions for the given shell. These can be used either as a one-off or as part of your dotfiles repo. The details of how to use these depend on your shell.","title":"How do I enable shell completions?"},{"location":"user-guide/machines/containers-and-vms/","text":"Containers and VMs You can use chezmoi to manage your dotfiles in GitHub Codespaces , Visual Studio Codespaces , and Visual Studio Code Remote - Containers . For a quick start, you can clone the chezmoi/dotfiles repository which supports Codespaces out of the box. The workflow is different to using chezmoi on a new machine, notably: These systems will automatically clone your dotfiles repo to ~/dotfiles , so there is no need to clone your repo yourself. The installation script must be non-interactive. When running in a Codespace, the environment variable CODESPACES will be set to true . You can read its value with the env template function . First, if you are using a chezmoi configuration file template, ensure that it is non-interactive when running in Codespaces, for example, .chezmoi.toml.tmpl might contain: {{- $codespaces:= env \"CODESPACES\" | not | not -}} sourceDir = {{ .chezmoi.sourceDir | quote }} [data] name = \"Your name\" codespaces = {{ $codespaces }} {{- if $codespaces }}{{/* Codespaces dotfiles setup is non-interactive, so set an email address */}} email = \"your@email.com\" {{- else }}{{/* Interactive setup, so prompt for an email address */}} email = {{ promptString \"email\" | quote }} {{- end }} This sets the codespaces template variable, so you don't have to repeat (env \"CODESPACES\") in your templates. It also sets the sourceDir configuration to the --source argument passed in chezmoi init . Second, create an install.sh script that installs chezmoi and your dotfiles and add it to .chezmoiignore and your dotfiles repo: $ chezmoi generate install.sh > install.sh $ chmod a+x install.sh $ echo install.sh >> .chezmoiignore $ git add install.sh .chezmoiignore $ git commit -m \"Add install.sh\" The generated script installs the latest version of chezmoi in ~/.local/bin if needed, and then chezmoi init ... invokes chezmoi to create its configuration file and initialize your dotfiles. --apply tells chezmoi to apply the changes immediately, and --source=... tells chezmoi where to find the cloned dotfiles repo, which in this case is the same folder in which the script is running from. Finally, modify any of your templates to use the codespaces variable if needed. For example, to install vim-gtk on Linux but not in Codespaces, your run_once_install-packages.sh.tmpl might contain: {{- if (and (eq .chezmoi.os \"linux\") (not .codespaces)) -}} #!/bin/sh sudo apt install -y vim-gtk {{- end -}}","title":"Containers and VMs"},{"location":"user-guide/machines/containers-and-vms/#containers-and-vms","text":"You can use chezmoi to manage your dotfiles in GitHub Codespaces , Visual Studio Codespaces , and Visual Studio Code Remote - Containers . For a quick start, you can clone the chezmoi/dotfiles repository which supports Codespaces out of the box. The workflow is different to using chezmoi on a new machine, notably: These systems will automatically clone your dotfiles repo to ~/dotfiles , so there is no need to clone your repo yourself. The installation script must be non-interactive. When running in a Codespace, the environment variable CODESPACES will be set to true . You can read its value with the env template function . First, if you are using a chezmoi configuration file template, ensure that it is non-interactive when running in Codespaces, for example, .chezmoi.toml.tmpl might contain: {{- $codespaces:= env \"CODESPACES\" | not | not -}} sourceDir = {{ .chezmoi.sourceDir | quote }} [data] name = \"Your name\" codespaces = {{ $codespaces }} {{- if $codespaces }}{{/* Codespaces dotfiles setup is non-interactive, so set an email address */}} email = \"your@email.com\" {{- else }}{{/* Interactive setup, so prompt for an email address */}} email = {{ promptString \"email\" | quote }} {{- end }} This sets the codespaces template variable, so you don't have to repeat (env \"CODESPACES\") in your templates. It also sets the sourceDir configuration to the --source argument passed in chezmoi init . Second, create an install.sh script that installs chezmoi and your dotfiles and add it to .chezmoiignore and your dotfiles repo: $ chezmoi generate install.sh > install.sh $ chmod a+x install.sh $ echo install.sh >> .chezmoiignore $ git add install.sh .chezmoiignore $ git commit -m \"Add install.sh\" The generated script installs the latest version of chezmoi in ~/.local/bin if needed, and then chezmoi init ... invokes chezmoi to create its configuration file and initialize your dotfiles. --apply tells chezmoi to apply the changes immediately, and --source=... tells chezmoi where to find the cloned dotfiles repo, which in this case is the same folder in which the script is running from. Finally, modify any of your templates to use the codespaces variable if needed. For example, to install vim-gtk on Linux but not in Codespaces, your run_once_install-packages.sh.tmpl might contain: {{- if (and (eq .chezmoi.os \"linux\") (not .codespaces)) -}} #!/bin/sh sudo apt install -y vim-gtk {{- end -}}","title":"Containers and VMs"},{"location":"user-guide/machines/general/","text":"General Determine whether the current machine is a laptop or desktop The following template sets the $chassisType variable to \"desktop\" or \"laptop\" on macOS, Linux, and Windows. {{- $chassisType := \"desktop\" }} {{- if eq .chezmoi.os \"darwin\" }} {{- if contains \"MacBook\" (output \"sysctl\" \"-n\" \"hw.model\") }} {{- $chassisType = \"laptop\" }} {{- else }} {{- $chassisType = \"desktop\" }} {{- end }} {{- else if eq .chezmoi.os \"linux\" }} {{- $chassisType = (output \"hostnamectl\" \"--json=short\" | mustFromJson).Chassis }} {{- else if eq .chezmoi.os \"windows\" }} {{- $chassisType = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"if ((Get-CimInstance -Class Win32_Battery | Measure-Object).Count -gt 0) { Write-Output 'laptop' } else { Write-Output 'desktop' }\") | trim }} {{- end }} Determine how many CPU cores and threads the current machine has The following template sets the $cpuCores and $cpuThreads variables to the number of CPU cores and threads on the current machine respectively on macOS, Linux and Windows. {{- $cpuCores := 1 }} {{- $cpuThreads := 1 }} {{- if eq .chezmoi.os \"darwin\" }} {{- $cpuCores = (output \"sysctl\" \"-n\" \"hw.physicalcpu_max\") | trim | atoi }} {{- $cpuThreads = (output \"sysctl\" \"-n\" \"hw.logicalcpu_max\") | trim | atoi }} {{- else if eq .chezmoi.os \"linux\" }} {{- $cpuCores = (output \"sh\" \"-c\" \"lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines\") | trim | atoi }} {{- $cpuThreads = (output \"sh\" \"-c\" \"lscpu --online --parse | grep --invert-match '^#' | wc --lines\") | trim | atoi }} {{- else if eq .chezmoi.os \"windows\" }} {{- $cpuCores = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores\") | trim | atoi }} {{- $cpuThreads = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors\") | trim | atoi }} {{- end }} Example ~/.local/share/chezmoi/.chezmoi.toml.tmpl [data.cpu] cores = {{ $cpuCores }} threads = {{ $cpuThreads }} ~/.local/share/chezmoi/is_hyperthreaded.txt.tmpl {{- if gt .cpu.threads .cpu.cores -}} Hyperthreaded! {{- else -}} Not hyperthreaded! {{- end -}}","title":"General"},{"location":"user-guide/machines/general/#general","text":"","title":"General"},{"location":"user-guide/machines/general/#determine-whether-the-current-machine-is-a-laptop-or-desktop","text":"The following template sets the $chassisType variable to \"desktop\" or \"laptop\" on macOS, Linux, and Windows. {{- $chassisType := \"desktop\" }} {{- if eq .chezmoi.os \"darwin\" }} {{- if contains \"MacBook\" (output \"sysctl\" \"-n\" \"hw.model\") }} {{- $chassisType = \"laptop\" }} {{- else }} {{- $chassisType = \"desktop\" }} {{- end }} {{- else if eq .chezmoi.os \"linux\" }} {{- $chassisType = (output \"hostnamectl\" \"--json=short\" | mustFromJson).Chassis }} {{- else if eq .chezmoi.os \"windows\" }} {{- $chassisType = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"if ((Get-CimInstance -Class Win32_Battery | Measure-Object).Count -gt 0) { Write-Output 'laptop' } else { Write-Output 'desktop' }\") | trim }} {{- end }}","title":"Determine whether the current machine is a laptop or desktop"},{"location":"user-guide/machines/general/#determine-how-many-cpu-cores-and-threads-the-current-machine-has","text":"The following template sets the $cpuCores and $cpuThreads variables to the number of CPU cores and threads on the current machine respectively on macOS, Linux and Windows. {{- $cpuCores := 1 }} {{- $cpuThreads := 1 }} {{- if eq .chezmoi.os \"darwin\" }} {{- $cpuCores = (output \"sysctl\" \"-n\" \"hw.physicalcpu_max\") | trim | atoi }} {{- $cpuThreads = (output \"sysctl\" \"-n\" \"hw.logicalcpu_max\") | trim | atoi }} {{- else if eq .chezmoi.os \"linux\" }} {{- $cpuCores = (output \"sh\" \"-c\" \"lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines\") | trim | atoi }} {{- $cpuThreads = (output \"sh\" \"-c\" \"lscpu --online --parse | grep --invert-match '^#' | wc --lines\") | trim | atoi }} {{- else if eq .chezmoi.os \"windows\" }} {{- $cpuCores = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores\") | trim | atoi }} {{- $cpuThreads = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors\") | trim | atoi }} {{- end }} Example ~/.local/share/chezmoi/.chezmoi.toml.tmpl [data.cpu] cores = {{ $cpuCores }} threads = {{ $cpuThreads }} ~/.local/share/chezmoi/is_hyperthreaded.txt.tmpl {{- if gt .cpu.threads .cpu.cores -}} Hyperthreaded! {{- else -}} Not hyperthreaded! {{- end -}}","title":"Determine how many CPU cores and threads the current machine has"},{"location":"user-guide/machines/linux/","text":"Linux Combine operating system and Linux distribution conditionals There can be as much variation between Linux distributions as there is between operating systems. Due to text/template 's eager evaluation of conditionals, this means you often have to write templates with nested conditionals: {{ if eq .chezmoi.os \"darwin\" }} # macOS-specific code {{ else if eq .chezmoi.os \"linux\" }} {{ if eq .chezmoi.osRelease.id \"debian\" }} # Debian-specific code {{ else if eq .chezmoi.osRelease.id \"fedora\" }} # Fedora-specific code {{ end }} {{ end }} This can be simplified by combining the operating system and distribution into a single custom template variable. Put the following in your configuration file template: {{- $osid := .chezmoi.os -}} {{- if hasKey .chezmoi.osRelease \"id\" -}} {{- $osid = printf \"%s-%s\" .chezmoi.os .chezmoi.osRelease.id -}} {{- end -}} [data] osid = {{ $osid | quote }} This defines the .osid template variable to be {{ .chezmoi.os }} on machines without an os-release file , or to be {{ .chezmoi.os }}-{{ .chezmoi.osRelease.id }} on machines with an os-release file. You can then simplify your conditionals to be: {{ if eq .osid \"darwin\" }} # macOS-specific code {{ else if eq .osid \"linux-debian\" }} # Debian-specific code {{ else if eq .osid \"linux-fedora\" }} # Fedora-specific code {{ end }}","title":"Linux"},{"location":"user-guide/machines/linux/#linux","text":"","title":"Linux"},{"location":"user-guide/machines/linux/#combine-operating-system-and-linux-distribution-conditionals","text":"There can be as much variation between Linux distributions as there is between operating systems. Due to text/template 's eager evaluation of conditionals, this means you often have to write templates with nested conditionals: {{ if eq .chezmoi.os \"darwin\" }} # macOS-specific code {{ else if eq .chezmoi.os \"linux\" }} {{ if eq .chezmoi.osRelease.id \"debian\" }} # Debian-specific code {{ else if eq .chezmoi.osRelease.id \"fedora\" }} # Fedora-specific code {{ end }} {{ end }} This can be simplified by combining the operating system and distribution into a single custom template variable. Put the following in your configuration file template: {{- $osid := .chezmoi.os -}} {{- if hasKey .chezmoi.osRelease \"id\" -}} {{- $osid = printf \"%s-%s\" .chezmoi.os .chezmoi.osRelease.id -}} {{- end -}} [data] osid = {{ $osid | quote }} This defines the .osid template variable to be {{ .chezmoi.os }} on machines without an os-release file , or to be {{ .chezmoi.os }}-{{ .chezmoi.osRelease.id }} on machines with an os-release file. You can then simplify your conditionals to be: {{ if eq .osid \"darwin\" }} # macOS-specific code {{ else if eq .osid \"linux-debian\" }} # Debian-specific code {{ else if eq .osid \"linux-fedora\" }} # Fedora-specific code {{ end }}","title":"Combine operating system and Linux distribution conditionals"},{"location":"user-guide/machines/macos/","text":"macOS Use brew bundle to manage your brews and casks Homebrew's brew bundle subcommand allows you to specify a list of brews and casks to be installed. You can integrate this with chezmoi by creating a run_once_ script. For example, create a file in your source directory called run_once_before_install-packages-darwin.sh.tmpl containing: {{- if eq .chezmoi.os \"darwin\" -}} #!/bin/bash brew bundle --no-lock --file=/dev/stdin <<EOF brew \"git\" cask \"google-chrome\" EOF {{ end -}} Note The Brewfile is embedded directly in the script with a bash here document. chezmoi will run this script whenever its contents change, i.e. when you add or remove brews or casks. Determine the hostname The result of the hostname command on macOS depends on the network that the machine is connected to. For a stable result, use the scutil command: {{ $computerName := output \"scutil\" \"--get\" \"ComputerName\" | trim }}","title":"macOS"},{"location":"user-guide/machines/macos/#macos","text":"","title":"macOS"},{"location":"user-guide/machines/macos/#use-brew-bundle-to-manage-your-brews-and-casks","text":"Homebrew's brew bundle subcommand allows you to specify a list of brews and casks to be installed. You can integrate this with chezmoi by creating a run_once_ script. For example, create a file in your source directory called run_once_before_install-packages-darwin.sh.tmpl containing: {{- if eq .chezmoi.os \"darwin\" -}} #!/bin/bash brew bundle --no-lock --file=/dev/stdin <<EOF brew \"git\" cask \"google-chrome\" EOF {{ end -}} Note The Brewfile is embedded directly in the script with a bash here document. chezmoi will run this script whenever its contents change, i.e. when you add or remove brews or casks.","title":"Use brew bundle to manage your brews and casks"},{"location":"user-guide/machines/macos/#determine-the-hostname","text":"The result of the hostname command on macOS depends on the network that the machine is connected to. For a stable result, use the scutil command: {{ $computerName := output \"scutil\" \"--get\" \"ComputerName\" | trim }}","title":"Determine the hostname"},{"location":"user-guide/machines/windows/","text":"Windows Detect Windows Subsystem for Linux (WSL) WSL can be detected by looking for the string Microsoft or microsoft in /proc/sys/kernel/osrelease , which is available in the template variable .chezmoi.kernel.osrelease , for example: {{ if eq .chezmoi.os \"linux\" }} {{ if (.chezmoi.kernel.osrelease | lower | contains \"microsoft\") }} # WSL-specific code {{ end }} {{ end }} Run a PowerShell script as admin on Windows Put the following at the top of your script: # Self-elevate the script if required if ( -Not ( [Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity] :: GetCurrent ()). IsInRole ( [Security.Principal.WindowsBuiltInRole] 'Administrator' )) { if ( [int] ( Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber ) -ge 6000 ) { $CommandLine = \"-NoExit -File `\" \" + $MyInvocation . MyCommand . Path + \" `\" \" + $MyInvocation . UnboundArguments Start-Process -FilePath PowerShell . exe -Verb Runas -ArgumentList $CommandLine Exit } }","title":"Windows"},{"location":"user-guide/machines/windows/#windows","text":"","title":"Windows"},{"location":"user-guide/machines/windows/#detect-windows-subsystem-for-linux-wsl","text":"WSL can be detected by looking for the string Microsoft or microsoft in /proc/sys/kernel/osrelease , which is available in the template variable .chezmoi.kernel.osrelease , for example: {{ if eq .chezmoi.os \"linux\" }} {{ if (.chezmoi.kernel.osrelease | lower | contains \"microsoft\") }} # WSL-specific code {{ end }} {{ end }}","title":"Detect Windows Subsystem for Linux (WSL)"},{"location":"user-guide/machines/windows/#run-a-powershell-script-as-admin-on-windows","text":"Put the following at the top of your script: # Self-elevate the script if required if ( -Not ( [Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity] :: GetCurrent ()). IsInRole ( [Security.Principal.WindowsBuiltInRole] 'Administrator' )) { if ( [int] ( Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber ) -ge 6000 ) { $CommandLine = \"-NoExit -File `\" \" + $MyInvocation . MyCommand . Path + \" `\" \" + $MyInvocation . UnboundArguments Start-Process -FilePath PowerShell . exe -Verb Runas -ArgumentList $CommandLine Exit } }","title":"Run a PowerShell script as admin on Windows"},{"location":"user-guide/password-managers/","text":"Password manager integration Template functions allow you to retrieve secrets from many popular password managers. Using a password manager allows you to keep all your secrets in one place, make your dotfiles repo public, and synchronize changes to secrets across multiple machines.","title":"Password manager integration"},{"location":"user-guide/password-managers/#password-manager-integration","text":"Template functions allow you to retrieve secrets from many popular password managers. Using a password manager allows you to keep all your secrets in one place, make your dotfiles repo public, and synchronize changes to secrets across multiple machines.","title":"Password manager integration"},{"location":"user-guide/password-managers/1password/","text":"1Password chezmoi includes support for 1Password using the 1Password CLI to expose data as a template function. Note The 1Password CLI 2.0 has been released. Examples will be shown using the changed details for this version and examples for 1Password CLI 1.x will follow. Log in and get a session using: $ op account add --address $SUBDOMAIN .1password.com --email $EMAIL $ eval $( op signin --account $SUBDOMAIN ) This is not necessary if you are using biometric authentication. Info For 1Password CLI 1.x, use: $ eval $( op signin $SUBDOMAIN .1password.com $EMAIL ) The output of op read $URL is available as the onepasswordRead template function, for example: {{ onepasswordRead \"op://app-prod/db/password\" }} returns the output of $ op read op://app-prod/db/password Documents can be retrieved with: {{- onepasswordDocument \"$UUID\" -}} The output of op item get $UUID--format json ( op get item $UUID ) is available as the onepassword template function. chezmoi parses the JSON output and returns it as structured data. For example, if the output is: { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 2 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"$userUUID\" , \"created_at\" : \"2010-08-23T13:18:43Z\" , \"updated_at\" : \"2014-07-20T04:40:11Z\" , \"fields\" : [ { \"id\" : \"username\" , \"type\" : \"STRING\" , \"purpose\" : \"USERNAME\" , \"label\" : \"username\" , \"value\" : \"$USERNAME\" }, { \"id\" : \"password\" , \"type\" : \"CONCEALED\" , \"purpose\" : \"PASSWORD\" , \"label\" : \"password\" , \"value\" : \"$PASSWORD\" , \"password_details\" : { \"strength\" : \"FANTASTIC\" , \"history\" : [] } } ], \"urls\" : [ { \"primary\" : true , \"href\" : \"$URL\" } ] } Then you can access the password field with the syntax {{ (index (onepassword \"$UUID\").fields 1).value }} or: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info 1Password CLI 1.x returns a simpler structure: { \"uuid\" : \"$UUID\" , \"details\" : { \"password\" : \"$PASSWORD\" } } This allows for the syntax: {{ (onepassword \"$UUID\").details.password }} onepasswordDetailsFields returns a reworked version of the structure that allows the fields to be queried by key: { \"password\" : { \"id\" : \"password\" , \"label\" : \"password\" , \"password_details\" : { \"history\" : [], \"strength\" : \"FANTASTIC\" }, \"purpose\" : \"PASSWORD\" , \"type\" : \"CONCEALED\" , \"value\" : \"$PASSWORD\" }, \"username\" : { \"id\" : \"username\" , \"label\" : \"username\" , \"purpose\" : \"USERNAME\" , \"type\" : \"STRING\" , \"value\" : \"$USERNAME\" } } {{- (onepasswordDetailsFields \"$UUID\").password.value }} Additional fields may be obtained with onePasswordItemFields ; not all objects in 1Password have item fields. This can be tested with: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq . Note The extra - after the opening {{ and before the closing }} instructs the template language to remove any whitespace before and after the substitution. This removes any trailing newline added by your editor when saving the template. Sign-in prompt chezmoi will verify the availability and validity of a session token in the current environment. If it is missing or expired, you will be interactively prompted to sign-in again. In the past chezmoi used to simply exit with an error when no valid session was available. If you'd like to restore this behavior, set the onepassword.prompt configuration variable to false , for example: ~/.config/chezmoi/chezmoi.toml [onepassword] prompt = false Danger Do not use prompt on shared machines. A session token verified or acquired interactively will be passed to the 1Password CLI through a command line parameter, which is visible to other users of the same system.","title":"1Password"},{"location":"user-guide/password-managers/1password/#1password","text":"chezmoi includes support for 1Password using the 1Password CLI to expose data as a template function. Note The 1Password CLI 2.0 has been released. Examples will be shown using the changed details for this version and examples for 1Password CLI 1.x will follow. Log in and get a session using: $ op account add --address $SUBDOMAIN .1password.com --email $EMAIL $ eval $( op signin --account $SUBDOMAIN ) This is not necessary if you are using biometric authentication. Info For 1Password CLI 1.x, use: $ eval $( op signin $SUBDOMAIN .1password.com $EMAIL ) The output of op read $URL is available as the onepasswordRead template function, for example: {{ onepasswordRead \"op://app-prod/db/password\" }} returns the output of $ op read op://app-prod/db/password Documents can be retrieved with: {{- onepasswordDocument \"$UUID\" -}} The output of op item get $UUID--format json ( op get item $UUID ) is available as the onepassword template function. chezmoi parses the JSON output and returns it as structured data. For example, if the output is: { \"id\" : \"$UUID\" , \"title\" : \"$TITLE\" , \"version\" : 2 , \"vault\" : { \"id\" : \"$vaultUUID\" }, \"category\" : \"LOGIN\" , \"last_edited_by\" : \"$userUUID\" , \"created_at\" : \"2010-08-23T13:18:43Z\" , \"updated_at\" : \"2014-07-20T04:40:11Z\" , \"fields\" : [ { \"id\" : \"username\" , \"type\" : \"STRING\" , \"purpose\" : \"USERNAME\" , \"label\" : \"username\" , \"value\" : \"$USERNAME\" }, { \"id\" : \"password\" , \"type\" : \"CONCEALED\" , \"purpose\" : \"PASSWORD\" , \"label\" : \"password\" , \"value\" : \"$PASSWORD\" , \"password_details\" : { \"strength\" : \"FANTASTIC\" , \"history\" : [] } } ], \"urls\" : [ { \"primary\" : true , \"href\" : \"$URL\" } ] } Then you can access the password field with the syntax {{ (index (onepassword \"$UUID\").fields 1).value }} or: {{ range (onepassword \"$UUID\").fields -}} {{ if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}} {{ .value -}} {{ end -}} {{ end }} Info 1Password CLI 1.x returns a simpler structure: { \"uuid\" : \"$UUID\" , \"details\" : { \"password\" : \"$PASSWORD\" } } This allows for the syntax: {{ (onepassword \"$UUID\").details.password }} onepasswordDetailsFields returns a reworked version of the structure that allows the fields to be queried by key: { \"password\" : { \"id\" : \"password\" , \"label\" : \"password\" , \"password_details\" : { \"history\" : [], \"strength\" : \"FANTASTIC\" }, \"purpose\" : \"PASSWORD\" , \"type\" : \"CONCEALED\" , \"value\" : \"$PASSWORD\" }, \"username\" : { \"id\" : \"username\" , \"label\" : \"username\" , \"purpose\" : \"USERNAME\" , \"type\" : \"STRING\" , \"value\" : \"$USERNAME\" } } {{- (onepasswordDetailsFields \"$UUID\").password.value }} Additional fields may be obtained with onePasswordItemFields ; not all objects in 1Password have item fields. This can be tested with: $ chezmoi execute-template \"{{ onepasswordItemFields \\\" $UUID \\\" | toJson }}\" | jq . Note The extra - after the opening {{ and before the closing }} instructs the template language to remove any whitespace before and after the substitution. This removes any trailing newline added by your editor when saving the template.","title":"1Password"},{"location":"user-guide/password-managers/1password/#sign-in-prompt","text":"chezmoi will verify the availability and validity of a session token in the current environment. If it is missing or expired, you will be interactively prompted to sign-in again. In the past chezmoi used to simply exit with an error when no valid session was available. If you'd like to restore this behavior, set the onepassword.prompt configuration variable to false , for example: ~/.config/chezmoi/chezmoi.toml [onepassword] prompt = false Danger Do not use prompt on shared machines. A session token verified or acquired interactively will be passed to the 1Password CLI through a command line parameter, which is visible to other users of the same system.","title":"Sign-in prompt"},{"location":"user-guide/password-managers/aws-secrets-manager/","text":"AWS Secrets Manager chezmoi includes support for AWS Secrets Manager . Structured data can be retrieved with the awsSecretsManager template function, for example: exampleUsername = {{ (awsSecretsManager \"my-secret-name\").username }} examplePassword = {{ (awsSecretsManager \"my-secret-name\").password }} For retrieving unstructured data, the awsSecretsManagerRaw template function can be used. For example: exampleSecretString = {{ awsSecretsManagerRaw \"my-secret-string\" }} The AWS shared profile name and region can be specified in chezmoi's config file with awsSecretsManager.profile and awsSecretsManager.region respectively. By default, these values will be picked up from the standard environment variables and config files used by the standard AWS tooling. ~/.config/chezmoi/chezmoi.toml [awsSecretsManager] profile = myWorkProfile region = us-east-2","title":"AWS Secrets Manager"},{"location":"user-guide/password-managers/aws-secrets-manager/#aws-secrets-manager","text":"chezmoi includes support for AWS Secrets Manager . Structured data can be retrieved with the awsSecretsManager template function, for example: exampleUsername = {{ (awsSecretsManager \"my-secret-name\").username }} examplePassword = {{ (awsSecretsManager \"my-secret-name\").password }} For retrieving unstructured data, the awsSecretsManagerRaw template function can be used. For example: exampleSecretString = {{ awsSecretsManagerRaw \"my-secret-string\" }} The AWS shared profile name and region can be specified in chezmoi's config file with awsSecretsManager.profile and awsSecretsManager.region respectively. By default, these values will be picked up from the standard environment variables and config files used by the standard AWS tooling. ~/.config/chezmoi/chezmoi.toml [awsSecretsManager] profile = myWorkProfile region = us-east-2","title":"AWS Secrets Manager"},{"location":"user-guide/password-managers/bitwarden/","text":"Bitwarden chezmoi includes support for Bitwarden using the Bitwarden CLI to expose data as a template function. Log in to Bitwarden using: $ bw login $BITWARDEN_EMAIL Unlock your Bitwarden vault: $ bw unlock Set the BW_SESSION environment variable, as instructed. The structured data from bw get is available as the bitwarden template function in your config files, for example: username = {{ (bitwarden \"item\" \"example.com\").login.username }} password = {{ (bitwarden \"item\" \"example.com\").login.password }} Custom fields can be accessed with the bitwardenFields template function. For example, if you have a custom field named token you can retrieve its value with: {{ (bitwardenFields \"item\" \"example.com\").token.value }}","title":"Bitwarden"},{"location":"user-guide/password-managers/bitwarden/#bitwarden","text":"chezmoi includes support for Bitwarden using the Bitwarden CLI to expose data as a template function. Log in to Bitwarden using: $ bw login $BITWARDEN_EMAIL Unlock your Bitwarden vault: $ bw unlock Set the BW_SESSION environment variable, as instructed. The structured data from bw get is available as the bitwarden template function in your config files, for example: username = {{ (bitwarden \"item\" \"example.com\").login.username }} password = {{ (bitwarden \"item\" \"example.com\").login.password }} Custom fields can be accessed with the bitwardenFields template function. For example, if you have a custom field named token you can retrieve its value with: {{ (bitwardenFields \"item\" \"example.com\").token.value }}","title":"Bitwarden"},{"location":"user-guide/password-managers/custom/","text":"Custom You can use any command line tool that outputs secrets either as a string or in JSON format. Choose the binary by setting secret.command in your configuration file. You can then invoke this command with the secret and secretJSON template functions which return the raw output and JSON-decoded output respectively. All of the above secret managers can be supported in this way: Secret Manager secret.command Template skeleton 1Password op {{ secretJSON \"get\" \"item\" \"$ID\" }} Bitwarden bw {{ secretJSON \"get\" \"$ID\" }} HashiCorp Vault vault {{ secretJSON \"kv\" \"get\" \"-format=json\" \"$ID\" }} LastPass lpass {{ secretJSON \"show\" \"--json\" \"$ID\" }} KeePassXC keepassxc-cli Not possible (interactive command only) Keeper keeper {{ secretJSON \"get\" \"--format=json\" \"$ID\" }} pass pass {{ secret \"show\" \"$ID\" }} passhole ph {{ secret \"$ID\" \"password\" }}","title":"Custom"},{"location":"user-guide/password-managers/custom/#custom","text":"You can use any command line tool that outputs secrets either as a string or in JSON format. Choose the binary by setting secret.command in your configuration file. You can then invoke this command with the secret and secretJSON template functions which return the raw output and JSON-decoded output respectively. All of the above secret managers can be supported in this way: Secret Manager secret.command Template skeleton 1Password op {{ secretJSON \"get\" \"item\" \"$ID\" }} Bitwarden bw {{ secretJSON \"get\" \"$ID\" }} HashiCorp Vault vault {{ secretJSON \"kv\" \"get\" \"-format=json\" \"$ID\" }} LastPass lpass {{ secretJSON \"show\" \"--json\" \"$ID\" }} KeePassXC keepassxc-cli Not possible (interactive command only) Keeper keeper {{ secretJSON \"get\" \"--format=json\" \"$ID\" }} pass pass {{ secret \"show\" \"$ID\" }} passhole ph {{ secret \"$ID\" \"password\" }}","title":"Custom"},{"location":"user-guide/password-managers/gopass/","text":"gopass chezmoi includes support for gopass using the gopass CLI. The first line of the output of gopass show $PASS_NAME is available as the gopass template function, for example: {{ gopass \"$PASS_NAME\" }}","title":"gopass"},{"location":"user-guide/password-managers/gopass/#gopass","text":"chezmoi includes support for gopass using the gopass CLI. The first line of the output of gopass show $PASS_NAME is available as the gopass template function, for example: {{ gopass \"$PASS_NAME\" }}","title":"gopass"},{"location":"user-guide/password-managers/keepassxc/","text":"KeePassXC chezmoi includes support for KeePassXC using the KeePassXC CLI ( keepassxc-cli ) to expose data as a template function. Provide the path to your KeePassXC database in your configuration file: ~/.config/chezmoi/chezmoi.toml [keepassxc] database = \"/home/user/Passwords.kdbx\" The structured data from keepassxc-cli show $database is available as the keepassxc template function in your config files, for example: username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }} Additional attributes are available through the keepassxcAttribute function. For example, if you have an entry called SSH Key with an additional attribute called private-key , its value is available as: {{ keepassxcAttribute \"SSH Key\" \"private-key\" }} Info The KeepassXC CLI does not currently support any persistent login, which means that you will have to enter your password every time you run chezmoi. Support for non-password authentication methods (e.g. YubiKey) is currently poor. For more information, see this GitHub issue .","title":"KeePassXC"},{"location":"user-guide/password-managers/keepassxc/#keepassxc","text":"chezmoi includes support for KeePassXC using the KeePassXC CLI ( keepassxc-cli ) to expose data as a template function. Provide the path to your KeePassXC database in your configuration file: ~/.config/chezmoi/chezmoi.toml [keepassxc] database = \"/home/user/Passwords.kdbx\" The structured data from keepassxc-cli show $database is available as the keepassxc template function in your config files, for example: username = {{ (keepassxc \"example.com\").UserName }} password = {{ (keepassxc \"example.com\").Password }} Additional attributes are available through the keepassxcAttribute function. For example, if you have an entry called SSH Key with an additional attribute called private-key , its value is available as: {{ keepassxcAttribute \"SSH Key\" \"private-key\" }} Info The KeepassXC CLI does not currently support any persistent login, which means that you will have to enter your password every time you run chezmoi. Support for non-password authentication methods (e.g. YubiKey) is currently poor. For more information, see this GitHub issue .","title":"KeePassXC"},{"location":"user-guide/password-managers/keeper/","text":"Keeper chezmoi includes support for Keeper using the Commander CLI to expose data as a template function. Create a persistent login session as described in the Command CLI documentation . Passwords can be retrieved with the keeperFindPassword template function, for example: examplePasswordFromPath = {{ keeperFindPassword \"$PATH\" }} examplePasswordFromUid = {{ keeperFindPassword \"$UID\" }} For retrieving more complex data, use the keeper template function with a UID to retrieve structured data from keeper get or the keeperDataFields template function which restructures the output of keeper get in to a more convenient form, for example: keeperDataTitle = {{ (keeper \"$UID\").data.title }} examplePassword = {{ index (keeperDataFields \"$UID\").password 0 }} Extra arguments can be passed to the Keeper CLI command by setting the keeper.args variable in chezmoi's config file, for example: ~/.config/chezmoi/chezmoi.toml [keeper] args = [ \"--config\" , \"/path/to/config.json\" ]","title":"Keeper"},{"location":"user-guide/password-managers/keeper/#keeper","text":"chezmoi includes support for Keeper using the Commander CLI to expose data as a template function. Create a persistent login session as described in the Command CLI documentation . Passwords can be retrieved with the keeperFindPassword template function, for example: examplePasswordFromPath = {{ keeperFindPassword \"$PATH\" }} examplePasswordFromUid = {{ keeperFindPassword \"$UID\" }} For retrieving more complex data, use the keeper template function with a UID to retrieve structured data from keeper get or the keeperDataFields template function which restructures the output of keeper get in to a more convenient form, for example: keeperDataTitle = {{ (keeper \"$UID\").data.title }} examplePassword = {{ index (keeperDataFields \"$UID\").password 0 }} Extra arguments can be passed to the Keeper CLI command by setting the keeper.args variable in chezmoi's config file, for example: ~/.config/chezmoi/chezmoi.toml [keeper] args = [ \"--config\" , \"/path/to/config.json\" ]","title":"Keeper"},{"location":"user-guide/password-managers/keychain-and-windows-credentials-manager/","text":"Keychain and Windows Credentials Manager chezmoi includes support for Keychain (on macOS), GNOME Keyring (on Linux and FreeBSD), and Windows Credentials Manager (on Windows) via the zalando/go-keyring library. Set values with: $ chezmoi secret keyring set --service = $SERVICE --user = $USER Value: xxxxxxxx The value can then be used in templates using the keyring function which takes the service and user as arguments. For example, save a GitHub access token in keyring with: $ chezmoi secret keyring set --service = github --user = $GITHUB_USERNAME Value: xxxxxxxx and then include it in your ~/.gitconfig file with: [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} You can query the keyring from the command line: $ chezmoi secret keyring get --service = github --user = $GITHUB_USERNAME","title":"Keychain and Windows Credentials Manager"},{"location":"user-guide/password-managers/keychain-and-windows-credentials-manager/#keychain-and-windows-credentials-manager","text":"chezmoi includes support for Keychain (on macOS), GNOME Keyring (on Linux and FreeBSD), and Windows Credentials Manager (on Windows) via the zalando/go-keyring library. Set values with: $ chezmoi secret keyring set --service = $SERVICE --user = $USER Value: xxxxxxxx The value can then be used in templates using the keyring function which takes the service and user as arguments. For example, save a GitHub access token in keyring with: $ chezmoi secret keyring set --service = github --user = $GITHUB_USERNAME Value: xxxxxxxx and then include it in your ~/.gitconfig file with: [github] user = {{ .github.user | quote }} token = {{ keyring \"github\" .github.user | quote }} You can query the keyring from the command line: $ chezmoi secret keyring get --service = github --user = $GITHUB_USERNAME","title":"Keychain and Windows Credentials Manager"},{"location":"user-guide/password-managers/lastpass/","text":"LastPass chezmoi includes support for LastPass using the LastPass CLI to expose data as a template function. Log in to LastPass using: $ lpass login $LASTPASS_USERNAME Check that lpass is working correctly by showing password data: $ lpass show --json $LASTPASS_ENTRY_ID where $LASTPASS_ENTRY_ID is a LastPass Entry Specification . The structured data from lpass show --json id is available as the lastpass template function. The value will be an array of objects. You can use the index function and .Field syntax of the text/template language to extract the field you want. For example, to extract the password field from first the \"GitHub\" entry, use: githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} chezmoi automatically parses the note value of the LastPass entry as colon-separated key-value pairs, so, for example, you can extract a private SSH key like this: {{ (index (lastpass \"SSH\") 0).note.privateKey }} Keys in the note section written as CamelCase Words are converted to camelCaseWords . If the note value does not contain colon-separated key-value pairs, then you can use lastpassRaw to get its raw value, for example: {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"LastPass"},{"location":"user-guide/password-managers/lastpass/#lastpass","text":"chezmoi includes support for LastPass using the LastPass CLI to expose data as a template function. Log in to LastPass using: $ lpass login $LASTPASS_USERNAME Check that lpass is working correctly by showing password data: $ lpass show --json $LASTPASS_ENTRY_ID where $LASTPASS_ENTRY_ID is a LastPass Entry Specification . The structured data from lpass show --json id is available as the lastpass template function. The value will be an array of objects. You can use the index function and .Field syntax of the text/template language to extract the field you want. For example, to extract the password field from first the \"GitHub\" entry, use: githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }} chezmoi automatically parses the note value of the LastPass entry as colon-separated key-value pairs, so, for example, you can extract a private SSH key like this: {{ (index (lastpass \"SSH\") 0).note.privateKey }} Keys in the note section written as CamelCase Words are converted to camelCaseWords . If the note value does not contain colon-separated key-value pairs, then you can use lastpassRaw to get its raw value, for example: {{ (index (lastpassRaw \"SSH Private Key\") 0).note }}","title":"LastPass"},{"location":"user-guide/password-managers/pass/","text":"pass chezmoi includes support for pass using the pass CLI. The first line of the output of pass show $PASS_NAME is available as the pass template function, for example: {{ pass \"$PASS_NAME\" }}","title":"pass"},{"location":"user-guide/password-managers/pass/#pass","text":"chezmoi includes support for pass using the pass CLI. The first line of the output of pass show $PASS_NAME is available as the pass template function, for example: {{ pass \"$PASS_NAME\" }}","title":"pass"},{"location":"user-guide/password-managers/passhole/","text":"Passhole chezmoi includes support for KeePass using the passhole CLI ( ph ) to expose data as a template function.","title":"passhole"},{"location":"user-guide/password-managers/passhole/#passhole","text":"chezmoi includes support for KeePass using the passhole CLI ( ph ) to expose data as a template function.","title":"Passhole"},{"location":"user-guide/password-managers/vault/","text":"Vault chezmoi includes support for Vault using the Vault CLI to expose data as a template function. The vault CLI needs to be correctly configured on your machine, e.g. the VAULT_ADDR and VAULT_TOKEN environment variables must be set correctly. Verify that this is the case by running: $ vault kv get -format = json $KEY The structured data from vault kv get -format=json is available as the vault template function. You can use the .Field syntax of the text/template language to extract the data you want. For example: {{ (vault \"$KEY\").data.data.password }}","title":"Vault"},{"location":"user-guide/password-managers/vault/#vault","text":"chezmoi includes support for Vault using the Vault CLI to expose data as a template function. The vault CLI needs to be correctly configured on your machine, e.g. the VAULT_ADDR and VAULT_TOKEN environment variables must be set correctly. Verify that this is the case by running: $ vault kv get -format = json $KEY The structured data from vault kv get -format=json is available as the vault template function. You can use the .Field syntax of the text/template language to extract the data you want. For example: {{ (vault \"$KEY\").data.data.password }}","title":"Vault"},{"location":"user-guide/tools/diff/","text":"Diff Use a custom diff tool By default, chezmoi uses a built-in diff. You can use a custom tool by setting the diff.command and diff.args configuration variables. The elements of diff.args are interpreted as templates with the variables .Destination and .Target containing filenames of the file in the destination state and the target state respectively. For example, to use meld , specify: ~/.config/chezmoi/chezmoi.toml [diff] command = \"meld\" args = [ \"--diff\" , \"{{ .Destination }}\" , \"{{ .Target }}\" ] Hint If you generate your config file from a config file template, then you'll need to escape the {{ and }} in your config file template so that they appear in your generated config file. Don't show scripts in the diff output By default, chezmoi diff will show all changes, including the contents of scripts that will be run. You can exclude scripts from the diff output by setting the diff.exclude configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ] Don't show externals in the diff output To exclude diffs from externals, either pass the --exclude=externals flag or set diff.exclude to [\"externals\"] in your config file. Customize the diff pager You can change the diff format, and/or pipe the output into a pager of your choice by setting diff.pager configuration variable. For example, to use diff-so-fancy specify: ~/.config/chezmoi/chezmoi.toml [diff] pager = \"diff-so-fancy\" The pager can be disabled using the --no-pager flag or by setting diff.pager to an empty string. Show human-friendly diffs for binary files Similar to git, chezmoi includes a \"textconv\" feature that can transform file contents before passing them to the diff program. This is primarily useful for generating human-readable diffs of binary files. For example, to show diffs of macOS .plist files, add the following to your configuration file: JSON TOML YAML ~/.config/chezmoi/chezmoi.json { \"textconv\" : [ \"pattern\" : \"**/*.plist\" , \"command\" : \"plutil\" , \"args\" : [ \"-convert\" , \"xml1\" , \"-o\" , \"-\" , \"-\" ] ] } ~/.config/chezmoi/chezmoi.toml [[textconv]] pattern = \"**/*.plist\" command = \"plutil\" args = [ \"-convert\" , \"xml1\" , \"-o\" , \"-\" , \"-\" ] ~/.config/chezmoi/chezmoi.yaml textconv : - pattern : \"**/*.plist\" command : \"plutil\" args : - \"-convert\" - \"xml1\" - \"-o\" - \"-\" , - \"-\" This will pipe all .plist files through plutil -convert xml1 -o - - before showing differences.","title":"Diff"},{"location":"user-guide/tools/diff/#diff","text":"","title":"Diff"},{"location":"user-guide/tools/diff/#use-a-custom-diff-tool","text":"By default, chezmoi uses a built-in diff. You can use a custom tool by setting the diff.command and diff.args configuration variables. The elements of diff.args are interpreted as templates with the variables .Destination and .Target containing filenames of the file in the destination state and the target state respectively. For example, to use meld , specify: ~/.config/chezmoi/chezmoi.toml [diff] command = \"meld\" args = [ \"--diff\" , \"{{ .Destination }}\" , \"{{ .Target }}\" ] Hint If you generate your config file from a config file template, then you'll need to escape the {{ and }} in your config file template so that they appear in your generated config file.","title":"Use a custom diff tool"},{"location":"user-guide/tools/diff/#dont-show-scripts-in-the-diff-output","text":"By default, chezmoi diff will show all changes, including the contents of scripts that will be run. You can exclude scripts from the diff output by setting the diff.exclude configuration variable in your configuration file, for example: ~/.config/chezmoi/chezmoi.toml [diff] exclude = [ \"scripts\" ]","title":"Don't show scripts in the diff output"},{"location":"user-guide/tools/diff/#dont-show-externals-in-the-diff-output","text":"To exclude diffs from externals, either pass the --exclude=externals flag or set diff.exclude to [\"externals\"] in your config file.","title":"Don't show externals in the diff output"},{"location":"user-guide/tools/diff/#customize-the-diff-pager","text":"You can change the diff format, and/or pipe the output into a pager of your choice by setting diff.pager configuration variable. For example, to use diff-so-fancy specify: ~/.config/chezmoi/chezmoi.toml [diff] pager = \"diff-so-fancy\" The pager can be disabled using the --no-pager flag or by setting diff.pager to an empty string.","title":"Customize the diff pager"},{"location":"user-guide/tools/diff/#show-human-friendly-diffs-for-binary-files","text":"Similar to git, chezmoi includes a \"textconv\" feature that can transform file contents before passing them to the diff program. This is primarily useful for generating human-readable diffs of binary files. For example, to show diffs of macOS .plist files, add the following to your configuration file: JSON TOML YAML ~/.config/chezmoi/chezmoi.json { \"textconv\" : [ \"pattern\" : \"**/*.plist\" , \"command\" : \"plutil\" , \"args\" : [ \"-convert\" , \"xml1\" , \"-o\" , \"-\" , \"-\" ] ] } ~/.config/chezmoi/chezmoi.toml [[textconv]] pattern = \"**/*.plist\" command = \"plutil\" args = [ \"-convert\" , \"xml1\" , \"-o\" , \"-\" , \"-\" ] ~/.config/chezmoi/chezmoi.yaml textconv : - pattern : \"**/*.plist\" command : \"plutil\" args : - \"-convert\" - \"xml1\" - \"-o\" - \"-\" , - \"-\" This will pipe all .plist files through plutil -convert xml1 -o - - before showing differences.","title":"Show human-friendly diffs for binary files"},{"location":"user-guide/tools/editor/","text":"Editor Use your preferred editor with chezmoi edit and chezmoi edit-config By default, chezmoi will use your preferred editor as defined by the $VISUAL or $EDITOR environment variables, falling back to a default editor depending on your operating system ( vi on UNIX-like operating systems, notepad.exe on Windows). You can configure chezmoi to use your preferred editor by either setting the $EDITOR environment variable or setting the edit.command variable in your configuration file. The editor command must only return when you have finished editing the files. chezmoi will emit a warning if your editor command returns too quickly. In the specific case of using VSCode or Codium as your editor, you must pass the --wait flag, for example, in your shell config: $ export EDITOR = \"code --wait\" Or in chezmoi's configuration file: ~/.config/chezmoi/chezmoi.toml [edit] command = \"code\" args = [ \"--wait\" ] Configure VIM to run chezmoi apply whenever you save a dotfile Put the following in your .vimrc : ~/.vimrc autocmd BufWritePost ~ /.local/ share /chezmoi/ * ! chezmoi apply -- source - path \"%\" Use chezmoi with emacs github.com/tuh8888/chezmoi.el provides convenience functions for interacting with chezmoi from emacs, and is available in MELPA .","title":"Editor"},{"location":"user-guide/tools/editor/#editor","text":"","title":"Editor"},{"location":"user-guide/tools/editor/#use-your-preferred-editor-with-chezmoi-edit-and-chezmoi-edit-config","text":"By default, chezmoi will use your preferred editor as defined by the $VISUAL or $EDITOR environment variables, falling back to a default editor depending on your operating system ( vi on UNIX-like operating systems, notepad.exe on Windows). You can configure chezmoi to use your preferred editor by either setting the $EDITOR environment variable or setting the edit.command variable in your configuration file. The editor command must only return when you have finished editing the files. chezmoi will emit a warning if your editor command returns too quickly. In the specific case of using VSCode or Codium as your editor, you must pass the --wait flag, for example, in your shell config: $ export EDITOR = \"code --wait\" Or in chezmoi's configuration file: ~/.config/chezmoi/chezmoi.toml [edit] command = \"code\" args = [ \"--wait\" ]","title":"Use your preferred editor with chezmoi edit and chezmoi edit-config"},{"location":"user-guide/tools/editor/#configure-vim-to-run-chezmoi-apply-whenever-you-save-a-dotfile","text":"Put the following in your .vimrc : ~/.vimrc autocmd BufWritePost ~ /.local/ share /chezmoi/ * ! chezmoi apply -- source - path \"%\"","title":"Configure VIM to run chezmoi apply whenever you save a dotfile"},{"location":"user-guide/tools/editor/#use-chezmoi-with-emacs","text":"github.com/tuh8888/chezmoi.el provides convenience functions for interacting with chezmoi from emacs, and is available in MELPA .","title":"Use chezmoi with emacs"},{"location":"user-guide/tools/http-or-socks5-proxy/","text":"HTTP or SOCKS5 proxy chezmoi supports HTTP, HTTPS, and SOCKS5 proxies. Set the HTTP_PROXY , HTTPS_PROXY , and NO_PROXY environment variables, or their lowercase equivalents, for example: $ HTTP_PROXY = socks5://127.0.0.1:1080 chezmoi apply --refresh-externals","title":"HTTP or SOCKS5 proxy"},{"location":"user-guide/tools/http-or-socks5-proxy/#http-or-socks5-proxy","text":"chezmoi supports HTTP, HTTPS, and SOCKS5 proxies. Set the HTTP_PROXY , HTTPS_PROXY , and NO_PROXY environment variables, or their lowercase equivalents, for example: $ HTTP_PROXY = socks5://127.0.0.1:1080 chezmoi apply --refresh-externals","title":"HTTP or SOCKS5 proxy"},{"location":"user-guide/tools/merge/","text":"Merge Use a custom merge command By default, chezmoi uses vimdiff . You can use a custom command by setting the merge.command and merge.args configuration variables. The elements of merge.args are interpreted as templates with the variables .Destination , .Source , and .Target containing filenames of the file in the destination state, source state, and target state respectively. For example, to use neovim's diff mode , specify: ~/.config/chezmoi/chezmoi.toml [merge] command = \"nvim\" args = [ \"-d\" , \"{{ .Destination }}\" , \"{{ .Source }}\" , \"{{ .Target }}\" ] Hint If you generate your config file from a config file template, then you'll need to escape the {{ and }} in your config file template so that they appear in your generated config file.","title":"Merge"},{"location":"user-guide/tools/merge/#merge","text":"","title":"Merge"},{"location":"user-guide/tools/merge/#use-a-custom-merge-command","text":"By default, chezmoi uses vimdiff . You can use a custom command by setting the merge.command and merge.args configuration variables. The elements of merge.args are interpreted as templates with the variables .Destination , .Source , and .Target containing filenames of the file in the destination state, source state, and target state respectively. For example, to use neovim's diff mode , specify: ~/.config/chezmoi/chezmoi.toml [merge] command = \"nvim\" args = [ \"-d\" , \"{{ .Destination }}\" , \"{{ .Source }}\" , \"{{ .Target }}\" ] Hint If you generate your config file from a config file template, then you'll need to escape the {{ and }} in your config file template so that they appear in your generated config file.","title":"Use a custom merge command"}]}