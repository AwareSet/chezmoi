{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"chezmoi","text":"<p>Manage your dotfiles across multiple diverse machines, securely.</p> <p>The latest version of chezmoi is 2.43.0 (release notes, release history).</p> <p>chezmoi helps you manage your personal configuration files (dotfiles, like <code>~/.gitconfig</code>) across multiple machines.</p> <p>chezmoi provides many features beyond symlinking or using a bare git repo including: templates (to handle small differences between machines), password manager support (to store your secrets securely), importing files from archives (great for shell and editor plugins), full file encryption (using gpg or age), and running scripts (to handle everything else).</p> <p>With chezmoi, pronounced /\u0283e\u026a mwa/ (shay-moi), you can install chezmoi and your dotfiles from your GitHub dotfiles repo on a new, empty machine with a single command:</p> <pre><code>$ sh -c \"$(curl -fsLS get.chezmoi.io)\" -- init --apply $GITHUB_USERNAME\n</code></pre> <p>As well as the <code>curl | sh</code> installation, you can install chezmoi with your favorite package manager.</p> <p>Updating your dotfiles on any machine is a single command:</p> <pre><code>$ chezmoi update\n</code></pre>"},{"location":"#how-do-i-start-with-chezmoi","title":"How do I start with chezmoi?","text":"<p>Install chezmoi then read the quick start guide. The user guide covers most common tasks. For a full description, consult the reference.</p>"},{"location":"#should-i-use-chezmoi","title":"Should I use chezmoi?","text":"<p>See what other people think about chezmoi by reading articles, listening to podcasts, and watching videos about chezmoi. Read how chezmoi compares to other dotfile managers. Explore other people's dotfile repos that use chezmoi.</p>"},{"location":"#i-like-chezmoi-how-do-i-say-thanks","title":"I like chezmoi. How do I say thanks?","text":"<p>Please give chezmoi a star on GitHub.</p> <p>Share chezmoi and, if you're happy to share your public dotfiles repo, then tag your repo with <code>chezmoi</code>.</p> <p>Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :)</p> <p>chezmoi does not accept financial contributions. Instead, please make a donation to a charity or cause of your choice.</p>"},{"location":"comparison-table/","title":"Comparison table","text":"chezmoi dotbot rcm vcsh yadm bare git Distribution Single binary Python package Multiple files Single script or package Single script - Install method Many git submodule Many Many Many Manual Non-root install on bare system \u2705 \u2049\ufe0f \u2049\ufe0f \u2705 \u2705 \u2705 Windows support \u2705 \u2705 \u274c \u274c \u2705 \u2705 Bootstrap requirements None Python, git Perl, git sh, git git git Source repos Single Single Multiple Multiple Single Single dotfiles are... Files Symlinks Files Files Files Files Config file Optional Required Optional None Optional Optional Private files \u2705 \u274c \u274c \u274c \u2705 \u274c Show differences without applying \u2705 \u274c \u274c \u2705 \u2705 \u2705 Whole file encryption \u2705 \u274c \u274c \u274c \u2705 \u274c Password manager integration \u2705 \u274c \u274c \u274c \u274c \u274c Machine-to-machine file differences Templates Alternative files Alternative files Branches Alternative files, templates \u2049\ufe0f Custom variables in templates \u2705 \u274c \u274c \u274c \u274c \u274c Executable files \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 File creation with initial contents \u2705 \u274c \u274c \u2705 \u274c \u274c Externals \u2705 \u274c \u274c \u274c \u274c \u274c Manage partial files \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f File removal \u2705 \u274c \u274c \u2705 \u2705 \u274c Directory creation \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Run scripts \u2705 \u2705 \u2705 \u2705 \u2705 \u274c Run once scripts \u2705 \u274c \u274c \u2705 \u2705 \u274c Machine-to-machine symlink differences \u2705 \u274c \u274c \u2049\ufe0f \u2705 \u2049\ufe0f Shell completion \u2705 \u274c \u274c \u2705 \u2705 \u2705 Archive import \u2705 \u274c \u274c \u2705 \u274c \u2705 Archive export \u2705 \u274c \u274c \u2705 \u274c \u2705 Implementation language Go Python Perl POSIX Shell Bash C <p>\u2705 Supported, \u2049\ufe0f  Possible with significant manual effort, \u274c Not supported</p> <p>For more comparisons, visit dotfiles.github.io/utilities.</p>"},{"location":"install/","title":"Install","text":"<p>The latest version of chezmoi is 2.43.0 (release notes, release history).</p>"},{"location":"install/#one-line-package-install","title":"One-line package install","text":"<p>Install chezmoi with your package manager with a single command:</p> LinuxmacOSWindowsFreeBSDOpenIndiana AlpineArchNixOSopenSUSE TumbleweedTermuxVoid <pre><code>apk add chezmoi\n</code></pre> <pre><code>pacman -S chezmoi\n</code></pre> <pre><code>nix-env -i chezmoi\n</code></pre> <pre><code>zypper install chezmoi\n</code></pre> <pre><code>pkg install chezmoi\n</code></pre> <pre><code>xbps-install -S chezmoi\n</code></pre> HomebrewMacPortsNix <pre><code>brew install chezmoi\n</code></pre> <pre><code>port install chezmoi\n</code></pre> <pre><code>nix-env -i chezmoi\n</code></pre> ChocolateyScoopWinget <pre><code>choco install chezmoi\n</code></pre> <pre><code>scoop install chezmoi\n</code></pre> <pre><code>winget install twpayne.chezmoi\n</code></pre> <pre><code>pkg install chezmoi\n</code></pre> <pre><code>pkg install application/chezmoi\n</code></pre> <p>chezmoi is available in many cross-platform package managers:</p> asdfHomebrewNixsnap <pre><code>asdf plugin add chezmoi &amp;&amp; asdf install chezmoi 2.43.0\n</code></pre> <pre><code>brew install chezmoi\n</code></pre> <pre><code>nix-env -i chezmoi\n</code></pre> <pre><code>snap install chezmoi --classic\n</code></pre> <p>For more packages, see chezmoi on repology.org.</p>"},{"location":"install/#one-line-binary-install","title":"One-line binary install","text":"<p>Install the correct binary for your operating system and architecture in <code>./bin</code> with a single command:</p> curlwgetPowerShell <pre><code>sh -c \"$(curl -fsLS get.chezmoi.io)\"\n</code></pre> <pre><code>sh -c \"$(wget -qO- get.chezmoi.io)\"\n</code></pre> <pre><code>(irm -useb https://get.chezmoi.io/ps1) | powershell -c -\n</code></pre> <p>Hint</p> <p>If you already have a dotfiles repo using chezmoi on GitHub at <code>https://github.com/$GITHUB_USERNAME/dotfiles</code> then you can install chezmoi and your dotfiles with the single command:</p> <pre><code>sh -c \"$(curl -fsLS get.chezmoi.io)\" -- init --apply $GITHUB_USERNAME\n</code></pre> <p>Private GitHub repos requires other authentication methods:</p> <pre><code>sh -c \"$(curl -fsLS get.chezmoi.io)\" -- init --apply git@github.com:$GITHUB_USERNAME/dotfiles.git\n</code></pre> <p>Hint</p> <p>If you want to install chezmoi in <code>./.local/bin</code> instead of <code>./bin</code> you can use <code>get.chezmoi.io/lb</code> or <code>chezmoi.io/getlb</code> instead.</p> <p>Hint</p> <p>To install the chezmoi binary in a different directory, use the <code>-b</code> option, for example:</p> <pre><code>sh -c \"$(curl -fsLS get.chezmoi.io)\" -- -b $HOME/.local/bin\n</code></pre>"},{"location":"install/#download-a-pre-built-linux-package","title":"Download a pre-built Linux package","text":"<p>Download a package for your distribution and architecture.</p> debrpmapkArch Linux <p><code>amd64</code> <code>arm64</code> <code>armel</code> <code>i386</code> <code>loong64</code> <code>mips64</code> <code>mips64le</code> <code>ppc64</code> <code>ppc64le</code> <code>riscv64</code> <code>s390x</code></p> <p><code>aarch64</code> <code>armhfp</code> <code>i686</code> <code>loong64</code> <code>mips64</code> <code>mips64le</code> <code>ppc64</code> <code>ppc64le</code> <code>s390x</code> <code>riscv64</code> <code>x86_64</code></p> <p><code>386</code> <code>amd64</code> <code>arm</code> <code>arm64</code> <code>loong64</code> <code>mips64_hardfloat</code> <code>mips64le_hardfloat</code> <code>ppc64</code> <code>ppc64le</code> <code>riscv64</code> <code>s390x</code></p> <p><code>386</code> <code>amd64</code> <code>arm</code> <code>arm64</code> <code>loong64</code> <code>mips64_hardfloat</code> <code>mips64le_hardfloat</code> <code>ppc64</code> <code>ppc64le</code> <code>riscv64</code> <code>s390x</code></p>"},{"location":"install/#download-a-pre-built-binary","title":"Download a pre-built binary","text":"<p>Download an archive for your operating system and architecture containing a pre-built binary and shell completions.</p> LinuxmacOSWindowsFreeBSDOpenBSD <p><code>amd64</code> <code>arm</code> <code>arm64</code> <code>i386</code> <code>loong64</code> <code>mips64</code> <code>mips64le</code> <code>ppc64</code> <code>ppc64le</code> <code>riscv64</code> <code>s390x</code> <code>amd64</code> (glibc) <code>amd64</code> (musl)</p> <p><code>amd64</code> <code>arm64</code></p> <p><code>amd64</code> <code>arm</code> <code>arm64</code> <code>i386</code></p> <p><code>amd64</code> <code>arm</code> <code>arm64</code> <code>i386</code> <code>riscv64</code></p> <p><code>amd64</code> <code>arm</code> <code>arm64</code> <code>i386</code></p>"},{"location":"install/#install-from-source","title":"Install from source","text":"<p>Download, build, and install chezmoi for your system with Go 1.20 or later:</p> <pre><code>$ git clone https://github.com/twpayne/chezmoi.git\n$ cd chezmoi\n$ make install-from-git-working-copy\n</code></pre>"},{"location":"install/#verify-your-download","title":"Verify your download","text":"<p>chezmoi's release process signs the SHA256 checksums of all released assets with cosign.</p> <p>To verify an asset that you have downloaded:</p> <p>Download the checksum file, checksum file signature, and public signing key.</p> <pre><code>$ curl --location --remote-name-all \\\n       https://github.com/twpayne/chezmoi/releases/download/v2.43.0/chezmoi_2.43.0_checksums.txt \\\n       https://github.com/twpayne/chezmoi/releases/download/v2.43.0/chezmoi_2.43.0_checksums.txt.sig \\\n       https://github.com/twpayne/chezmoi/releases/download/v2.43.0/chezmoi_cosign.pub\n</code></pre> <p>Verify the signature of the checksum file with cosign.</p> <pre><code>$ cosign verify-blob --key=chezmoi_cosign.pub \\\n                     --signature=chezmoi_2.43.0_checksums.txt.sig \\\n                     chezmoi_2.43.0_checksums.txt\n</code></pre> <p>Important</p> <p>cosign should print <code>Verified OK</code></p> <p>Verify the that the SHA256 sum of your downloads matches the SHA256 sum in the verified checksum file. All the downloaded files must be in the current directory.</p> LinuxmacOS <pre><code>$ sha256sum --check chezmoi_2.43.0_checksums.txt --ignore-missing\n</code></pre> <pre><code>$ shasum --algorithm 256 --check chezmoi_2.43.0_checksums.txt --ignore-missing\n</code></pre> <p>For more information on chezmoi's release signing process, see the developer documentation on chezmoi's releases.</p>"},{"location":"license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) 2018-2023 Tom Payne</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"migrating-from-another-dotfile-manager/","title":"Migrating from another dotfile manager","text":""},{"location":"migrating-from-another-dotfile-manager/#migrate-from-a-dotfile-manager-that-uses-symlinks","title":"Migrate from a dotfile manager that uses symlinks","text":"<p>Many dotfile managers replace dotfiles with symbolic links to files in a common directory. If you <code>chezmoi add</code> such a symlink, chezmoi will add the symlink, not the file. To assist with migrating from symlink-based systems, use the <code>--follow</code> option to <code>chezmoi add</code>, for example:</p> <pre><code>$ chezmoi add --follow ~/.bashrc\n</code></pre> <p>This will tell <code>chezmoi add</code> that the target state of <code>~/.bashrc</code> is the target of the <code>~/.bashrc</code> symlink, rather than the symlink itself. When you run <code>chezmoi apply</code>, chezmoi will replace the <code>~/.bashrc</code> symlink with the file contents.</p>"},{"location":"quick-start/","title":"Quick start","text":""},{"location":"quick-start/#concepts","title":"Concepts","text":"<p>Roughly speaking, chezmoi stores the desired state of your dotfiles in the directory <code>~/.local/share/chezmoi</code>. When you run <code>chezmoi apply</code>, chezmoi calculates the desired contents for each of your dotfiles and then makes the minimum changes required to make your dotfiles match your desired state. chezmoi's concepts are described more accurately in the reference manual.</p>"},{"location":"quick-start/#start-using-chezmoi-on-your-current-machine","title":"Start using chezmoi on your current machine","text":"<p>Assuming that you have already installed chezmoi, initialize chezmoi with:</p> <pre><code>$ chezmoi init\n</code></pre> <p>This will create a new git local repository in <code>~/.local/share/chezmoi</code> where chezmoi will store its source state. By default, chezmoi only modifies files in the working copy.</p> <p>Manage your first file with chezmoi:</p> <pre><code>$ chezmoi add ~/.bashrc\n</code></pre> <p>This will copy <code>~/.bashrc</code> to <code>~/.local/share/chezmoi/dot_bashrc</code>.</p> <p>Edit the source state:</p> <pre><code>$ chezmoi edit ~/.bashrc\n</code></pre> <p>This will open <code>~/.local/share/chezmoi/dot_bashrc</code> in your <code>$EDITOR</code>. Make some changes and save the file.</p> <p>Hint</p> <p>You don't have to use <code>chezmoi edit</code> to edit your dotfiles. See this FAQ entry for more details.</p> <p>See what changes chezmoi would make:</p> <pre><code>$ chezmoi diff\n</code></pre> <p>Apply the changes:</p> <pre><code>$ chezmoi -v apply\n</code></pre> <p>All chezmoi commands accept the <code>-v</code> (verbose) flag to print out exactly what changes they will make to the file system, and the <code>-n</code> (dry run) flag to not make any actual changes. The combination <code>-n</code> <code>-v</code> is very useful if you want to see exactly what changes would be made.</p> <p>Next, open a shell in the source directory, to commit your changes:</p> <pre><code>$ chezmoi cd\n$ git add .\n$ git commit -m \"Initial commit\"\n</code></pre> <p>Create a new repository on GitHub called <code>dotfiles</code> and then push your repo:</p> <pre><code>$ git remote add origin https://github.com/$GITHUB_USERNAME/dotfiles.git\n$ git branch -M main\n$ git push -u origin main\n</code></pre> <p>Hint</p> <p>chezmoi can be configured to automatically add, commit, and push changes to your repo.</p> <p>chezmoi can also be used with GitLab, or BitBucket, Source Hut, or any other git hosting service.</p> <p>Finally, exit the shell in the source directory to return to where you were:</p> <pre><code>$ exit\n</code></pre> <p>These commands are summarized in this sequence diagram:</p> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     H-&gt;&gt;L: chezmoi init     H-&gt;&gt;W: chezmoi add &lt;file&gt;     W-&gt;&gt;W: chezmoi edit &lt;file&gt;     W--&gt;&gt;H: chezmoi diff     W-&gt;&gt;H: chezmoi apply     H--&gt;&gt;W: chezmoi cd     W-&gt;&gt;L: git add     W-&gt;&gt;L: git commit     L-&gt;&gt;R: git push     W--&gt;&gt;H: exit"},{"location":"quick-start/#using-chezmoi-across-multiple-machines","title":"Using chezmoi across multiple machines","text":"<p>On a second machine, initialize chezmoi with your dotfiles repo:</p> <pre><code>$ chezmoi init https://github.com/$GITHUB_USERNAME/dotfiles.git\n</code></pre> <p>Hint</p> <p>Private GitHub repos requires other authentication methods:</p> <pre><code>$ chezmoi init git@github.com:$GITHUB_USERNAME/dotfiles.git\n</code></pre> <p>This will check out the repo and any submodules and optionally create a chezmoi config file for you.</p> <p>Check what changes that chezmoi will make to your home directory by running:</p> <pre><code>$ chezmoi diff\n</code></pre> <p>If you are happy with the changes that chezmoi will make then run:</p> <pre><code>$ chezmoi apply -v\n</code></pre> <p>If you are not happy with the changes to a file then either edit it with:</p> <pre><code>$ chezmoi edit $FILE\n</code></pre> <p>Or, invoke a merge tool (by default <code>vimdiff</code>) to merge changes between the current contents of the file, the file in your working copy, and the computed contents of the file:</p> <pre><code>$ chezmoi merge $FILE\n</code></pre> <p>On any machine, you can pull and apply the latest changes from your repo with:</p> <pre><code>$ chezmoi update -v\n</code></pre> <p>These commands are summarized in this sequence diagram:</p> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     R-&gt;&gt;W: chezmoi init &lt;repo&gt;     W--&gt;&gt;H: chezmoi diff     W-&gt;&gt;H: chezmoi apply     W-&gt;&gt;W: chezmoi edit &lt;file&gt;     W-&gt;&gt;W: chezmoi merge &lt;file&gt;     R-&gt;&gt;H: chezmoi update"},{"location":"quick-start/#set-up-a-new-machine-with-a-single-command","title":"Set up a new machine with a single command","text":"<p>You can install your dotfiles on new machine with a single command:</p> <pre><code>$ chezmoi init --apply https://github.com/$GITHUB_USERNAME/dotfiles.git\n</code></pre> <p>If you use GitHub and your dotfiles repo is called <code>dotfiles</code> then this can be shortened to:</p> <pre><code>$ chezmoi init --apply $GITHUB_USERNAME\n</code></pre> <p>Hint</p> <p>Private GitHub repos requires other authentication methods:</p> <pre><code>chezmoi init --apply git@github.com:$GITHUB_USERNAME/dotfiles.git\n</code></pre> <p>This command is summarized in this sequence diagram:</p> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     R-&gt;&gt;H: chezmoi init --apply &lt;repo&gt;"},{"location":"quick-start/#next-steps","title":"Next steps","text":"<p>For a full list of commands run:</p> <pre><code>$ chezmoi help\n</code></pre> <p>chezmoi has much more functionality. Good starting points are reading what other people say about chezmoi, adding more dotfiles, and using templates to manage files that vary from machine to machine and retrieve secrets from your password manager. Read the user guide to explore and see how people use chezmoi for inspiration.</p>"},{"location":"what-does-chezmoi-do/","title":"What does chezmoi do?","text":"<p>chezmoi helps you manage your personal configuration files (dotfiles, like <code>~/.gitconfig</code>) across multiple machines.</p> <p>chezmoi is helpful if you have spent time customizing the tools you use (e.g. shells, editors, and version control systems) and want to keep machines running different accounts (e.g. home and work) and/or different operating systems (e.g. Linux, macOS, and Windows) in sync, while still being able to easily cope with differences from machine to machine.</p> <p>chezmoi scales from the trivial (e.g. copying a few dotfiles onto a Raspberry Pi, development container, or virtual machine) to complex long-lived multi-machine development environments (e.g. keeping any number of home and work, Linux, macOS, and Windows machines in sync). In all cases you only need to maintain a single source of truth (a single branch in git) and getting started only requires adding a single binary to your machine (which you can do with <code>curl</code>, <code>wget</code>, or <code>scp</code>).</p> <p>chezmoi has strong support for security, allowing you to manage secrets (e.g. passwords, access tokens, and private keys) securely and seamlessly using a password manager and/or encrypt whole files with your favorite encryption tool.</p> <p>If you do not personalize your configuration or only ever use a single operating system with a single account and none of your dotfiles contain secrets then you don't need chezmoi. Otherwise, read on...</p>"},{"location":"what-does-chezmoi-do/#what-are-chezmois-key-features","title":"What are chezmoi's key features?","text":""},{"location":"what-does-chezmoi-do/#flexible","title":"Flexible","text":"<p>You can share as much configuration across machines as you want, while still being able to control machine-specific details.Your dotfiles can be templates (using <code>text/template</code> syntax). Predefined variables allow you to change behavior depending on operating system, architecture, and hostname. chezmoi runs on all commonly-used platforms, like Linux, macOS, and Windows. It also runs on less commonly-used platforms, like FreeBSD, OpenBSD, and Termux.</p>"},{"location":"what-does-chezmoi-do/#personal-and-secure","title":"Personal and secure","text":"<p>Nothing leaves your machine, unless you want it to. Your configuration remains in a git repo under your control. You can write the configuration file in the format of your choice. chezmoi can retrieve secrets from 1Password, AWS Secrets Manager, Azure Key Vault, Bitwarden, Dashlane, Doppler, gopass, HCP Vault Secrets, KeePassXC, Keeper, LastPass, pass, passage, passhole, Vault, Keychain, Keyring, or any command-line utility of your choice. You can encrypt individual files with GnuPG or age. You can checkout your dotfiles repo on as many machines as you want without revealing any secrets to anyone.</p>"},{"location":"what-does-chezmoi-do/#transparent","title":"Transparent","text":"<p>chezmoi includes verbose and dry run modes so you can review exactly what changes it will make to your home directory before making them. chezmoi's source format uses only regular files and directories that map one-to-one with the files, directories, and symlinks in your home directory that you choose to manage. If you decide not to use chezmoi in the future, it is easy to move your data elsewhere.</p>"},{"location":"what-does-chezmoi-do/#declarative-and-robust","title":"Declarative and robust","text":"<p>You declare the desired state of files, directories, and symbolic links in your source of truth and chezmoi updates your home directory to match that state. What you want is what you get. chezmoi updates all files and symbolic links atomically. You will never be left with incomplete files that could lock you out, even if the update process is interrupted.</p>"},{"location":"what-does-chezmoi-do/#fast-and-easy-to-use","title":"Fast and easy to use","text":"<p>Using chezmoi feels like using git: the commands are similar and chezmoi runs in fractions of a second. chezmoi makes most day-to-day operations one line commands, including installation, initialization, and keeping your machines up-to-date. chezmoi can pull and apply changes from your dotfiles repo in a single command, and automatically commit and push changes.</p>"},{"location":"why-use-chezmoi/","title":"Why use chezmoi?","text":""},{"location":"why-use-chezmoi/#why-should-i-use-a-dotfile-manager","title":"Why should I use a dotfile manager?","text":"<p>Dotfile managers give you the combined benefit of a consistent environment everywhere with an undo command and a restore from backup.</p> <p>As the core of our development environments become increasingly standardized (e.g. using git at both home and work), and we further customize them, at the same time we increasingly work in ephemeral environments like Docker containers, virtual machines, and GitHub Codespaces.</p> <p>In the same way that nobody would use an editor without an undo command, or develop software without a version control system, chezmoi brings the investment that you have made in mastering your tools to every environment that you work in.</p>"},{"location":"why-use-chezmoi/#i-already-have-a-system-to-manage-my-dotfiles-why-should-i-use-chezmoi","title":"I already have a system to manage my dotfiles, why should I use chezmoi?","text":"<p>Quote</p> <p>I\u2019ve been using Chezmoi for more than a year now, across at least 3 computers simultaneously, and I really love it. Most of all, I love how fast I can configure a new machine when I use it. In just a couple minutes of work, I can kick off a process on a brand-new computer that will set up my dotfiles and install all my usual software so it feels like a computer I\u2019ve been using for years. I also appreciate features like secrets management, which allow me to share my dotfiles while keeping my secrets safe. Overall, I love the way Chezmoi fits so perfectly into the niche of managing dotfiles.</p> <p>\u2014 @mike_kasberg</p> <p>Quote</p> <p>I had initially been turned off when I first encountered [chezmoi], because [chezmoi] seemed overkill for (what appeared to me) a simple task.</p> <p>But the problem of managing a relatively small number of dotfiles across a relatively small number of machines with small differences between them and keeping them up to date proved to be MUCH more complex than I imagined. Copy things around by hand, and then later distributing them via source control got hairy very quickly.</p> <p>I finally realized all those features were absolutely necessary to manage things sanely, and once I took some time to learn how to do things with chezmoi, I have never looked back.</p> <p>\u2014 njt</p> <p>Quote</p> <p>Regular reminder that chezmoi is the best dotfile manager utility I've used and you can too</p> <p>\u2014 @mbbroberg</p> <p>If you're using any of the following methods:</p> <ul> <li> <p>A custom shell script.</p> </li> <li> <p>An existing dotfile manager like   dotbot,   rcm,   homesick,   vcsh,   yadm, or GNU Stow.</p> </li> <li> <p>A bare git repo.</p> </li> </ul> <p>Then you've probably run into at least one of the following problems.</p>"},{"location":"why-use-chezmoi/#if-coping-with-differences-between-machines-requires-extra-effort","title":"...if coping with differences between machines requires extra effort","text":"<p>If you want to synchronize your dotfiles across multiple operating systems or distributions, then you may need to manually perform extra steps to cope with differences from machine to machine. You might need to run different commands on different machines, maintain separate per-machine files or branches (with the associated hassle of merging, rebasing, or copying each change), or hope that your custom logic handles the differences correctly.</p> <p>chezmoi uses a single source of truth (a single branch) and a single command that works on every machine. Individual files can be templates to handle machine to machine differences, if needed.</p>"},{"location":"why-use-chezmoi/#if-you-have-to-keep-your-dotfiles-repo-private","title":"...if you have to keep your dotfiles repo private","text":"<p>Quote</p> <p>And regarding dotfiles, I saw that. It's only public dotfiles repos so I have to evaluate my dotfiles history to be sure. I have secrets scanning and more, but it was easier to keep it private for security, I'm ok mostly though. I'm using chezmoi and it's easier now</p> <p>\u2014 @sheldon_hull</p> <p>If your system stores secrets in plain text, then you must be very careful about where you clone your dotfiles. If you clone them on your work machine then anyone with access to your work machine (e.g. your IT department) will have access to your home secrets. If you clone it on your home machine then you risk leaking work secrets.</p> <p>With chezmoi you can store secrets in your password manager or encrypt them, and even store passwords in different ways on different machines. You can clone your dotfiles repository anywhere, and even make your dotfiles repo public, without leaving personal secrets on your work machine or work secrets on your personal machine.</p>"},{"location":"why-use-chezmoi/#if-you-have-to-maintain-your-own-tool","title":"...if you have to maintain your own tool","text":"<p>Quote</p> <p>I've offloaded my dotfiles deployment from a homespun shell script to chezmoi. I'm quite happy with this decision.</p> <p>\u2014 @gotgenes</p> <p>Quote</p> <p>I discovered chezmoi and it's pretty cool, just migrated my old custom multi-machine sync dotfile setup and it's so much simpler now</p> <p>in case you're wondering I have written 0 code</p> <p>\u2014 @buritica</p> <p>Quote</p> <p>Chezmoi is like what you might get if you re-wrote my bash script in Go, came up with better solutions than <code>diff</code> for managing config on multiple machines, added in secrets management and other useful dotfile tools, and tweaked and perfected it over years.</p> <ul> <li>@mike_kasberg</li> </ul> <p>If your system was written by you for your personal use, then it probably has the functionality that you needed when you wrote it. If you need more functionality then you have to implement it yourself.</p> <p>chezmoi includes a huge range of battle-tested functionality out-of-the-box, including dry-run and diff modes, script execution, conflict resolution, Windows support, and much, much more. chezmoi is used by thousands of people and has a rich suite of both unit and integration tests. When you hit the limits of your existing dotfile management system, chezmoi already has a tried-and-tested solution ready for you to use.</p>"},{"location":"why-use-chezmoi/#if-setting-up-your-dotfiles-requires-more-than-one-short-command","title":"...if setting up your dotfiles requires more than one short command","text":"<p>If your system is written in a scripting language like Python, Perl, or Ruby, then you also need to install a compatible version of that language's runtime before you can use your system.</p> <p>chezmoi is distributed as a single stand-alone statically-linked binary with no dependencies that you can simply copy onto your machine and run. You don't even need git installed. chezmoi provides one-line installs, pre-built binaries, packages for Linux and BSD distributions, Homebrew formulae, Scoop and Chocolatey support on Windows, and a initial config file generation mechanism to make installing your dotfiles on a new machine as painless as possible.</p>"},{"location":"developer/architecture/","title":"Architecture","text":"<p>This document gives a high-level overview of chezmoi's source code for anyone interested in contributing to chezmoi.</p> <p>You can generate Go documentation for chezmoi's source code with <code>go doc</code>, for example:</p> <pre><code>$ go doc -all -u github.com/twpayne/chezmoi/v2/internal/chezmoi\n</code></pre> <p>You can also browse chezmoi's generated documentation online.</p>"},{"location":"developer/architecture/#directory-structure","title":"Directory structure","text":"<p>The important directories in chezmoi are:</p> Directory Contents <code>assets/chezmoi.io/docs/</code> The documentation single source of truth. Help text, examples, and the chezmoi.io website are generated from the files in this directory <code>internal/chezmoi/</code> chezmoi's core functionality <code>internal/cmd/</code> Code for the <code>chezmoi</code> command <code>internal/cmd/testdata/scripts/</code> High-level tests of chezmoi's commands using <code>testscript</code>"},{"location":"developer/architecture/#key-concepts","title":"Key concepts","text":"<p>As described in the reference manual, chezmoi evaluates the source state to compute a target state for the destination directory (typically your home directory). It then compares the target state to the actual state of the destination directory and performs any changes necessary to update the destination directory to match the target state. These concepts are represented directly in chezmoi's code.</p> <p>chezmoi uses the generic term entry to describe something that it manages. Entries can be files, directories, symlinks, scripts, amongst other things.</p>"},{"location":"developer/architecture/#internalchezmoi-directory","title":"<code>internal/chezmoi/</code> directory","text":"<p>All of chezmoi's interaction with the operating system is abstracted through the <code>System</code> interface. A <code>System</code> includes functionality to read and write files and directories and execute commands. chezmoi makes a distinction between idempotent commands that can be run multiple times without modifying the underlying system and arbitrary commands that may modify the underlying system.</p> <p>The real underlying system is implemented via a <code>RealSystem</code> struct. Other <code>System</code>s are composed on top of this to provide further functionality. For example, the <code>--debug</code> flag is implemented by wrapping the <code>RealSystem</code> with a <code>DebugSystem</code> that logs all calls to the underlying <code>RealSystem</code>. <code>--dry-run</code> is implemented by wrapping the <code>RealSystem</code> with a <code>DryRunSystem</code> that allows reads to pass through but silently discards all writes.</p> <p>The <code>SourceState</code> struct represents a source state, including reading a source state from the source directory, executing templates, applying the source state (i.e. updating a <code>System</code> to match the desired source state), and adding more entries to the source state.</p> <p>Entries in the source state are abstracted by the <code>SourceStateEntry</code> interface implemented by the <code>SourceStateFile</code> and <code>SourceStateDir</code> structs, as the source state only consists of regular files and directories.</p> <p>A <code>SourceStateFile</code> includes a <code>FileAttr</code> struct describing the attributes parsed from its file name. Similarly, a <code>SourceStateDir</code> includes a <code>DirAttr</code> struct describing the directory attributes parsed from a directory name.</p> <p><code>SourceStateEntry</code>s can compute their target state entries, i.e. what the equivalent entry should be in the target state, abstracted by the <code>TargetStateEntry</code> interface.</p> <p>Actual target state entries include <code>TargetStateFile</code> structs, representing a file with contents and permissions, <code>TargetStateDir</code> structs, representing a directory, <code>TargetStateSymlink</code> for symlinks, <code>TargetStateRemove</code> for entries that should be removed, and <code>TargetStateScript</code> for scripts that should be run.</p> <p>The actual state of an entry in the target state is abstracted via the <code>ActualStateEntry</code> interface, with <code>ActualStateAbsent</code>, <code>ActualStateDir</code>, <code>ActualStateFile</code>, <code>ActualStateSymlink</code> structs implementing this interface.</p> <p>Finally, an <code>EntryState</code> struct represents a serialization of an <code>ActualEntryState</code> for storage in and retrieval from chezmoi's persistent state. It stores a SHA256 of the entry's contents, rather than the full contents, to avoid storing secrets in the persistent state.</p> <p>With these concepts, chezmoi's apply command is effectively:</p> <ol> <li> <p>Read the source state from the source directory.</p> </li> <li> <p>For each entry in the source state (<code>SourceStateEntry</code>), compute its    <code>TargetStateEntry</code> and read its actual state in the destination state    (<code>ActualStateEntry</code>).</p> </li> <li> <p>If the <code>ActualStateEntry</code> is not equivalent to the <code>TargetStateEntry</code> then    apply the minimal set of changes to the <code>ActualStateEntry</code> so that they are    equivalent.</p> </li> </ol> <p>Furthermore, chezmoi stores the <code>EntryState</code> of each entry that it writes in its persistent state. chezmoi can then detect if a third party has updated a target since chezmoi last wrote it by comparing the actual state entry in the target state with the entry state in the persistent state.</p>"},{"location":"developer/architecture/#internalcmd-directory","title":"<code>internal/cmd/</code> directory","text":"<p><code>internal/cmd/*cmd.go</code> contains the code for each individual command and <code>internal/cmd/*templatefuncs.go</code> contain the template functions.</p> <p>Commands are defined as methods on the <code>Config</code> struct. The <code>Config</code> struct is large, containing all configuration values read from the config file, command line arguments, and computed and cached values.</p> <p>The <code>Config.persistentPreRunRootE</code> and <code>Config.persistentPostRunRootE</code> methods set up and tear down state for individual commands based on the command's <code>Annotations</code> field, which defines how the command interacts with the file system and persistent state.</p>"},{"location":"developer/architecture/#path-handling","title":"Path handling","text":"<p>chezmoi uses separate types for absolute paths (<code>AbsPath</code>) and relative paths (<code>RelPath</code>) to avoid errors where paths are combined (e.g. joining two absolute paths). A further type <code>SourceRelPath</code> is a relative path within the source directory and handles file and directory attributes.</p> <p>Internally, chezmoi normalizes all paths to use forward slashes with an optional upper-cased Windows volume so they can be compared with string comparisons. Paths read from the user may include tilde (<code>~</code>) to represent the user's home directory, use forward or backward slashes, and are treated as external paths (<code>ExtPath</code>). These are normalized to absolute paths. chezmoi is case-sensitive internally and makes no attempt to handle case-insensitive or case-preserving filesystems.</p>"},{"location":"developer/architecture/#persistent-state","title":"Persistent state","text":"<p>Persistent state is treated as a two-level key-value store with the pseudo-structure <code>map[Bucket]map[Key]Value</code>, where <code>Bucket</code>, <code>Key</code>, and <code>Value</code> are all <code>[]byte</code>s. The <code>PersistentState</code> interface defines interaction with them. Sometimes temporary persistent states are used. For example, in dry run mode (<code>--dry-run</code>) the actual persistent state is copied into a temporary persistent state in memory which remembers writes but does not persist them to disk.</p>"},{"location":"developer/architecture/#encryption","title":"Encryption","text":"<p>Encryption tools are abstracted by the <code>Encryption</code> interface that contains methods of encrypting and decrypting files and <code>[]byte</code>s. Implementations are the <code>AGEEncryption</code> and <code>GPGEncryption</code> structs. A <code>DebugEncryption</code> struct wraps an <code>Encryption</code> interface and logs the methods called.</p>"},{"location":"developer/architecture/#run_once_-and-run_onchange_-scripts","title":"<code>run_once_</code> and <code>run_onchange_</code> scripts","text":"<p>The execution of a <code>run_once_</code> script is recorded by storing the SHA256 of its contents in the <code>scriptState</code> bucket in the persistent state. On future invocations the script is only run if no matching contents SHA256 is found in the persistent state.</p> <p>The execution of a <code>run_onchange_</code> script is recorded by storing its target name in the <code>entryState</code> bucket along with its contents SHA256 sum. On future invocations the script is only run if its contents SHA256 sum has changed, and its contents SHA256 sum is then updated in the persistent state.</p>"},{"location":"developer/architecture/#testing","title":"Testing","text":"<p>chezmoi has a mix of, unit, integration, and end-to-end tests. Unit and integration tests use the <code>github.com/alecthomas/assert/v2</code> framework. End-to-end tests use <code>github.com/rogpeppe/go-internal/testscript</code> with the test scripts themselves in <code>internal/cmd/testdata/scripts/$TEST_NAME.txtar</code>.</p> <p>You can run individual end-to-end tests with</p> <pre><code>$ go test ./internal/cmd -run=TestScript/$TEST_NAME\n</code></pre> <p>Tests should, if at all possible, run unmodified on all operating systems tested in CI (Linux, macOS, Windows, and FreeBSD). Windows will sometimes need special handling due to its path separator and lack of POSIX-style file permissions.</p>"},{"location":"developer/building-on-top-of-chezmoi/","title":"Building on top of chezmoi","text":"<p>chezmoi is designed with UNIX-style composability in mind, and the command line tool is semantically versioned. Building on top of chezmoi should primarily be done by executing the binary with arguments and the standard input and output configured appropriately. The <code>chezmoi dump</code> and <code>chezmoi state</code> commands allows the inspection of chezmoi's internal state.</p>"},{"location":"developer/contributing-changes/","title":"Contributing changes","text":"<p>Bug reports, bug fixes, and documentation improvements are always welcome. Please open an issue or create a pull request with your report, fix, or improvement.</p> <p>If you want to make a more significant change, please first open an issue to discuss the change that you want to make. Dave Cheney gives a good rationale as to why this is important.</p> <p>All changes are made via pull requests. In your pull request, please make sure that:</p> <ul> <li> <p>All existing tests pass. You can ensure this by running <code>make test</code>.</p> </li> <li> <p>There are appropriate additional tests that demonstrate that your PR works as   intended.</p> </li> <li> <p>The documentation is updated, if necessary. For new features you should add an   entry in <code>assets/chezmoi.io/docs/user-guide/</code> and a complete description in   <code>assets/chezmoi.io/docs/reference/</code>. See website for   instructions on how to build and view a local version of the documentation.</p> </li> <li> <p>All generated files are up to date. You can ensure this by running <code>make   generate</code> and including any modified files in your commit.</p> </li> <li> <p>The code is correctly formatted, according to   <code>gofumpt</code>. You can ensure this by running <code>make   format</code>.</p> </li> <li> <p>The code passes <code>golangci-lint</code>.   You can ensure this by running <code>make lint</code>.</p> </li> <li> <p>The commit messages follow the conventional commits   specification. chezmoi's   release notes are generated directly from the commit messages. For trivial or   user-invisible changes, please use the prefix <code>chore:</code>.</p> </li> <li> <p>Commits are logically separate, with no merge or \"fixup\" commits.</p> </li> <li> <p>The branch applies cleanly to <code>master</code>.</p> </li> </ul>"},{"location":"developer/developing-locally/","title":"Developing locally","text":"<p>chezmoi is written in Go and development happens on GitHub. chezmoi is a standard Go project, using standard Go tooling. chezmoi requires Go 1.20 or later.</p> <p>Checkout chezmoi:</p> <pre><code>$ git clone https://github.com/twpayne/chezmoi.git\n$ cd chezmoi\n</code></pre> <p>Build chezmoi:</p> <pre><code>$ go build\n</code></pre> <p>Hint</p> <p>If you try to build chezmoi with an unsupported version of Go you will get the error:</p> <pre><code>package github.com/twpayne/chezmoi/v2: build constraints exclude all Go files in /home/twp/src/github.com/twpayne/chezmoi\n</code></pre> <p>Run all tests:</p> <pre><code>$ go test ./...\n</code></pre> <p>chezmoi's tests include integration tests with other software. If the other software is not found in <code>$PATH</code> the tests will be skipped. Running the full set of tests requires <code>age</code>, <code>base64</code>, <code>bash</code>, <code>gpg</code>, <code>perl</code>, <code>python3</code>, <code>ruby</code>, <code>sed</code>, <code>sha256sum</code>, <code>unzip</code>, <code>xz</code>, <code>zip</code>, and <code>zstd</code>.</p> <p>Run chezmoi:</p> <pre><code>$ go run .\n</code></pre> <p>Run a set of smoketests, including cross-compilation, tests, and linting:</p> <pre><code>$ make smoketest\n</code></pre> <p>Hint</p> <p>If you use <code>fish</code> as your primary shell, you may get warnings from Fish during tests:</p> <pre><code>error: can not save history\nwarning-path: Unable to locate data directory derived from $HOME: '/home/user/.local/share/fish'.\nwarning-path: The error was 'Operation not supported'.\nwarning-path: Please set $HOME to a directory where you have write access.\n</code></pre> <p>These can be avoided with by running tests with <code>SHELL=bash</code> or <code>SHELL=zsh</code>:</p> <pre><code>$ SHELL=bash make test\n$ SHELL=zsh make smoketest\n$ SHELL=bash go test ./...\n</code></pre>"},{"location":"developer/install-script/","title":"Install script","text":"<p>chezmoi generates the install script from a single source of truth. You must run</p> <pre><code>$ go generate\n</code></pre> <p>if your change includes any of the following:</p> <ul> <li> <p>Modifications to the install script template.</p> </li> <li> <p>Additions or modifications to the list of supported OSs and architectures.</p> </li> </ul> <p>chezmoi's continuous integration verifies that all generated files are up to date. Changes to generated files should be included in the commit that modifies the source of truth.</p>"},{"location":"developer/packaging/","title":"Packaging","text":"<p>If you're packaging chezmoi for an operating system or distribution:</p> <p>chezmoi has no build dependencies other than the standard Go toolchain.</p> <p>chezmoi has no runtime dependencies, but is usually used with <code>git</code>, so many packagers choose to make <code>git</code> an install dependency or recommended package.</p> <p>Please set the version number, git commit, and build time in the binary. This greatly assists debugging when end users report problems or ask for help. You can do this by passing the following flags to <code>go build</code>:</p> <pre><code>-ldflags \"-X main.version=$VERSION\n          -X main.commit=$COMMIT\n          -X main.date=$DATE\n          -X main.builtBy=$BUILT_BY\"\n</code></pre> <p><code>$VERSION</code> should be the chezmoi version, e.g. <code>1.7.3</code>. Any <code>v</code> prefix is optional and will be stripped, so you can pass the git tag in directly.</p> <p>Hint</p> <p>The command <code>git describe --abbrev=0 --tags</code> will return a suitable value for <code>$VERSION</code>.</p> <p><code>$COMMIT</code> should be the full git commit hash at which chezmoi is built, e.g. <code>4d678ce6850c9d81c7ab2fe0d8f20c1547688b91</code>.</p> <p>Hint</p> <p>The <code>assets/scripts/generate-commit.sh</code> script will return a suitable value for <code>$COMMIT</code>.</p> <p>Hint</p> <p>The source archive contains a file called <code>COMMIT</code> containing the commit hash.</p> <p><code>$DATE</code> should be the date of the build as a UNIX timestamp or in RFC3339 format.</p> <p>Hint</p> <p>The command <code>git show -s --format=%ct HEAD</code> returns the UNIX timestamp of the last commit, e.g. <code>1636668628</code>.</p> <p>The command <code>date -u +%Y-%m-%dT%H:%M:%SZ</code> returns the current time in RFC3339 format, e.g. <code>2019-11-23T18:29:25Z</code>.</p> <p><code>$BUILT_BY</code> should be a string indicating what system was used to build the binary. Typically it should be the name of your packaging system, e.g. <code>homebrew</code>.</p> <p>Please enable cgo, if possible. chezmoi can be built and run without cgo, but the <code>.chezmoi.username</code> and <code>.chezmoi.group</code> template variables may not be set correctly on some systems.</p> <p>chezmoi includes an <code>upgrade</code> command which attempts to self-upgrade. You can remove this command completely by building chezmoi with the <code>noupgrade</code> build tag.</p> <p>chezmoi includes shell completions in the <code>completions</code> directory. Please include these in the package and install them in the shell-appropriate directory, if possible.</p> <p>If the instructions for installing chezmoi in chezmoi's install guide are absent or incorrect, please open an issue or submit a PR to correct them.</p>"},{"location":"developer/releases/","title":"Releases","text":"<p>Releases are managed with <code>goreleaser</code>.</p>"},{"location":"developer/releases/#testing","title":"Testing","text":"<p>To build a test release, without publishing, (Ubuntu Linux only) first ensure that the <code>musl-tools</code> and <code>snapcraft</code> packages are installed:</p> <pre><code>$ sudo apt-get install musl-tools snapcraft\n</code></pre> <p>Then run:</p> <pre><code>$ make test-release\n</code></pre>"},{"location":"developer/releases/#publishing","title":"Publishing","text":"<p>Publish a new release by creating and pushing a tag, for example:</p> <pre><code>$ git tag v1.2.3\n$ git push --tags\n</code></pre> <p>This triggers a GitHub Action that builds and publishes archives, packages, and snaps, creates a new GitHub Release, and deploys the website.</p> <p>Note</p> <p>Publishing Snaps requires a <code>SNAPCRAFT_STORE_CREDENTIALS</code> repository secret.</p> <p>Snapcraft store credentials periodically expire. Create new snapcraft store credentials by running:</p> <pre><code>$ snapcraft export-login --snaps=chezmoi --channels=stable,candidate,beta,edge --acls=package_upload -\n</code></pre> <p>Note</p> <p>brew automation will automatically detect new releases of chezmoi within a few hours and open a pull request in github.com/Homebrew/homebrew-core to bump the version.</p> <p>If needed, the pull request can be created with:</p> <pre><code>$ brew bump-formula-pr --tag=v1.2.3 chezmoi\n</code></pre> <p>Note</p> <p>chezmoi is in Scoop's Main bucket. Scoop's automation will automatically detect new releases within a few hours.</p>"},{"location":"developer/releases/#signing","title":"Signing","text":"<p>chezmoi uses GoReleaser's support for signing to sign the checksums of its release assets with cosign.</p> <p>Details:</p> <ul> <li> <p>The cosign private key was generated with cosign v1.12.1 on a private   recently-installed Ubuntu 22.04.1 system with a single user and all available   updates applied.</p> </li> <li> <p>The private key uses a long (more than 32 character) password generated   locally by a password manager.</p> </li> <li> <p>The password-protected private key is stored in chezmoi's public GitHub repo.</p> </li> <li> <p>The private key's password is stored as a GitHub Actions   secret   and only available to the <code>release</code> step of <code>release</code> job of the <code>main</code>   workflow.</p> </li> <li> <p>The cosign public key is included in the release assets and also uploaded to   <code>https://chezmoi.io/cosign.pub</code>. Since   <code>https://chezmoi.io</code> is served by GitHub   pages, it probably has equivalent security to   chezmoi's GitHub Releases   page, which is also managed by   GitHub.</p> </li> </ul>"},{"location":"developer/security/","title":"Security","text":""},{"location":"developer/security/#supported-versions","title":"Supported versions","text":"<p>Only the most recent version of chezmoi is supported with security updates.</p>"},{"location":"developer/security/#reporting-a-vulnerability","title":"Reporting a vulnerability","text":"<p>Please report vulnerabilities by opening a GitHub issue or sending an email to <code>twpayne+chezmoi-security@gmail.com</code>.</p>"},{"location":"developer/using-make/","title":"Building and installing with <code>make</code>","text":"<p>chezmoi can be built with GNU make, assuming you have the Go toolchain installed.</p> <p>Running <code>make</code> will build a <code>chezmoi</code> binary in the current directory for the host OS and architecture. To embed version information in the binary and control installation the following variables are available:</p> Variable Example Purpose <code>$VERSION</code> <code>v2.0.0</code> Set version <code>$COMMIT</code> <code>3895680a</code>... Set the git commit at which the code was built <code>$DATE</code> <code>2019-11-23T18:29:25Z</code> The time of the build <code>$BUILT_BY</code> <code>homebrew</code> The packaging system performing the build <code>$PREFIX</code> <code>/usr</code> Installation prefix <code>$DESTDIR</code> <code>install-root</code> Fake installation root <p>Running <code>make install</code> will install the <code>chezmoi</code> binary in <code>${DESTDIR}${PREFIX}/bin</code>.</p>"},{"location":"developer/website/","title":"Website","text":"<p>The website is generated with Material for MkDocs from the contents of the <code>assets/chezmoi.io/docs/</code> directory. It hosted by GitHub pages from the <code>gh-pages</code> branch.</p> <p>Change into the website directory:</p> <pre><code>$ cd assets/chezmoi.io\n</code></pre> Defaultvirtualenv (Recommended) <p>Install the website dependencies:</p> <pre><code>$ pip3 install --user -r requirements.txt\n</code></pre> <p>Create a virtualenv with:</p> <pre><code>$ python3 -m venv .venv\n</code></pre> <p>and activate it.</p> <p>Install the website dependencies:</p> <pre><code>$ pip3 install -r requirements.txt\n</code></pre> <p>Test the website locally by running:</p> <pre><code>$ mkdocs serve\n</code></pre> <p>and visiting http://127.0.0.1:8000/.</p> <p>Deploy the website with:</p> <pre><code>$ mkdocs gh-deploy\n</code></pre>"},{"location":"links/articles/","title":"Articles","text":"<p>Tip</p> <p>Recommended article: Fedora Magazine: Take back your dotfiles with Chezmoi</p> Date Version Language Title 2023-12-23 2.42.3 DE Lokale Kofigurationsdateien sicher mit chezmoi und Git synchronisieren 2023-12-18 2.42.3 JP chezmoi \u7ba1\u7406\u306edotfiles \u3067\u30de\u30b7\u30f3\u6bce\u306b\u8a2d\u5b9a\u3092\u5909\u3048\u305f\u3044 2023-12-17 2.42.3 JP chezmoi \u3092 \u30b5\u30d6\u30de\u30b7\u30f3\u306b\u3082\u5c0e\u5165\u3059\u308b 2023-12-16 2.42.3 JP chezmoi \u3092\u4f7f\u3063\u305f dotfiles \u306e\u7ba1\u7406\u65b9\u6cd5 2023-12-10 2.42.2 JP chezmoi \u3067 dotfiles \u3092\u7ba1\u7406\u3059\u308b\u3068\u304d\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u308b 2023-10-29 2.40.4 CN \u7528 chezmoi \u7ba1\u7406 dotfiles 2023-09-13 2.39.1 JP \u8907\u6570OS\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308bchezmoi\u3092\u4f7f\u3063\u3066dotfiles\u3092\u52b9\u7387\u7684\u306b\u7ba1\u7406\u3059\u308b 2023-09-07 2.39.1 JP \u3010chezmoi\u3011dotfile\u306e\u30bb\u30ad\u30e5\u30a2\u306a\u5024\u3092dashlane\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b 2023-08-05 2.36.1 EN Dotfiles with chezmoi 2023-06-14 2.34.1 RU chezmoi 2023-05-16 2.33.6 JP chezmoi 2023-04-29 2.33.1 JP chezmoi \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30b7\u30a7\u30eb\u306e\u8d77\u52d5\u3092\u9ad8\u901f\u5316\u3059\u308b 2023-04-26 2.33.1 EN Managing my /home directory 2023-04-15 2.33.1 JP dotfiles \u306e\u7ba1\u7406\u306b chezmoi \u3092\u5c0e\u5165\u3057\u3066 fswatch \u3067\u81ea\u52d5 apply \u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305fg 2023-04-08 2.33.1 KR chezmoi, \ubcf8\uaca9\uc801\uc73c\ub85c \ud65c\uc6a9\ud558\uae30 2023-03-25 2.33.0 KR chezmoi, \uc138\uc0c1 \ud3b8\ub9ac\ud558\uac8c dotfile \uad00\ub9ac\ud558\uae30 2023-03-17 2.32.0 EN Automating the Setup of a New Mac With All Your Apps, Preferences, and Development Tools 2023-03-21 2.32.0 JP AWS CLI \u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092 chezmoi \u3068Bitwarden \u3067\u7ba1\u7406\u3059\u308b 2023-02-26 2.31.0 EN Managing dotfiles with chezmoi 2023-01-22 2.29.3 EN Managing dotfiles 2023-01-22 2.29.3 JP dotfile manager \u306e chezmoi \u306b\u79fb\u884c\u3057\u3066\u307f\u308b 2023-01-13 2.29.1 EN Making the most out of distrobox and toolbx 2023-01-12 2.29.1 JP Chezmoi\u3067\u304b\u3093\u305f\u3093\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0dotfiles\u7ba1\u7406\u306e\u30b9\u30b9\u30e1 2023-01-05 2.29.1 JP \u65e2\u5b58\u306e dotfiles \u3092 chezmoi \u3067\u7ba1\u7406\u3059\u308b 2022-09-28 2.24.0 EN Shit Hot Dotfiles 2022-09-13 2.22.1 IT Come installare Chezmoi: gestisci in modo sicuro i dotfile su pi\u00f9 macchine 2022-08-11 2.20.0 EN Chezmoi - a very cool tool to manage your dotfiles 2022-08-05 2.20.0 CN \u4f7f\u7528chezmoi\u7ba1\u7406dotfiles 2022-06-11 2.17.1 JP chezmoi \u3067 Linux \u3068 macOS \u4e21\u65b9\u3067\u4f7f\u3048\u308b dotfiles \u3092\u4f5c\u308b 2022-06-02 2.17.1 EN Local Env as Code: Is it possible yet 2022-05-16 2.16.0 EN Chezmoi for DotFiles 2022-04-25 2.15.1 EN Easily moving Linux installs 2022-03-13 2.14.0 EN Tools I love: Chezmoi 2022-03-03 2.13.0 EN Local Environment-as-Code: Is It Possible Yet? 2022-02-22 2.12.1 JP chezmoi \u3092\u4f7f\u3063\u3066 VSCode devcontainer \u5bfe\u5fdc dotfiles \u3092\u4f5c\u308b 2022-02-17 2.12.0 ES Qu\u00e9 son y c\u00f3mo gestionar archivos dotfiles con chezmoi 2022-02-12 2.11.2 EN How To Manage Dotfiles With Chezmoi 2022-02-02 2.11.0 FR Controler ses dotfiles en environnement \u00e9ph\u00e9m\u00e8re 2022-02-01 2.10.1 JP chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2022-01-26 2.10.1 JP chezmoi \u3067 dotfiles \u3092\u7ba1\u7406\u3059\u308b 2022-01-12 2.9.5 IT Come funzionano i miei Mac 2021-12-23 2.9.3 EN Use Chezmoi to guarantee idempotency of terminal 2021-12-20 2.9.3 EN How chezmoi Implements Cross-Platform CI 2021-12-13 2.9.3 EN Managing Dotfiles With Chezmoi 2021-12-04 2.9.2 EN Advanced features of Chezmoi 2021-12-01 2.9.1 EN Chezmoi 2 2021-11-26 2.8.0 EN Weekly Journal 47 - chezmoi, neovim 2021-10-26 2.7.3 RU \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a 2021-10-25 2.7.3 EN Share credentials across machines using chezmoi and bitwarden 2021-09-18 2.1.2 EN PBS 125 of X \u2014 Chezmoi on Multiple Computers 2021-09-14 2.2.0 EN Managing preference plists under Chezmoi 2021-09-06 2.2.0 EN chezmoi dotfile management 2021-09-04 2.2.0 EN Configuration Management 2021-09-04 2.1.2 EN PBS 124 of X \u2014 Chezmoi Templates 2021-08-22 2.1.2 EN PBS 123 of X \u2014 Backing up and Syncing Dot Files with Chezmoi 2021-08-08 2.1.2 EN PBS 122 of X \u2014 Managing Dot Files with Chezmoi 2021-08-04 2.1.2 PT Como instalar o Chezmoi, um gerenciador de dotfiles, no Ubuntu, Linux Mint, Fedora, Debian 2021-07-23 2.1.2 EN PBS 121 of X \u2014 Managing Dot Files and an Introduction to Chezmoi 2021-07-15 2.1.2 CN \u4f7f\u7528Chezmoi\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-05-14 2.0.12 EN A brief history of my dotfile management 2021-05-12 2.0.12 EN My Dotfiles Story: A Journey to Chezmoi 2021-05-10 2.0.11 EN Development Environment (2021) 2021-04-08 2.0.9 FR Bienvenue chez moi 2021-04-01 2.0.7 EN ChezMoi 2021-02-17 1.8.11 JP chezmoi \u3067 dotfiles \u3092\u624b\u8efd\u306b\u67d4\u8edf\u306b\u30bb\u30ad\u30e5\u30a2\u306b\u7ba1\u7406\u3059\u308b 2021-02-07 1.8.10 JP chezmoi\u59cb\u3081\u305f 2021-01-29 1.8.10 CN \u7528 Chezmoi \u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 2021-01-12 1.8.10 EN Automating the Setup of a New Mac With All Your Apps, Preferences, and Development Tools 2020-11-06 1.8.8 EN Chezmoi \u2013 Securely Manage dotfiles across multiple machines 2020-11-05 1.8.8 EN Using chezmoi to manage dotfiles 2020-10-05 1.8.6 EN Dotfiles with Chezmoi 2020-10-03 1.8.6 EN Chezmoi Merging 2020-08-13 1.8.3 EN Using BitWarden and Chezmoi to manage SSH keys 2020-08-09 1.8.3 EN Automating and testing dotfiles 2020-08-03 1.8.3 EN Automating a Linux in Windows Dev Setup 2020-07-03 1.8.3 EN Feeling at home in a LXD container 2020-06-15 1.8.2 EN Dotfiles management using chezmoi - How I Use Linux Desktop at Work Part5 2020-04-27 1.8.0 EN Managing my dotfiles with chezmoi 2020-04-20 1.8.0 FR Gestion des dotfiles et des secrets avec chezmoi 2020-04-19 1.7.19 FR Git &amp; dotfiles : versionner ses fichiers de configuration 2020-04-16 1.7.19 FR Chezmoi, visite guid\u00e9e 2020-04-17 1.7.17 CN \u7528 Chezmoi \u53d6\u56de\u4f60\u7684\u70b9\u6587\u4ef6 2020-04-03 1.7.17 EN Fedora Magazine: Take back your dotfiles with Chezmoi 2020-04-01 1.7.17 EN Managing dotfiles and secret with chezmoi 2019-01-10 0.0.11 EN Linux Fu: The kitchen sync"},{"location":"links/dotfile-repos/","title":"Dotfile repos","text":"<ul> <li> <p>GitHub</p> </li> <li> <p>GitLab</p> </li> <li> <p>Codeberg</p> </li> </ul>"},{"location":"links/podcasts/","title":"Podcasts","text":"<p>Tip</p> <p>Recommended podcast: Managing Dot Files and an Introduction to Chezmoi</p> Date Version Language Title 2023-05-22 2.33.6 ES 491 - Tres herramientas que han revolucionado mi terminal Linux 2023-01-30 2.29.3 ES 459 - Soy un zoquete, otra vez hice un rm -rf 2022-05-27 2.17.0 EN F\u00e9d\u00e9rer une communaut\u00e9 technique autour d'un projet Open Source 2022-03-11 2.14.0 EN The Real Python Podcast: Episode 101: Tools for Setting Up Python on a New Machine 2021-09-18 2.1.2 EN CCATP #699 \u2013 Bart Busschots on PBS 125 of X \u2013 Chezmoi on Multiple Computers 2021-09-04 2.1.2 EN CCATP #698 \u2013 Bart Busschots on PBS 124 of X \u2013 Chezmoi Templates 2021-08-22 2.1.2 EN CCATP #696 \u2013 Bart Busschots on PBS 123 of X \u2014 Backing up and Syncing Dot Files with Chezmoi 2021-08-08 2.1.2 EN CCATP #695 \u2013 Bart Busschots on PBS 122 \u2013 Managing Dot Files with Chezmoi 2021-07-23 2.1.2 EN CCATP #693 \u2013 Bart Busschots on PBS 121 of X \u2014 Managing Dot Files and an Introduction to Chezmoi 2019-11-20 1.7.2 EN FLOSS weekly episode 556: chezmoi"},{"location":"links/related-software/","title":"Related software","text":""},{"location":"links/related-software/#editor-integration","title":"Editor integration","text":""},{"location":"links/related-software/#githubcomalker0chezmoivim","title":"<code>github.com/alker0/chezmoi.vim</code>","text":"<p>Intelligent VIM syntax highlighting when editing files in your source directory. Works with both <code>chezmoi edit</code> and editing files directly.</p>"},{"location":"links/related-software/#githubcomtuh8888chezmoiel","title":"<code>github.com/tuh8888/chezmoi.el</code>","text":"<p>Convenience functions for interacting with chezmoi in Emacs.</p>"},{"location":"links/related-software/#githubcomliljavim-chezmoi","title":"<code>github.com/Lilja/vim-chezmoi</code>","text":"<p>A plugin for VIM to apply the dotfile you are editing on <code>:w</code>.</p>"},{"location":"links/related-software/#githubcomxvzcchezmoinvim","title":"<code>github.com/xvzc/chezmoi.nvim</code>","text":"<p>Edit your chezmoi-managed files and automatically apply.</p>"},{"location":"links/related-software/#other","title":"Other","text":""},{"location":"links/related-software/#atuinsh","title":"<code>atuin.sh</code>","text":"<p>Sync, search and backup shell history .</p>"},{"location":"links/related-software/#githubcomhussainwebansible-role-chezmoi","title":"<code>github.com/hussainweb/ansible-role-chezmoi</code>","text":"<p>Installs chezmoi on Ubuntu and Debian servers.</p>"},{"location":"links/related-software/#githubcomjokeasdf-chezmoi","title":"<code>github.com/joke/asdf-chezmoi</code>","text":"<p>chezmoi plugin for asdf version manager.</p>"},{"location":"links/related-software/#githubcomtcaxledrapeau","title":"<code>github.com/tcaxle/drapeau</code>","text":"<p>An add-on to synchronize your colorschemes across systems and allow easy colorscheme switching using chezmoi templates.</p>"},{"location":"links/related-software/#githubcomvorpalbladechezmoi_modify_manager","title":"<code>github.com/VorpalBlade/chezmoi_modify_manager</code>","text":"<p>An add-on to deal with config files that contain a mix of settings and transient state, such as with GUI program settings files also containing recently used files and window positions.</p>"},{"location":"links/social-media/","title":"Social media","text":"Platform Search term Hacker News <code>chezmoi</code> LinkedIn <code>chezmoi dotfiles</code> Reddit <code>chezmoi</code> Twitter <code>chezmoi dotfiles</code> Twitter <code>chezmoi.io</code> YouTube <code>chezmoi dotfiles</code>"},{"location":"links/videos/","title":"Videos","text":"<p>Tip</p> <p>Recommended video: chezmoi: manage your dotfiles across multiple, diverse machines, securely</p> Date Version Language Title 2023-12-03 2.42.2 EN The ultimate dotfiles setup 2022-12-15 2.27.3 ES Archivos de configuraci\u00f3n f\u00e1cil con chezmoi 2022-09-13 2.22.1 EN Using chezmoi to automate dotfiles / config files (+ my bashrc) 2022-04-27 2.15.1 EN Easily moving Linux installs 2021-12-08 2.9.3 EN How Go makes chezmoi possible 2021-11-27 2.8.0 TH Command \u0e44\u0e23 2021-11-27 : \u0e22\u0e49\u0e32\u0e22 dotfiles \u0e44\u0e1b chezmoi 2021-09-06 2.2.0 EN chezmoi: Organize your dotfiles across multiple computers 2021-02-06 1.8.10 EN chezmoi: manage your dotfiles across multiple, diverse machines, securely 2020-07-06 1.8.3 EN Conf42: chezmoi: Manage your dotfiles across multiple machines, securely 2020-03-12 1.7.16 EN Managing Dotfiles with ChezMoi 2019-11-20 1.7.2 EN FLOSS weekly episode 556: chezmoi"},{"location":"reference/","title":"Reference","text":"<p>Manage your dotfiles across multiple machines, securely.</p>"},{"location":"reference/application-order/","title":"Application order","text":"<p>chezmoi is deterministic in its order of application. The order is:</p> <ol> <li>Read the source state.</li> <li>Read the destination state.</li> <li>Compute the target state.</li> <li>Run <code>run_before_</code> scripts in alphabetical order.</li> <li>Update entries in the target state (files, directories, externals, scripts,    symlinks, etc.) in alphabetical order of their target name. Directories    (including those created by externals) are updated before the files they    contain.</li> <li>Run <code>run_after_</code> scripts in alphabetical order.</li> </ol> <p>Target names are considered after all attributes are stripped.</p> <p>Example</p> <p>Given <code>create_alpha</code> and <code>modify_dot_beta</code> in the source state, <code>.beta</code> will be updated before <code>alpha</code> because <code>.beta</code> sorts before <code>alpha</code>.</p> <p>chezmoi assumes that the source or destination states are not modified while chezmoi is being executed. This assumption permits significant performance improvements, including allowing chezmoi to only read files from the source and destination states if they are needed to compute the target state.</p> <p>chezmoi's behavior when the above assumptions are violated is undefined. For example, using a <code>run_before_</code> script to update files in the source or destination states violates the assumption that the source and destination states do not change while chezmoi is running.</p> <p>Note</p> <p>External sources are updated during the update phase; it is inadvisable for a <code>run_before_</code> script to depend on an external applied during the update phase. <code>run_after_</code> scripts may freely depend on externals.</p>"},{"location":"reference/concepts/","title":"Concepts","text":"<p>chezmoi computes the target state for the current machine and then updates the destination directory, where:</p> <ul> <li> <p>The destination directory is the directory that chezmoi manages, usually   your home directory, <code>~</code>.</p> </li> <li> <p>A target is a file, directory, or symlink in the destination directory.</p> </li> <li> <p>The destination state is the current state of all the targets in the   destination directory.</p> </li> <li> <p>The source state declares the desired state of your home directory,   including templates that use machine-specific data. It contains only regular   files and directories.</p> </li> <li> <p>The source directory is where chezmoi stores the source state. By default   it is <code>~/.local/share/chezmoi</code>.</p> </li> <li> <p>The config file contains machine-specific data. By default it is   <code>~/.config/chezmoi/chezmoi.toml</code>.</p> </li> <li> <p>The target state is the desired state of the destination directory. It is   computed from the source state, the config file, and the destination state.   The target state includes regular files and directories, and may also include   symbolic links, scripts to be run, and targets to be removed.</p> </li> <li> <p>The working tree is the git working tree. Normally it is the same as the   source directory, but can be a parent of the source directory.</p> </li> </ul>"},{"location":"reference/plugins/","title":"Plugins","text":"<p>chezmoi supports plugins, similar to git.</p> <p>If you run <code>chezmoi command</code> where command is not a builtin chezmoi command then chezmoi will look for a binary called <code>chezmoi-command</code> in your <code>$PATH</code>. If such a binary is found then chezmoi will execute it. Otherwise, chezmoi will report an unknown command error.</p>"},{"location":"reference/source-state-attributes/","title":"Source state attributes","text":"<p>chezmoi stores the source state of files, symbolic links, and directories in regular files and directories in the source directory (<code>~/.local/share/chezmoi</code> by default). This location can be overridden with the <code>-S</code> flag or by giving a value for <code>sourceDir</code> in the configuration file. Directory targets are represented as directories in the source state. All other target types are represented as files in the source state. Some state is encoded in the source names.</p> <p>The following prefixes and suffixes are special, and are collectively referred to as \"attributes\":</p> Prefix Effect <code>after_</code> Run script after updating the destination <code>before_</code> Run script before updating the destination <code>create_</code> Ensure that the file exists, and create it with contents if it does not <code>dot_</code> Rename to use a leading dot, e.g. <code>dot_foo</code> becomes <code>.foo</code> <code>empty_</code> Ensure the file exists, even if is empty. By default, empty files are removed <code>encrypted_</code> Encrypt the file in the source state <code>external_</code> Ignore attributes in child entries <code>exact_</code> Remove anything not managed by chezmoi <code>executable_</code> Add executable permissions to the target file <code>literal_</code> Stop parsing prefix attributes <code>modify_</code> Treat the contents as a script that modifies an existing file <code>once_</code> Only run the script if its contents have not been run before <code>onchange_</code> Only run the script if its contents have not been run before with the same filename <code>private_</code> Remove all group and world permissions from the target file or directory <code>readonly_</code> Remove all write permissions from the target file or directory <code>remove_</code> Remove the file or symlink if it exists or the directory if it is empty <code>run_</code> Treat the contents as a script to run <code>symlink_</code> Create a symlink instead of a regular file Suffix Effect <code>.literal</code> Stop parsing suffix attributes <code>.tmpl</code> Treat the contents of the source file as a template <p>Different target types allow different prefixes and suffixes. The order of prefixes is important.</p> Target type Source type Allowed prefixes in order Allowed suffixes Directory Directory <code>remove_</code>, <code>external_</code>, <code>exact_</code>, <code>private_</code>, <code>readonly_</code>, <code>dot_</code> none Regular file File <code>encrypted_</code>, <code>private_</code>, <code>readonly_</code>, <code>empty_</code>, <code>executable_</code>, <code>dot_</code> <code>.tmpl</code> Create file File <code>create_</code>, <code>encrypted_</code>, <code>private_</code>, <code>readonly_</code>, <code>empty_</code>, <code>executable_</code>, <code>dot_</code> <code>.tmpl</code> Modify file File <code>modify_</code>, <code>encrypted_</code>, <code>private_</code>, <code>readonly_</code>, <code>executable_</code>, <code>dot_</code> <code>.tmpl</code> Remove file File <code>remove_</code>, <code>dot_</code> none Script File <code>run_</code>, <code>once_</code> or <code>onchange_</code>, <code>before_</code> or <code>after_</code> <code>.tmpl</code> Symbolic link File <code>symlink_</code>, <code>dot_</code> <code>.tmpl</code> <p>The <code>literal_</code> prefix and <code>.literal</code> suffix can appear anywhere and stop attribute parsing. This permits filenames that would otherwise conflict with chezmoi's attributes to be represented.</p> <p>In addition, if the source file is encrypted, the suffix <code>.age</code> (when age encryption is used) or <code>.asc</code> (when gpg encryption is used) is stripped. These suffixes can be overridden with the <code>age.suffix</code> and <code>gpg.suffix</code> configuration variables.</p> <p>chezmoi ignores all files and directories in the source directory that begin with a <code>.</code> with the exception of files and directories that begin with <code>.chezmoi</code>.</p>"},{"location":"reference/target-types/","title":"Target types","text":"<p>chezmoi will create, update, and delete files, directories, and symbolic links in the destination directory, and run scripts. chezmoi deterministically performs actions in ASCII order of their target name.</p> <p>Example</p> <p>Given a file <code>dot_a</code>, a script <code>run_z</code>, and a directory <code>exact_dot_c</code>, chezmoi will first create <code>.a</code>, create <code>.c</code>, and then execute <code>run_z</code>.</p>"},{"location":"reference/target-types/#files","title":"Files","text":"<p>Files are represented by regular files in the source state. The <code>encrypted_</code> attribute determines whether the file in the source state is encrypted. The <code>executable_</code> attribute will set the executable bits in the target state, and the <code>private_</code> attribute will clear all group and world permissions. The <code>readonly_</code> attribute will clear all write permission bits in the target state. Files with the <code>.tmpl</code> suffix will be interpreted as templates. If the target contents are empty then the file will be removed, unless it has an <code>empty_</code> prefix.</p>"},{"location":"reference/target-types/#create-file","title":"Create file","text":"<p>Files with the <code>create_</code> prefix will be created in the target state with the contents of the file in the source state if they do not already exist. If the file in the destination state already exists then its contents will be left unchanged.</p>"},{"location":"reference/target-types/#modify-file","title":"Modify file","text":"<p>Files with the <code>modify_</code> prefix are treated as scripts that modify an existing file.</p> <p>If the file contains a line with the text <code>chezmoi:modify-template</code> then that line is removed and the rest of the script is executed template with the existing file's contents passed as a string in <code>.chezmoi.stdin</code>. The result of executing the template are the new contents of the file.</p> <p>Otherwise, the contents of the existing file (which maybe empty if the existing file does not exist or is empty) are passed to the script's standard input, and the new contents are read from the script's standard output.</p>"},{"location":"reference/target-types/#remove-entry","title":"Remove entry","text":"<p>Files with the <code>remove_</code> prefix will cause the corresponding entry (file, directory, or symlink) to be removed in the target state.</p>"},{"location":"reference/target-types/#directories","title":"Directories","text":"<p>Directories are represented by regular directories in the source state. The <code>exact_</code> attribute causes chezmoi to remove any entries in the target state that are not explicitly specified in the source state, and the <code>private_</code> attribute causes chezmoi to clear all group and world permissions. The <code>readonly_</code> attribute will clear all write permission bits.</p>"},{"location":"reference/target-types/#symbolic-links","title":"Symbolic links","text":"<p>Symbolic links are represented by regular files in the source state with the prefix <code>symlink_</code>. The contents of the file will have a trailing newline stripped, and the result be interpreted as the target of the symbolic link. Symbolic links with the <code>.tmpl</code> suffix in the source state are interpreted as templates. If the target of the symbolic link is empty or consists only of whitespace, then the target is removed.</p>"},{"location":"reference/target-types/#scripts","title":"Scripts","text":"<p>Scripts are represented as regular files in the source state with prefix <code>run_</code>. The file's contents (after being interpreted as a template if it has a <code>.tmpl</code> suffix) are executed.</p> <p>Scripts are executed on every <code>chezmoi apply</code>, unless they have the <code>once_</code> or <code>onchange_</code> attribute. <code>run_once_</code> scripts are only executed if a script with the same contents has not been run before, i.e. if the script is new or if its contents have changed. <code>run_onchange_</code> scripts are executed whenever their contents change, even if a script with the same contents has run before.</p> <p>Scripts with the <code>before_</code> attribute are executed before any files, directories, or symlinks are updated. Scripts with the <code>after_</code> attribute are executed after all files, directories, and symlinks have been updated. Scripts without an <code>before_</code> or <code>after_</code> attribute are executed in ASCII order of their target names with respect to files, directories, and symlinks.</p> <p>Scripts will normally run with their working directory set to their equivalent location in the destination directory. If the equivalent location in the destination directory either does not exist or is not a directory, then chezmoi will walk up the script's directory hierarchy and run the script in the first directory that exists and is a directory.</p> <p>Example</p> <p>A script in <code>~/.local/share/chezmoi/dir/run_script</code> will be run with a working directory of <code>~/dir</code>.</p> <p>chezmoi sets a number of <code>CHEZMOI*</code> environment variables when running scripts, corresponding to commonly-used template data variables. Extra environment variables can be set in the <code>env</code> or <code>scriptEnv</code> configuration variables.</p>"},{"location":"reference/target-types/#scripts-on-windows","title":"Scripts on Windows","text":"<p>The execution of scripts on Windows depends on the script's file extension. Windows will natively execute scripts with a <code>.bat</code>, <code>.cmd</code>, <code>.com</code>, and <code>.exe</code> extensions. Other extensions require an interpreter, which must be in your <code>%PATH%</code>.</p> <p>The default script interpreters are:</p> Extension Command Arguments <code>.nu</code> <code>nu</code> none <code>.pl</code> <code>perl</code> none <code>.py</code> <code>python3</code> none <code>.ps1</code> <code>powershell</code> <code>-NoLogo</code> <code>.rb</code> <code>ruby</code> none <p>Script interpreters can be added or overridden by adding the corresponding extension (without the leading dot) as a key under the <code>interpreters</code> section of the configuration file.</p> <p>Note</p> <p>The leading <code>.</code> is dropped from extension, for example to specify the interpreter for <code>.pl</code> files you configure <code>interpreters.pl</code> (where <code>.</code> in this case just means \"a child of\" in the configuration file, however that is specified in your preferred format).</p> <p>Example</p> <p>To change the Python interpreter to <code>C:\\Python39\\python3.exe</code> and add a Tcl/Tk interpreter, include the following in your config file:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[interpreters.py]\n    command = 'C:\\Python39\\python3.exe'\n[interpreters.tcl]\n    command = \"tclsh\"\n</code></pre> <p>Or if using YAML:</p> ~/.config/chezmoi/chezmoi.yaml<pre><code>interpreters:\n  py:\n    command: \"C:\\Python39\\python3.exe\"\n  tcl:\n    command: \"tclsh\"\n</code></pre> <p>Note that the TOML version can also be written like this, which resembles the YAML version more and makes it clear that the key for each file extension should not have a leading <code>.</code>:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[interpreters]\npy = { command = 'C:\\Python39\\python3.exe' }\ntcl = { command = \"tclsh\" }\n</code></pre> <p>Note</p> <p>If you intend to use PowerShell Core (<code>pwsh.exe</code>) as the <code>.ps1</code> interpreter, include the following in your config file:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[interpreters.ps1]\n    command = \"pwsh\"\n    args = [\"-NoLogo\"]\n</code></pre> <p>If the script in the source state is a template (with a <code>.tmpl</code> extension), then chezmoi will strip the <code>.tmpl</code> extension and use the next remaining extension to determine the interpreter to use.</p>"},{"location":"reference/target-types/#symlink-mode","title":"<code>symlink</code> mode","text":"<p>By default, chezmoi will create regular files and directories. Setting <code>mode = \"symlink\"</code> will make chezmoi behave more like a dotfile manager that uses symlinks by default, i.e. <code>chezmoi apply</code> will make dotfiles symlinks to files in the source directory if the target is a regular file and is not encrypted, executable, private, or a template.</p>"},{"location":"reference/command-line-flags/","title":"Command line flags","text":"<p>Command line flags override any values set in the configuration file.</p>"},{"location":"reference/command-line-flags/common/","title":"Common command line flags","text":"<p>The following flags apply to multiple commands where they are relevant.</p>"},{"location":"reference/command-line-flags/common/#-f-format-jsonyaml","title":"<code>-f</code>, <code>--format</code> <code>json</code>|<code>yaml</code>","text":"<p>Set the output format.</p>"},{"location":"reference/command-line-flags/common/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Include target state entries of type types. types is a comma-separated list of types:</p> Type Description <code>all</code> All entries (default) <code>none</code> No entries <code>dirs</code> Directories <code>files</code> Files <code>remove</code> Removes <code>scripts</code> Scripts <code>symlinks</code> Symbolic links <code>always</code> Scripts that are always run <code>encrypted</code> Encrypted entries <code>externals</code> External entries <code>templates</code> Templates <p>Types can be preceded with <code>no</code> to remove them.</p> <p>Types can be explicitly excluded with the <code>--exclude</code> flag.</p> <p>Example</p> <p><code>--include=files</code> specifies all files.</p>"},{"location":"reference/command-line-flags/common/#-init","title":"<code>--init</code>","text":"<p>Regenerate and reread the config file from the config file template before computing the target state.</p>"},{"location":"reference/command-line-flags/common/#-interactive","title":"<code>--interactive</code>","text":"<p>Prompt before applying each target.</p>"},{"location":"reference/command-line-flags/common/#-r-recursive","title":"<code>-r</code>, <code>--recursive</code>","text":"<p>Recurse into subdirectories, <code>true</code> by default.</p>"},{"location":"reference/command-line-flags/common/#-source-path","title":"<code>--source-path</code>","text":"<p>Interpret targets passed to the command as paths in the source directory rather than the destination directory.</p>"},{"location":"reference/command-line-flags/common/#-x-exclude-types","title":"<code>-x</code>, <code>--exclude</code> types","text":"<p>Exclude target state entries of type types. types is defined as in the <code>--include</code> flag and defaults to <code>none</code>.</p> <p>Example</p> <p><code>--exclude=scripts</code> will cause the command to not run scripts and <code>--exclude=encrypted</code> will exclude encrypted files.</p>"},{"location":"reference/command-line-flags/developer/","title":"Developer command line flags","text":"<p>The following flags are global but only relevant for developers and debugging.</p>"},{"location":"reference/command-line-flags/developer/#-cpu-profile-filename","title":"<code>--cpu-profile</code> filename","text":"<p>Write a Go CPU profile to filename.</p>"},{"location":"reference/command-line-flags/developer/#-debug","title":"<code>--debug</code>","text":"<p>Log information helpful for debugging.</p>"},{"location":"reference/command-line-flags/global/","title":"Global command line flags","text":""},{"location":"reference/command-line-flags/global/#-cache-directory","title":"<code>--cache</code> directory","text":"<p>Configuration: <code>cacheDir</code></p> <p>Use directory as the cache directory.</p>"},{"location":"reference/command-line-flags/global/#-color-value","title":"<code>--color</code> value","text":"<p>Configuration: <code>color</code></p> <p>Colorize diffs, value can be <code>on</code>, <code>off</code>, <code>auto</code>, or any boolean-like value recognized by <code>promptBool</code>. The default is <code>auto</code> which will colorize diffs only if the environment variable <code>$NO_COLOR</code> is not set and stdout is a terminal.</p>"},{"location":"reference/command-line-flags/global/#-c-config-filename","title":"<code>-c</code>, <code>--config</code> filename","text":"<p>Read the configuration from filename.</p>"},{"location":"reference/command-line-flags/global/#-config-format-jsonjsonctomlyaml","title":"<code>--config-format</code> <code>json</code>|<code>jsonc</code>|<code>toml</code>|<code>yaml</code>","text":"<p>Assume the configuration file is in the given format. This is only needed if the config filename does not have an extension, for example when it is <code>/dev/stdin</code>.</p>"},{"location":"reference/command-line-flags/global/#-d-destination-directory","title":"<code>-D</code>, <code>--destination</code> directory","text":"<p>Configuration: <code>destDir</code></p> <p>Use directory as the destination directory.</p>"},{"location":"reference/command-line-flags/global/#-n-dry-run","title":"<code>-n</code>, <code>--dry-run</code>","text":"<p>Set dry run mode. In dry run mode, the destination directory is never modified. This is most useful in combination with the <code>-v</code> (verbose) flag to print changes that would be made without making them.</p>"},{"location":"reference/command-line-flags/global/#-force","title":"<code>--force</code>","text":"<p>Make changes without prompting.</p>"},{"location":"reference/command-line-flags/global/#-h-help","title":"<code>-h</code>, <code>--help</code>","text":"<p>Print help.</p>"},{"location":"reference/command-line-flags/global/#-k-keep-going","title":"<code>-k</code>, <code>--keep-going</code>","text":"<p>Keep going as far as possible after a encountering an error.</p>"},{"location":"reference/command-line-flags/global/#-no-pager","title":"<code>--no-pager</code>","text":"<p>Do not use the pager.</p>"},{"location":"reference/command-line-flags/global/#-no-tty","title":"<code>--no-tty</code>","text":"<p>Do not attempt to get a TTY for prompts. Instead, read them from stdin.</p>"},{"location":"reference/command-line-flags/global/#-o-output-filename","title":"<code>-o</code>, <code>--output</code> filename","text":"<p>Write the output to filename instead of stdout.</p>"},{"location":"reference/command-line-flags/global/#-persistent-state-filename","title":"<code>--persistent-state</code> filename","text":"<p>Configuration: <code>persistentState</code></p> <p>Read and write the persistent state from filename. By default, chezmoi stores its persistent state in <code>chezmoistate.boltdb</code> in the same directory as its configuration file.</p>"},{"location":"reference/command-line-flags/global/#-progress-value","title":"<code>--progress</code> value","text":"<p>Show progress when downloading externals. value can be <code>on</code>, <code>off</code>, or <code>auto</code>. The default is <code>auto</code> which shows progress bars when stdout is a terminal.</p>"},{"location":"reference/command-line-flags/global/#-r-refresh-externals-value","title":"<code>-R</code>, <code>--refresh-externals</code> [value]","text":"<p>Control the refresh of the externals cache. value can be any of <code>always</code>, <code>auto</code>, or <code>never</code> and defaults to <code>always</code> if no value is specified. If no <code>--refresh-externals</code> flag is specified then chezmoi defaults to <code>auto</code>.</p> <p><code>always</code> (or any truthy value as accepted by <code>parseBool</code>) causes chezmoi to re-download externals.</p> <p><code>auto</code> means only re-download externals that have not been downloaded within their refresh periods.</p> <p><code>never</code> (or any other falsey value accepted by <code>parseBool</code>) means only download if no cached external is available.</p>"},{"location":"reference/command-line-flags/global/#-s-source-directory","title":"<code>-S</code>, <code>--source</code> directory","text":"<p>Configuration: <code>sourceDir</code></p> <p>Use directory as the source directory.</p>"},{"location":"reference/command-line-flags/global/#-use-builtin-age-value","title":"<code>--use-builtin-age</code> value","text":"<p>Configuration: <code>useBuiltinAge</code></p> <p>Use chezmoi's builtin age encryption instead of an external <code>age</code> command. value can be <code>on</code>, <code>off</code>, <code>auto</code>, or any boolean-like value recognized by <code>promptBool</code>. The default is <code>auto</code> which will only use the builtin age if <code>age.command</code> cannot be found in <code>$PATH</code>.</p> <p>The builtin <code>age</code> command does not support passphrases, symmetric encryption, or the use of SSH keys.</p>"},{"location":"reference/command-line-flags/global/#-use-builtin-git-value","title":"<code>--use-builtin-git</code> value","text":"<p>Configuration: <code>useBuiltinGit</code></p> <p>Use chezmoi's builtin git instead of <code>git.command</code> for the <code>init</code> and <code>update</code> commands. value can be <code>on</code>, <code>off</code>, <code>auto</code>, or any boolean-like value recognized by <code>promptBool</code>. The default is <code>auto</code> which will only use the builtin git if <code>git.command</code> cannot be found in <code>$PATH</code>.</p> <p>Info</p> <p>chezmoi's builtin git has only supports the HTTP and HTTPS transports and does not support <code>git-repo</code> externals.</p>"},{"location":"reference/command-line-flags/global/#-v-verbose","title":"<code>-v</code>, <code>--verbose</code>","text":"<p>Set verbose mode. In verbose mode, chezmoi prints the changes that it is making as approximate shell commands, and any differences in files between the target state and the destination set are printed as unified diffs.</p>"},{"location":"reference/command-line-flags/global/#-version","title":"<code>--version</code>","text":"<p>Print the version of chezmoi, the commit at which it was built, and the build timestamp.</p>"},{"location":"reference/command-line-flags/global/#-w-working-tree-directory","title":"<code>-w</code>, <code>--working-tree</code> directory","text":"<p>Use directory as the git working tree directory. By default, chezmoi searches the source directory and then its ancestors for the first directory that contains a <code>.git</code> directory.</p>"},{"location":"reference/commands/add/","title":"<code>add</code> target...","text":"<p>Add targets to the source state. If any target is already in the source state, then its source state is replaced with its current state in the destination directory.</p>"},{"location":"reference/commands/add/#-autotemplate","title":"<code>--autotemplate</code>","text":"<p>Automatically generate a template by replacing strings that match variable values from the <code>data</code> section of the config file with their respective config names as a template string. Longer substitutions occur before shorter ones. This implies the <code>--template</code> option.</p> <p>Warning</p> <p><code>--autotemplate</code> uses a greedy algorithm which occasionally generates templates with unwanted variable substitutions. Carefully review any templates it generates.</p>"},{"location":"reference/commands/add/#-encrypt","title":"<code>--encrypt</code>","text":"<p>Encrypt files using the defined encryption method.</p>"},{"location":"reference/commands/add/#-f-force","title":"<code>-f</code>, <code>--force</code>","text":"<p>Add targets, even if doing so would cause a source template to be overwritten.</p>"},{"location":"reference/commands/add/#-follow","title":"<code>--follow</code>","text":"<p>If the last part of a target is a symlink, add the target of the symlink instead of the symlink itself.</p>"},{"location":"reference/commands/add/#-exact","title":"<code>--exact</code>","text":"<p>Set the <code>exact</code> attribute on added directories.</p>"},{"location":"reference/commands/add/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Only add entries of type types.</p>"},{"location":"reference/commands/add/#-p-prompt","title":"<code>-p</code>, <code>--prompt</code>","text":"<p>Interactively prompt before adding each file.</p>"},{"location":"reference/commands/add/#-q-quiet","title":"<code>-q</code>, <code>--quiet</code>","text":"<p>Suppress warnings about adding ignored entries.</p>"},{"location":"reference/commands/add/#-r-recursive","title":"<code>-r</code>, <code>--recursive</code>","text":"<p>Recursively add all files, directories, and symlinks.</p>"},{"location":"reference/commands/add/#-t-template","title":"<code>-T</code>, <code>--template</code>","text":"<p>Set the <code>template</code> attribute on added files and symlinks.</p>"},{"location":"reference/commands/add/#-template-symlinks","title":"<code>--template-symlinks</code>","text":"<p>When adding symlink to an absolute path in the source directory or destination directory, create a symlink template with <code>.chezmoi.sourceDir</code> or <code>.chezmoi.homeDir</code>. This is useful for creating portable absolute symlinks.</p> <p>Bug</p> <p><code>chezmoi add</code> will fail if the entry being added is in a directory implicitly created by an external. See this GitHub issue for details.</p> <p>Example</p> <pre><code>$ chezmoi add ~/.bashrc\n$ chezmoi add ~/.gitconfig --template\n$ chezmoi add ~/.ssh/id_rsa --encrypt\n$ chezmoi add ~/.vim --recursive\n$ chezmoi add ~/.oh-my-zsh --exact --recursive\n</code></pre>"},{"location":"reference/commands/age/","title":"<code>age</code>","text":"<p>Interact with age's passphrase-based encryption.</p> <p>Hint</p> <p>To get a full list of subcommands run:</p> <pre><code>$ chezmoi age help\n</code></pre> <p>Example</p> <pre><code>$ chezmoi age encrypt --passphrase plaintext.txt &gt; ciphertext.txt\n$ chezmoi age decrypt --passphrase ciphertext.txt &gt; decrypted-ciphertext.txt\n</code></pre>"},{"location":"reference/commands/apply/","title":"<code>apply</code> [target...]","text":"<p>Ensure that target... are in the target state, updating them if necessary. If no targets are specified, the state of all targets are ensured. If a target has been modified since chezmoi last wrote it then the user will be prompted if they want to overwrite the file.</p>"},{"location":"reference/commands/apply/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Only add entries of type types.</p>"},{"location":"reference/commands/apply/#-source-path","title":"<code>--source-path</code>","text":"<p>Specify targets by source path, rather than target path. This is useful for applying changes after editing.</p> <p>Example</p> <pre><code>$ chezmoi apply\n$ chezmoi apply --dry-run --verbose\n$ chezmoi apply ~/.bashrc\n</code></pre>"},{"location":"reference/commands/archive/","title":"<code>archive</code> [target....]","text":"<p>Generate an archive of the target state, or only the targets specified. This can be piped into <code>tar</code> to inspect the target state.</p>"},{"location":"reference/commands/archive/#-f-format-tartargztgzzip","title":"<code>-f</code>, <code>--format</code> <code>tar</code>|<code>tar.gz</code>|<code>tgz</code>|<code>zip</code>","text":"<p>Write the archive in format. If <code>--output</code> is set the format is guessed from the extension, otherwise the default is <code>tar</code>.</p>"},{"location":"reference/commands/archive/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Only include entries of type types.</p>"},{"location":"reference/commands/archive/#-z-gzip","title":"<code>-z</code>, <code>--gzip</code>","text":"<p>Compress the archive with gzip. This is automatically set if the format is <code>tar.gz</code> or <code>tgz</code> and is ignored if the format is <code>zip</code>.</p> <p>Example</p> <pre><code>$ chezmoi archive | tar tvf -\n$ chezmoi archive --output=dotfiles.tar.gz\n$ chezmoi archive --output=dotfiles.zip\n</code></pre>"},{"location":"reference/commands/cat-config/","title":"<code>cat-config</code>","text":"<p>Print the configuration file.</p> <p>Example</p> <pre><code>$ chezmoi cat-config\n</code></pre>"},{"location":"reference/commands/cat/","title":"<code>cat</code> target...","text":"<p>Write the target contents of targets to stdout. targets must be files, scripts, or symlinks. For files, the target file contents are written. For scripts, the script's contents are written. For symlinks, the target is written.</p> <p>Example</p> <pre><code>$ chezmoi cat ~/.bashrc\n</code></pre>"},{"location":"reference/commands/cd/","title":"<code>cd</code> [path]","text":"<p>Launch a shell in the working tree (typically the source directory). chezmoi will launch the command set by the <code>cd.command</code> configuration variable with any extra arguments specified by <code>cd.args</code>. If this is not set, chezmoi will attempt to detect your shell and finally fall back to an OS-specific default.</p> <p>If the optional argument path is present, the shell will be launched in the source directory corresponding to path.</p> <p>The shell will have various <code>CHEZMOI*</code> environment variables set, as for scripts.</p> <p>Hint</p> <p>This does not change the current directory of the current shell. To do that, instead use:</p> <pre><code>$ cd $(chezmoi source-path)\n</code></pre> <p>Example</p> <pre><code>$ chezmoi cd\n$ chezmoi cd ~\n$ chezmoi cd ~/.config\n</code></pre>"},{"location":"reference/commands/chattr/","title":"<code>chattr</code> modifier target...","text":"<p>Change the attributes and/or type of targets. modifier specifies what to modify.</p> <p>Add attributes by specifying them or their abbreviations directly, optionally prefixed with a plus sign (<code>+</code>). Remove attributes by prefixing them or their attributes with the string <code>no</code> or a minus sign (<code>-</code>). The available attribute modifiers and their abbreviations are:</p> Attribute modifier Abbreviation <code>after</code> <code>a</code> <code>before</code> <code>b</code> <code>empty</code> <code>e</code> <code>encrypted</code> none <code>exact</code> none <code>executable</code> <code>x</code> <code>external</code> none <code>once</code> <code>o</code> <code>private</code> <code>p</code> <code>readonly</code> <code>r</code> <code>remove</code> none <code>template</code> <code>t</code> <p>The type of a target can be changed using a type modifier:</p> Type modifier <code>create</code> <code>modify</code> <code>script</code> <code>symlink</code> <p>The negative form of type modifiers, e.g. <code>nocreate</code>, changes the target to be a regular file if it is of that type, otherwise the type is left unchanged.</p> <p>Multiple modifications may be specified by separating them with a comma (<code>,</code>). If you use the <code>-</code>modifier form then you must put modifier after a <code>--</code> to prevent chezmoi from interpreting <code>-</code>modifier as an option.</p> <p>Example</p> <pre><code>$ chezmoi chattr template ~/.bashrc\n$ chezmoi chattr noempty ~/.profile\n$ chezmoi chattr private,template ~/.netrc\n$ chezmoi chattr -- -x ~/.zshrc\n$ chezmoi chattr +create,+private ~/.kube/config\n</code></pre>"},{"location":"reference/commands/completion/","title":"<code>completion</code> shell","text":"<p>Generate shell completion code for the specified shell (<code>bash</code>, <code>fish</code>, <code>powershell</code>, or <code>zsh</code>).</p> <p>Example</p> <pre><code>$ chezmoi completion bash\n$ chezmoi completion fish --output=~/.config/fish/completions/chezmoi.fish\n</code></pre>"},{"location":"reference/commands/data/","title":"<code>data</code>","text":"<p>Write the computed template data to stdout.</p>"},{"location":"reference/commands/data/#-f-format-jsonyaml","title":"<code>-f</code>, <code>--format</code> <code>json</code>|<code>yaml</code>","text":"<p>Set the output format.</p> <p>Example</p> <pre><code>$ chezmoi data\n$ chezmoi data --format=yaml\n</code></pre>"},{"location":"reference/commands/decrypt/","title":"<code>decrypt</code> [file...]","text":"<p>Decrypt files using chezmoi's configured encryption. If no files are given, decrypt the standard input. The decrypted result is written to the standard output or a file if the <code>--output</code> flag is set.</p>"},{"location":"reference/commands/diff/","title":"<code>diff</code> [target...]","text":"<p>Print the difference between the target state and the destination state for targets. If no targets are specified, print the differences for all targets.</p> <p>If a <code>diff.pager</code> command is set in the configuration file then the output will be piped into it.</p> <p>If <code>diff.command</code> is set then it will be invoked to show individual file differences with <code>diff.args</code> passed as arguments. Each element of <code>diff.args</code> is interpreted as a template with the variables <code>.Destination</code> and <code>.Target</code> available corresponding to the path of the file in the source and target state respectively. The default value of <code>diff.args</code> is <code>[\"{{ .Destination }}\", \"{{ .Target }}\"]</code>. If <code>diff.args</code> does not contain any template arguments then <code>{{ .Destination }}</code> and <code>{{ .Target }}</code> will be appended automatically.</p>"},{"location":"reference/commands/diff/#-reverse","title":"<code>--reverse</code>","text":"<p>Reverse the direction of the diff, i.e. show the changes to the target required to match the destination.</p>"},{"location":"reference/commands/diff/#-pager-pager","title":"<code>--pager</code> pager","text":"<p>Pager to use for output.</p>"},{"location":"reference/commands/diff/#-use-builtin-diff","title":"<code>--use-builtin-diff</code>","text":"<p>Use chezmoi's builtin diff, even if the <code>diff.command</code> configuration variable is set.</p> <p>Example</p> <pre><code>$ chezmoi diff\n$ chezmoi diff ~/.bashrc\n</code></pre>"},{"location":"reference/commands/doctor/","title":"<code>doctor</code>","text":"<p>Check for potential problems.</p> <p>Example</p> <pre><code>$ chezmoi doctor\n</code></pre>"},{"location":"reference/commands/dump-config/","title":"<code>dump-config</code>","text":"<p>Dump the configuration.</p> <p>Example</p> <pre><code>$ chezmoi dump-config\n</code></pre>"},{"location":"reference/commands/dump/","title":"<code>dump</code> [target...]","text":"<p>Dump the target state of targets. If no targets are specified, then the entire target state.</p>"},{"location":"reference/commands/dump/#-f-format-jsonyaml","title":"<code>-f</code>, <code>--format</code> <code>json</code>|<code>yaml</code>","text":"<p>Set the output format.</p>"},{"location":"reference/commands/dump/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Only include entries of type types.</p> <p>Example</p> <pre><code>$ chezmoi dump ~/.bashrc\n$ chezmoi dump --format=yaml\n</code></pre>"},{"location":"reference/commands/edit-config-template/","title":"<code>edit-config-template</code>","text":"<p>Edit the configuration file template. If no configuration file template exists, then a new one is created with the contents of the current config file.</p> <p>Example</p> <pre><code>$ chezmoi edit-config-template\n</code></pre>"},{"location":"reference/commands/edit-config/","title":"<code>edit-config</code>","text":"<p>Edit the configuration file.</p> <p>Example</p> <pre><code>$ chezmoi edit-config\n</code></pre>"},{"location":"reference/commands/edit/","title":"<code>edit</code> [target...]","text":"<p>Edit the source state of targets, which must be files or symlinks. If no targets are given then the working tree of the source directory is opened.</p> <p>Encrypted files are decrypted to a private temporary directory and the editor is invoked with the decrypted file. When the editor exits the edited decrypted file is re-encrypted and replaces the original file in the source state.</p> <p>If the operating system supports hard links, then the edit command invokes the editor with filenames which match the target filename, unless the <code>edit.hardlink</code> configuration variable is set to <code>false</code> the <code>--hardlink=false</code> command line flag is set.</p>"},{"location":"reference/commands/edit/#-a-apply","title":"<code>-a</code>, <code>--apply</code>","text":"<p>Apply target immediately after editing. Ignored if there are no targets.</p>"},{"location":"reference/commands/edit/#-hardlink-bool","title":"<code>--hardlink</code> bool","text":"<p>Invoke the editor with a hard link to the source file with a name matching the target filename. This can help the editor determine the type of the file correctly. This is the default.</p>"},{"location":"reference/commands/edit/#-watch","title":"<code>--watch</code>","text":"<p>Automatically apply changes when files are saved.</p> <p>Warning</p> <p><code>--watch</code> is a beta feature with limitations. Known limitations include:</p> <ul> <li>Only works when <code>chezmoi edit</code> is invoked with arguments (i.e.   argument-free <code>chezmoi edit</code> is not supported).</li> <li>All edited files are applied when any file is saved.</li> <li>Only the edited files are watched, not any dependent files (e.g.   <code>.chezmoitemplates</code> and <code>include</code>d files in templates are not watched).</li> <li>Only works on operating systems supported by   fsnotify.</li> </ul> <p>Example</p> <pre><code>$ chezmoi edit ~/.bashrc\n$ chezmoi edit ~/.bashrc --apply\n$ chezmoi edit\n</code></pre>"},{"location":"reference/commands/encrypt/","title":"<code>encrypt</code> [file...]","text":"<p>Encrypt files using chezmoi's configured encryption. If no files are given, encrypt the standard input. The encrypted result is written to the standard output or a file if the <code>--output</code> flag is set.</p>"},{"location":"reference/commands/execute-template/","title":"<code>execute-template</code> [template...]","text":"<p>Execute templates. This is useful for testing templates or for calling chezmoi from other scripts. templates are interpreted as literal templates, with no whitespace added to the output between arguments. If no templates are specified, the template is read from stdin.</p>"},{"location":"reference/commands/execute-template/#-init-i","title":"<code>--init</code>, <code>-i</code>","text":"<p>Include simulated functions only available during <code>chezmoi init</code>.</p>"},{"location":"reference/commands/execute-template/#-left-delimiter-delimiter","title":"<code>--left-delimiter</code> delimiter","text":"<p>Set the left template delimiter.</p>"},{"location":"reference/commands/execute-template/#-promptbool-pairs","title":"<code>--promptBool</code> pairs","text":"<p>Simulate the <code>promptBool</code> template function with a function that returns values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>promptBool</code> is called with a prompt that does not match any of pairs, then it returns false.</p>"},{"location":"reference/commands/execute-template/#-promptchoice-pairs","title":"<code>--promptChoice</code> pairs","text":"<p>Simulate the <code>promptChoice</code> template function with a function that returns values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>promptChoice</code> is called with a prompt that does not match any of pairs, then it returns false.</p>"},{"location":"reference/commands/execute-template/#-promptint-pairs","title":"<code>--promptInt</code> pairs","text":"<p>Simulate the <code>promptInt</code> template function with a function that returns values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>promptInt</code> is called with a prompt that does not match any of pairs, then it returns zero.</p>"},{"location":"reference/commands/execute-template/#-promptstring-p-pairs","title":"<code>--promptString</code>, <code>-p</code> pairs","text":"<p>Simulate the <code>promptString</code> template function with a function that returns values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>promptString</code> is called with a prompt that does not match any of pairs, then it returns prompt unchanged.</p>"},{"location":"reference/commands/execute-template/#-right-delimiter-delimiter","title":"<code>--right-delimiter</code> delimiter","text":"<p>Set the right template delimiter.</p>"},{"location":"reference/commands/execute-template/#-stdinisatty-bool","title":"<code>--stdinisatty</code> bool","text":"<p>Simulate the <code>stdinIsATTY</code> function by returning bool.</p>"},{"location":"reference/commands/execute-template/#-with-stdin","title":"<code>--with-stdin</code>","text":"<p>If run with arguments, then set <code>.chezmoi.stdin</code> to the contents of the standard input.</p> <p>Example</p> <pre><code>$ chezmoi execute-template '{{ .chezmoi.sourceDir }}'\n$ chezmoi execute-template '{{ .chezmoi.os }}' / '{{ .chezmoi.arch }}'\n$ echo '{{ .chezmoi | toJson }}' | chezmoi execute-template\n$ chezmoi execute-template --init --promptString email=me@home.org &lt; ~/.local/share/chezmoi/.chezmoi.toml.tmpl\n</code></pre>"},{"location":"reference/commands/forget/","title":"<code>forget</code> target...","text":"<p>Remove targets from the source state, i.e. stop managing them. targets must have entries in the source state. They cannot be externals.</p> <p>Example</p> <pre><code>$ chezmoi forget ~/.bashrc\n</code></pre> <p>Info</p> <p>To remove targets from both the source state and destination directory, use <code>remove</code>.</p>"},{"location":"reference/commands/generate/","title":"<code>generate</code> output","text":"<p>Generates output for use with chezmoi. The currently supported outputs are:</p> Output Description <code>git-commit-message</code> A git commit message, describing the changes to the source directory. <code>install.sh</code> An install script, suitable for use with Github Codespaces <p>Example</p> <pre><code>$ chezmoi generate install.sh &gt; install.sh\n$ chezmoi git commit -m \"$(chezmoi generate git-commit-message)\"\n</code></pre>"},{"location":"reference/commands/git/","title":"<code>git</code> [arg...]","text":"<p>Run <code>git</code> args in the working tree (typically the source directory).</p> <p>Note</p> <p>Flags in args must occur after <code>--</code> to prevent chezmoi from interpreting them.</p> <p>Example</p> <pre><code>$ chezmoi git add .\n$ chezmoi git add dot_gitconfig\n$ chezmoi git -- commit -m \"Add .gitconfig\"\n</code></pre>"},{"location":"reference/commands/help/","title":"<code>help</code> [command...]","text":"<p>Print the help associated with command, or general help if no command is given.</p>"},{"location":"reference/commands/ignored/","title":"<code>ignored</code>","text":"<p>Print the list of entries ignored by chezmoi.</p> <p>Example</p> <pre><code>$ chezmoi ignored\n</code></pre>"},{"location":"reference/commands/import/","title":"<code>import</code> filename","text":"<p>Import the source state from an archive file in to a directory in the source state. This is primarily used to make subdirectories of your home directory exactly match the contents of a downloaded archive. You will generally always want to set the <code>--destination</code>, <code>--exact</code>, and <code>--remove-destination</code> flags.</p> <p>The supported archive formats are <code>tar</code>, <code>tar.gz</code>, <code>tgz</code>, <code>tar.bz2</code>, <code>tbz2</code>, <code>xz</code>, <code>.tar.zst</code>, and <code>zip</code>.</p>"},{"location":"reference/commands/import/#-destination-directory","title":"<code>--destination</code> directory","text":"<p>Set the destination (in the source state) where the archive will be imported.</p>"},{"location":"reference/commands/import/#-exact","title":"<code>--exact</code>","text":"<p>Set the <code>exact</code> attribute on all imported directories.</p>"},{"location":"reference/commands/import/#-r-remove-destination","title":"<code>-r</code>, <code>--remove-destination</code>","text":"<p>Remove destination (in the source state) before importing.</p>"},{"location":"reference/commands/import/#-strip-components-n","title":"<code>--strip-components</code> n","text":"<p>Strip n leading components from paths.</p> <p>Example</p> <pre><code>$ curl -s -L -o ${TMPDIR}/oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\n$ mkdir -p $(chezmoi source-path)/dot_oh-my-zsh\n$ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${TMPDIR}/oh-my-zsh-master.tar.gz\n</code></pre>"},{"location":"reference/commands/init/","title":"<code>init</code> [repo]","text":"<p>Setup the source directory, generate the config file, and optionally update the destination directory to match the target state.</p> <p>By default, if repo is given, chezmoi will guess the full git repo URL, using HTTPS by default, or SSH if the <code>--ssh</code> option is specified, according to the following patterns:</p> Pattern HTTPS Repo SSH repo <code>user</code> <code>https://user@github.com/user/dotfiles.git</code> <code>git@github.com:user/dotfiles.git</code> <code>user/repo</code> <code>https://user@github.com/user/repo.git</code> <code>git@github.com:user/repo.git</code> <code>site/user/repo</code> <code>https://user@site/user/repo.git</code> <code>git@site:user/repo.git</code> <code>sr.ht/~user</code> <code>https://user@git.sr.ht/~user/dotfiles</code> <code>git@git.sr.ht:~user/dotfiles.git</code> <code>sr.ht/~user/repo</code> <code>https://user@git.sr.ht/~user/repo</code> <code>git@git.sr.ht:~user/repo.git</code> <p>To disable git repo URL guessing, pass the <code>--guess-repo-url=false</code> option.</p> <p>First, if the source directory does not already contain a repository, then if repo is given, it is checked out into the source directory; otherwise a new repository is initialized in the source directory.</p> <p>Second, if a file called <code>.chezmoi.$FORMAT.tmpl</code> exists, where <code>$FORMAT</code> is one of the supported file formats (e.g. <code>json</code>, <code>jsonc</code>, <code>toml</code>, or <code>yaml</code>) then a new configuration file is created using that file as a template.</p> <p>Then, if the <code>--apply</code> flag is passed, <code>chezmoi apply</code> is run.</p> <p>Then, if the <code>--purge</code> flag is passed, chezmoi will remove its source, config, and cache directories.</p> <p>Finally, if the <code>--purge-binary</code> is passed, chezmoi will attempt to remove its own binary.</p>"},{"location":"reference/commands/init/#-apply","title":"<code>--apply</code>","text":"<p>Run <code>chezmoi apply</code> after checking out the repo and creating the config file.</p>"},{"location":"reference/commands/init/#-branch-branch","title":"<code>--branch</code> branch","text":"<p>Check out branch instead of the default branch.</p>"},{"location":"reference/commands/init/#-config-path-path","title":"<code>--config-path</code> path","text":"<p>Write the generated config file to path instead of the default location.</p>"},{"location":"reference/commands/init/#-data-bool","title":"<code>--data</code> bool","text":"<p>Include existing template data when creating the config file. This defaults to <code>true</code>. Set this to <code>false</code> to simulate creating the config file with no existing template data.</p>"},{"location":"reference/commands/init/#-depth-depth","title":"<code>--depth</code> depth","text":"<p>Clone the repo with depth depth.</p>"},{"location":"reference/commands/init/#-prompt","title":"<code>--prompt</code>","text":"<p>Force the <code>prompt*Once</code> template functions to prompt.</p>"},{"location":"reference/commands/init/#-promptbool-pairs","title":"<code>--promptBool</code> pairs","text":"<p>Populate the <code>promptBool</code> template function with values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>promptBool</code> is called with a prompt that does not match any of pairs, then it prompts the user for a value.</p>"},{"location":"reference/commands/init/#-promptchoice-pairs","title":"<code>--promptChoice</code> pairs","text":"<p>Populate the <code>promptChoice</code> template function with values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>promptChoice</code> is called with a prompt that does not match any of pairs, then it prompts the user for a value.</p>"},{"location":"reference/commands/init/#-promptdefaults","title":"<code>--promptDefaults</code>","text":"<p>Make all <code>prompt*</code> template function calls with a default value return that default value instead of prompting.</p>"},{"location":"reference/commands/init/#-promptint-pairs","title":"<code>--promptInt</code> pairs","text":"<p>Populate the <code>promptInt</code> template function with values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>prompInt</code> is called with a prompt that does not match any of pairs, then it prompts the user for a value.</p>"},{"location":"reference/commands/init/#-promptstring-pairs","title":"<code>--promptString</code> pairs","text":"<p>Populate the <code>promptString</code> template function with values from pairs. pairs is a comma-separated list of prompt<code>=</code>value pairs. If <code>promptString</code> is called with a prompt that does not match any of pairs, then it prompts the user for a value.</p>"},{"location":"reference/commands/init/#-guess-repo-url-bool","title":"<code>--guess-repo-url</code> bool","text":"<p>Guess the repo URL from the repo argument. This defaults to <code>true</code>.</p>"},{"location":"reference/commands/init/#-one-shot","title":"<code>--one-shot</code>","text":"<p><code>--one-shot</code> is the equivalent of <code>--apply</code>, <code>--depth=1</code>, <code>--force</code>, <code>--purge</code>, and <code>--purge-binary</code>. It attempts to install your dotfiles with chezmoi and then remove all traces of chezmoi from the system. This is useful for setting up temporary environments (e.g. Docker containers).</p>"},{"location":"reference/commands/init/#-purge","title":"<code>--purge</code>","text":"<p>Remove the source and config directories after applying.</p>"},{"location":"reference/commands/init/#-purge-binary","title":"<code>--purge-binary</code>","text":"<p>Attempt to remove the chezmoi binary after applying.</p>"},{"location":"reference/commands/init/#-recurse-submodules-bool","title":"<code>--recurse-submodules</code> bool","text":"<p>Recursively clone submodules. This defaults to <code>true</code>.</p>"},{"location":"reference/commands/init/#-ssh","title":"<code>--ssh</code>","text":"<p>Guess an SSH repo URL instead of an HTTPS repo.</p> <p>Example</p> <pre><code>$ chezmoi init user\n$ chezmoi init user --apply\n$ chezmoi init user --apply --purge\n$ chezmoi init user/dots\n$ chezmoi init codeberg.org/user\n$ chezmoi init gitlab.com/user\n</code></pre>"},{"location":"reference/commands/license/","title":"<code>license</code>","text":"<p>Print chezmoi's license.</p> <p>Example</p> <pre><code>$ chezmoi license\n</code></pre>"},{"location":"reference/commands/list/","title":"<code>list</code>","text":"<p><code>list</code> is an alias for <code>managed</code>.</p>"},{"location":"reference/commands/manage/","title":"<code>manage</code> target...","text":"<p><code>manage</code> is an alias for <code>add</code> for symmetry with <code>unmanage</code>.</p>"},{"location":"reference/commands/managed/","title":"<code>managed</code> [path...]","text":"<p>List all managed entries in the destination directory under all paths in alphabetical order. When no paths are supplied, list all managed entries in the destination directory in alphabetical order.</p>"},{"location":"reference/commands/managed/#-p-path-style-absoluterelativesource-absolutesource-relative","title":"<code>-p</code>, <code>--path-style</code> <code>absolute</code>|<code>relative</code>|<code>source-absolute</code>|<code>source-relative</code>","text":"<p>Print paths in the given style. Relative paths are relative to the destination directory. The default is <code>relative</code>.</p> <p>Example</p> <pre><code>$ chezmoi managed\n$ chezmoi managed --include=files\n$ chezmoi managed --include=files,symlinks\n$ chezmoi managed -i dirs\n$ chezmoi managed -i dirs,files\n$ chezmoi managed -i files ~/.config\n$ chezmoi managed --exclude=encrypted --path-style=source-relative\n</code></pre>"},{"location":"reference/commands/merge-all/","title":"<code>merge-all</code>","text":"<p>Perform a three-way merge for file whose actual state does not match its target state. The merge is performed with <code>chezmoi merge</code>.</p> <p>Example</p> <pre><code>$ chezmoi merge-all\n</code></pre>"},{"location":"reference/commands/merge/","title":"<code>merge</code> target...","text":"<p>Perform a three-way merge between the destination state, the target state, and the source state for each target. The merge tool is defined by the <code>merge.command</code> configuration variable, and defaults to <code>vimdiff</code>. If multiple targets are specified the merge tool is invoked separately and sequentially for each target. If the target state cannot be computed (for example if source is a template containing errors or an encrypted file that cannot be decrypted) a two-way merge is performed instead.</p> <p>The order of arguments to <code>merge.command</code> is set by <code>merge.args</code>. Each argument is interpreted as a template with the variables <code>.Destination</code>, <code>.Source</code>, and <code>.Target</code> available corresponding to the path of the file in the destination state, the source state, and the target state respectively. The default value of <code>merge.args</code> is <code>[\"{{ .Destination }}\", \"{{ .Source }}\", \"{{ .Target }}\"]</code>. If <code>merge.args</code> does not contain any template arguments then <code>{{ .Destination }}</code>, <code>{{ .Source }}</code>, and <code>{{ .Target }}</code> will be appended automatically.</p> <p>Example</p> <pre><code>$ chezmoi merge ~/.bashrc\n</code></pre>"},{"location":"reference/commands/purge/","title":"<code>purge</code>","text":"<p>Remove chezmoi's configuration, state, and source directory, but leave the target state intact.</p>"},{"location":"reference/commands/purge/#-f-force","title":"<code>-f</code>, <code>--force</code>","text":"<p>Remove without prompting.</p> <p>Example</p> <pre><code>$ chezmoi purge\n$ chezmoi purge --force\n</code></pre>"},{"location":"reference/commands/re-add/","title":"<code>re-add</code> [target...]","text":"<p>Re-add modified files in the target state, preserving any <code>encrypted_</code> attributes. chezmoi will not overwrite templates, and all entries that are not files are ignored.</p> <p>If no targets are specified then all modified files are re-added. If one or more targets are given then only those targets are re-added.</p> <p>Hint</p> <p>If you want to re-add a single file unconditionally, use <code>chezmoi add --force</code> instead.</p> <p>Example</p> <pre><code>$ chezmoi re-add\n$ chezmoi re-add ~/.bashrc\n</code></pre>"},{"location":"reference/commands/remove/","title":"<code>remove</code> target...","text":"<p>Remove targets from both the source state and the destination directory.</p>"},{"location":"reference/commands/remove/#-f-force","title":"<code>-f</code>, <code>--force</code>","text":"<p>Remove without prompting.</p> <p>Info</p> <p>To remove targets only from the source state, use <code>forget</code>.</p>"},{"location":"reference/commands/rm/","title":"<code>rm</code> target...","text":"<p><code>rm</code> is an alias for <code>remove</code>.</p>"},{"location":"reference/commands/secret/","title":"<code>secret</code>","text":"<p>Run a secret manager's CLI, passing any extra arguments to the secret manager's CLI. This is primarily for verifying chezmoi's integration with a custom secret manager. Normally you would use chezmoi's existing template functions to retrieve secrets.</p> <p>Note</p> <p>If you need to pass flags to the secret manager's CLI you must separate them with <code>--</code> to prevent chezmoi from interpreting them.</p> <p>Hint</p> <p>To get a full list of subcommands run:</p> <pre><code>$ chezmoi secret help\n</code></pre> <p>Example</p> <pre><code>$ chezmoi secret keyring set --service=service --user=user --value=password\n$ chezmoi secret keyring get --service=service --user=user\n$ chezmoi secret keyring delete --service=service --user=user\n</code></pre> <p>Warning</p> <p>On FreeBSD, the <code>secret keyring</code> command is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and <code>secret keyring</code> command is not available.</p>"},{"location":"reference/commands/source-path/","title":"<code>source-path</code> [target...]","text":"<p>Print the path to each target's source state. If no targets are specified then print the source directory.</p> <p>Example</p> <pre><code>$ chezmoi source-path\n$ chezmoi source-path ~/.bashrc\n</code></pre>"},{"location":"reference/commands/state/","title":"<code>state</code>","text":"<p>Manipulate the persistent state.</p> <p>Hint</p> <p>To get a full list of subcommands run:</p> <pre><code>$ chezmoi state help\n</code></pre> <p>Example</p> <pre><code>$ chezmoi state data\n$ chezmoi state delete --bucket=bucket --key=key\n$ chezmoi state delete-bucket --bucket=bucket\n$ chezmoi state dump\n$ chezmoi state get --bucket=bucket --key=key\n$ chezmoi state get-bucket --bucket=bucket\n$ chezmoi state set --bucket=bucket --key=key --value=value\n$ chezmoi state reset\n</code></pre>"},{"location":"reference/commands/status/","title":"<code>status</code>","text":"<p>Print the status of the files and scripts managed by chezmoi in a format similar to <code>git status</code>.</p> <p>The first column of output indicates the difference between the last state written by chezmoi and the actual state. The second column indicates the difference between the actual state and the target state.</p>"},{"location":"reference/commands/status/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Only include entries of type types.</p> <p>Example</p> <pre><code>$ chezmoi status\n</code></pre>"},{"location":"reference/commands/target-path/","title":"<code>target-path</code> [source-path...]","text":"<p>Print the target path of each source path. If no source paths are specified then print the target directory.</p> <p>Example</p> <pre><code>$ chezmoi target-path\n$ chezmoi target-path ~/.local/share/chezmoi/dot_zshrc\n</code></pre>"},{"location":"reference/commands/unmanage/","title":"<code>unmanage</code> target...","text":"<p><code>unmanage</code> is an alias for <code>forget</code> for symmetry with <code>manage</code>.</p>"},{"location":"reference/commands/unmanaged/","title":"<code>unmanaged</code> [path...]","text":"<p>List all unmanaged files in paths. When no paths are supplied, list all unmanaged files in the destination directory.</p> <p>It is an error to supply paths that are not found on the filesystem.</p>"},{"location":"reference/commands/unmanaged/#-p-path-style-absoluterelative","title":"<code>-p</code>, <code>--path-style</code> <code>absolute</code>|<code>relative</code>","text":"<p>Print paths in the given style. Relative paths are relative to the destination directory. The default is <code>relative</code>.</p> <p>Example</p> <pre><code>$ chezmoi unmanaged\n$ chezmoi unmanaged ~/.config/chezmoi ~/.ssh\n</code></pre>"},{"location":"reference/commands/update/","title":"<code>update</code>","text":"<p>Pull changes from the source repo and apply any changes.</p> <p>If <code>update.command</code> is set then chezmoi will run <code>update.command</code> with <code>update.args</code> in the working tree. Otherwise, chezmoi will run <code>git pull --autostash --rebase [--recurse-submodules]</code> , using chezmoi's builtin git if <code>useBuiltinGit</code> is <code>true</code> or if <code>git.command</code> cannot be found in <code>$PATH</code>.</p>"},{"location":"reference/commands/update/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Only update entries of type types.</p>"},{"location":"reference/commands/update/#-recurse-submodules-bool","title":"<code>--recurse-submodules</code> bool","text":"<p>Update submodules recursively. This defaults to <code>true</code>.</p> <p>Example</p> <pre><code>$ chezmoi update\n</code></pre>"},{"location":"reference/commands/upgrade/","title":"<code>upgrade</code>","text":"<p>Upgrade chezmoi by downloading and installing the latest released version. This will call the GitHub API to determine if there is a new version of chezmoi available, and if so, download and attempt to install it in the same way as chezmoi was previously installed.</p> <p>If the any of the <code>$CHEZMOI_GITHUB_ACCESS_TOKEN</code>, <code>$CHEZMOI_GITHUB_TOKEN</code>, <code>$GITHUB_ACCESS_TOKEN</code>, or <code>$GITHUB_TOKEN</code> environment variables are set, then the first value found will be used to authenticate requests to the GitHub API, otherwise unauthenticated requests are used which are subject to stricter rate limiting. Unauthenticated requests should be sufficient for most cases.</p> <p>Warning</p> <p>If you installed chezmoi using a package manager, the <code>upgrade</code> command might have been removed by the package maintainer.</p>"},{"location":"reference/commands/verify/","title":"<code>verify</code> [target...]","text":"<p>Verify that all targets match their target state. chezmoi exits with code 0 (success) if all targets match their target state, or 1 (failure) otherwise. If no targets are specified then all targets are checked.</p>"},{"location":"reference/commands/verify/#-i-include-types","title":"<code>-i</code>, <code>--include</code> types","text":"<p>Only include entries of type types.</p> <p>Example</p> <pre><code>$ chezmoi verify\n$ chezmoi verify ~/.bashrc\n</code></pre>"},{"location":"reference/configuration-file/","title":"Configuration file","text":"<p>chezmoi searches for its configuration file according to the XDG Base Directory Specification and supports JSON, JSONC, TOML, and YAML. The basename of the config file is <code>chezmoi</code>. If multiple configuration file formats are present, chezmoi will report an error.</p> <p>In most installations, the config file will be read from <code>$HOME/.config/chezmoi/chezmoi.$FORMAT</code> (<code>%USERPROFILE%/.config/chezmoi/chezmoi.$FORMAT</code>), where <code>$FORMAT</code> is one of <code>json</code>, <code>jsonc</code>, <code>toml</code>, or <code>yaml</code>. The config file can be set explicitly with the <code>--config</code> command line option. By default, the format is detected based on the extension of the config file name, but can be overridden with the <code>--config-format</code> command line option.</p>"},{"location":"reference/configuration-file/#examples","title":"Examples","text":"JSONJSONCTOMLYAML ~/.config/chezmoi/chezmoi.json<pre><code>{\n    \"sourceDir\": \"/home/user/.dotfiles\",\n    \"git\": {\n        \"autoPush\": true\n    }\n}\n</code></pre> ~/.config/chezmoi/chezmoi.jsonc<pre><code>{\n    // The chezmoi source files are stored here\n    \"sourceDir\": \"/home/user/.dotfiles\",\n    \"git\": {\n        \"autoPush\": true\n    }\n}\n</code></pre> ~/.config/chezmoi/chezmoi.toml<pre><code>sourceDir = \"/home/user/.dotfiles\"\n[git]\n    autoPush = true\n</code></pre> ~/.config/chezmoi/chezmoi.yaml<pre><code>sourceDir: /home/user/.dotfiles\ngit:\n    autoPush: true\n</code></pre>"},{"location":"reference/configuration-file/editor/","title":"Editor","text":"<p>The editor used is the first non-empty string of the <code>edit.command</code> configuration variable, the <code>$VISUAL</code> environment variable, the <code>$EDITOR</code> environment variable. If none are set then chezmoi falls back to <code>notepad.exe</code> on Windows systems and <code>vi</code> on non-Windows systems.</p> <p>When the <code>edit.command</code> configuration variable is used, extra arguments can be passed to the editor with the <code>edit.args</code> configuration variable.</p> <p>chezmoi will emit a warning if the editor returns in less than <code>edit.minDuration</code> (default <code>1s</code>). To disable this warning, set <code>edit.minDuration</code> to <code>0</code>.</p>"},{"location":"reference/configuration-file/hooks/","title":"Hooks","text":"<p>Hook commands are executed before and after events. Unlike scripts, hooks are always run, even if <code>--dry-run</code> is specified. Hooks should be fast and idempotent.</p> <p>Warning</p> <p>Hooks are an experimental feature that might change in the future. If you use them then please report how you are using them.</p> <p>The following events are defined:</p> Event Trigger command, e.g. <code>add</code> Running <code>chezmoi command</code>, e.g. <code>chezmoi add</code> <code>read-source-state</code> Reading the source state <p>Each event can have a <code>.pre</code> and/or a <code>.post</code> command. The event.<code>pre</code> command is executed before event occurs and the event<code>.post</code> command is executed after event has occurred.</p> <p>A command contains a <code>command</code> and an optional array of strings <code>args</code>.</p> <p>Example</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[hooks.read-source-state.pre]\ncommand = \"echo\"\nargs = [\"pre-read-source-state-hook\"]\n\n[hooks.apply.post]\ncommand = \"echo\"\nargs = [\"post-apply-hook\"]\n</code></pre> <p>When running hooks, the <code>CHEZMOI=1</code> and <code>CHEZMOI_*</code> environment variables will be set. <code>CHEZMOI_COMMAND</code> is set to the chezmoi command being run, <code>CHEZMOI_COMMAND_DIR</code> is set to the directory where chezmoi was run from, and <code>CHEZMOI_ARGS</code> contains the full arguments to chezmoi, starting with the path to chezmoi's executable.</p>"},{"location":"reference/configuration-file/pinentry/","title":"pinentry","text":"<p>By default, chezmoi will request passwords from the terminal.</p> <p>If the <code>--no-tty</code> option is passed, then chezmoi will instead read passwords from the standard input.</p> <p>Otherwise, if the configuration variable <code>pinentry.command</code> is set then chezmoi will instead used the given command to read passwords, assuming that it follows the Assuan protocol like GnuPG's pinentry. The configuration variable <code>pinentry.args</code> specifies extra arguments to be passed to <code>pinentry.command</code> and the configuration variable <code>pinentry.options</code> specifies extra options to be set. The default <code>pinentry.options</code> is <code>[\"allow-external-password-cache\"]</code>.</p> <p>Example</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[pinentry]\n    command = \"pinentry\"\n</code></pre>"},{"location":"reference/configuration-file/textconv/","title":"textconv","text":"<p>A section called <code>textconv</code> in the configuration file controls how file contents are modified before being passed to diff.</p> <p>The <code>textconv</code> must contain an array of objects where each object has the following properties:</p> Name Type Description <code>pattern</code> string Target path pattern to match <code>command</code> string Command to transform contents <code>args</code> []string Extra arguments to command <p>Files whose target path matches <code>pattern</code> are transformed by passing them to the standard input of <code>command</code> with <code>args</code>, and new contents are read from the command's standard output.</p> <p>If a target path does not match any patterns then the file contents are passed unchanged to diff. If a target path matches multiple patterns then element with the longest <code>pattern</code> is used.</p>"},{"location":"reference/configuration-file/umask/","title":"umask","text":"<p>By default, chezmoi uses your current umask as set by your operating system and shell. chezmoi only stores crude permissions in its source state, namely in the <code>executable</code>  and <code>private</code> attributes, corresponding to the umasks of <code>0o111</code> and <code>0o077</code> respectively.</p> <p>For machine-specific control of umask, set the <code>umask</code> configuration variable in chezmoi's configuration file.</p> <p>Example</p> ~/.config/chezmoi/chezmoi.toml<pre><code>umask = 0o22\n</code></pre>"},{"location":"reference/configuration-file/variables/","title":"Variables","text":"<p>The following configuration variables are available:</p> Section Variable Type Default value Description Top level <code>cacheDir</code> string <code>$XDG_CACHE_HOME/chezmoi</code> <code>$HOME/.cache/chezmoi</code> <code>%USERPROFILE%/.cache/chezmoi</code> Cache directory <code>color</code> string <code>auto</code> Colorize output <code>data</code> object none Template data <code>destDir</code> string <code>$HOME</code> <code>%USERPROFILE%</code> Destination directory <code>encryption</code> string none Encryption type, either <code>age</code> or <code>gpg</code> <code>env</code> object none Extra environment variables for scripts and commands <code>format</code> string <code>json</code> Format for data output, either <code>json</code> or <code>yaml</code> <code>mode</code> string <code>file</code> Mode in target dir, either <code>file</code> or <code>symlink</code> <code>pager</code> string <code>$PAGER</code> Default pager CLI command <code>persistentState</code> string <code>$XDG_CONFIG_HOME/chezmoi/chezmoi.boltdb</code> <code>$HOME/.config/chezmoi/chezmoi.boltdb</code> <code>%USERPROFILE%/.config/chezmoi/chezmoi.boltdb</code> Location of the persistent state file <code>progress</code> bool <code>false</code> Display progress bars <code>scriptEnv</code> object none Extra environment variables for scripts and commands <code>scriptTempDir</code> string none Temporary directory for scripts <code>sourceDir</code> string <code>$XDG_SHARE_HOME/chezmoi</code> <code>$HOME/.local/share/chezmoi</code> <code>%USERPROFILE%/.local/share/chezmoi</code> Source directory <code>umask</code> int from system Umask <code>useBuiltinAge</code> string <code>auto</code> Use builtin age if <code>age</code> command is not found in <code>$PATH</code> <code>useBuiltinGit</code> string <code>auto</code> Use builtin git if <code>git</code> command is not found in <code>$PATH</code> <code>verbose</code> bool <code>false</code> Make output more verbose <code>workingTree</code> string source directory git working tree directory <code>add</code> <code>templateSymlinks</code> bool <code>false</code> Template symlinks to source and home dirs <code>age</code> <code>args</code> []string none Extra args to age CLI command <code>command</code> string <code>age</code> age CLI command <code>identities</code> []string none age identity files <code>identity</code> string none age identity file <code>passphrase</code> bool <code>false</code> Use age passphrase instead of identity <code>recipient</code> string none age recipient <code>recipientFile</code> string none age recipient file <code>recipientFiles</code> []string none age recipient files <code>recipients</code> []string none age recipients <code>suffix</code> string <code>.age</code> Suffix appended to age-encrypted files <code>symmetric</code> bool <code>false</code> Use age symmetric encryption <code>awsSecretsManager</code> <code>profile</code> string none AWS shared profile name <code>region</code> string none AWS region <code>azureKeyVault</code> <code>defaultVault</code> string none Default Azure Key Vault name <code>bitwarden</code> <code>command</code> string <code>bw</code> Bitwarden CLI command <code>bitwardenSecrets</code> <code>command</code> string <code>bws</code> Bitwarden Secrets CLI command <code>cd</code> <code>args</code> []string none Extra args to shell in <code>cd</code> command <code>command</code> string none Shell to run in <code>cd</code> command <code>completion</code> <code>custom</code> bool <code>false</code> Enable custom shell completions <code>dashlane</code> <code>args</code> []string none Extra args to Dashlane CLI command <code>command</code> string <code>dcli</code> Dashlane CLI command <code>diff</code> <code>args</code> []string see <code>diff</code> below Extra args to external diff command <code>command</code> string none External diff command <code>exclude</code> []string none Entry types to exclude from diffs <code>pager</code> string none Diff-specific pager <code>reverse</code> bool <code>false</code> Reverse order of arguments to diff <code>scriptContents</code> bool <code>true</code> Show script contents <code>doppler</code> <code>args</code> []string none Extra args to Doppler CLI command <code>command</code> string <code>doppler</code> Doppler CLI command <code>config</code> string none Default config (aka environment) if none is specified <code>project</code> string none Default project name if none is specified <code>edit</code> <code>apply</code> bool <code>false</code> Apply changes on exit <code>args</code> []string none Extra args to edit command <code>command</code> string <code>$EDITOR</code> / <code>$VISUAL</code> Edit command <code>hardlink</code> bool <code>true</code> Invoke editor with a hardlink to the source file <code>minDuration</code> duration <code>1s</code> Minimum duration for edit command <code>watch</code> bool <code>false</code> Automatically apply changes when files are saved <code>ejson</code> <code>key</code> string none The private key to use for decryption, will supersede using the keyDir if set. <code>keyDir</code> string none Path to directory containing private keys. Defaults to /opt/ejson/keys. Setting the EJSON_KEYDIR environment will also set this value, with lower precedence. <code>git</code> <code>autoAdd</code> bool <code>false</code> Add changes to the source state after any change <code>autoCommit</code> bool <code>false</code> Commit changes to the source state after any change <code>autoPush</code> bool <code>false</code> Push changes to the source state after any change <code>command</code> string <code>git</code> git CLI command <code>commitMessageTemplate</code> string none Commit message template <code>commitMessageTemplateFile</code> string none Commit message template file (relative to source directory) <code>gitHub</code> <code>refreshPeriod</code> duration <code>1m</code> Minimum duration between identical GitHub API requests <code>gopass</code> <code>command</code> string <code>gopass</code> gopass CLI command <code>gpg</code> <code>args</code> []string none Extra args to GPG CLI command <code>command</code> string <code>gpg</code> GPG CLI command <code>recipient</code> string none GPG recipient <code>recipients</code> []string none GPG recipients <code>suffix</code> string <code>.asc</code> Suffix appended to GPG-encrypted files <code>symmetric</code> bool <code>false</code> Use symmetric GPG encryption <code>hcpVaultSecrets</code> <code>applicationName</code> string none Default application name if none is specified <code>args</code> []string none Extra args to HCP Vault Secrets CLI command <code>command</code> string <code>vlt</code> HCP Vault Secrets CLI command <code>organizationId</code> string none Default organization ID if none is specified <code>projectId</code> string none Default project ID if none is specified <code>hooks</code> command<code>.post.args</code> []string none Extra arguments to command to run after command command<code>.post.command</code> []string none Command to run after command command<code>.pre.args</code> []string none Extra arguments to command to run before command command<code>.pre.command</code> []string none Command to run before command <code>interpreters</code> extension.<code>args</code> []string none See section on \"Scripts on Windows\" extension.<code>command</code> string special See section on \"Scripts on Windows\" <code>keepassxc</code> <code>args</code> []string none Extra args to KeePassXC CLI command <code>command</code> string <code>keepassxc-cli</code> KeePassXC CLI command <code>database</code> string none KeePassXC database <code>prompt</code> bool <code>true</code> Prompt for password <code>keeper</code> <code>args</code> []string none Extra args to Keeper CLI command <code>command</code> string <code>keeper</code> Keeper CLI command <code>lastpass</code> <code>command</code> string <code>lpass</code> LastPass CLI command <code>merge</code> <code>args</code> []string see <code>merge</code> below Extra args to three-way merge CLI command <code>command</code> string none Three-way merge CLI command <code>onepassword</code> <code>cache</code> bool <code>true</code> Enable optional caching provided by <code>op</code> <code>command</code> string <code>op</code> 1Password CLI command <code>prompt</code> bool <code>true</code> Prompt for sign-in when no valid session is available <code>pass</code> <code>command</code> string <code>pass</code> Pass CLI command <code>passhole</code> <code>args</code> []string none Extra args to Passhole CLI command <code>command</code> string <code>ph</code> Passhole CLI command <code>prompt</code> bool <code>true</code> Prompt for password <code>pinentry</code> <code>args</code> []string none Extra args to pinentry CLI command <code>command</code> string none pinentry CLI command <code>options</code> []string see <code>pinentry</code> below Extra options for pinentry <code>rbw</code> <code>command</code> string <code>rbw</code> Unofficial Bitwarden CLI command <code>secret</code> <code>args</code> []string none Extra args to secret CLI command <code>command</code> string none Generic secret CLI command <code>status</code> <code>exclude</code> []string none Entry types to exclude from status <code>pathStyle</code> string <code>relative</code> How to present the path to files in status output <code>template</code> <code>options</code> []string <code>[\"missingkey=error\"]</code> Template options <code>textconv</code> []object none See section on \"textconv\" <code>update</code> <code>args</code> []string none Extra args to update command <code>command</code> string none Update command <code>recurseSubmodules</code> bool <code>true</code> Update submodules recursively <code>vault</code> <code>command</code> string <code>vault</code> Vault CLI command <code>verify</code> <code>exclude</code> []string none Entry types to exclude from verify <code>warnings</code> object none See section on \"Warnings\""},{"location":"reference/configuration-file/warnings/","title":"Warnings","text":"<p>By default, chezmoi will warn you when it encounters potential problems. Some of these warnings can be suppressed by setting values in configuration file.</p> Variable Type Default Description <code>configFileTemplateHasChanged</code> bool <code>true</code> Warn when the config file template has changed <p>Example</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[warnings]\n    configFileTemplateHasChanged = false\n</code></pre>"},{"location":"reference/special-files-and-directories/","title":"Special files and directories","text":"<p>All files and directories in the source state whose name begins with <code>.</code> are ignored by default, unless they are one of the special files listed here. <code>.chezmoidata.$FORMAT</code> and <code>.chezmoitemplates</code> are read before all other files so that they can be used in templates.</p>"},{"location":"reference/special-files-and-directories/chezmoi-format-tmpl/","title":"<code>.chezmoi.$FORMAT.tmpl</code>","text":"<p>If a file called <code>.chezmoi.$FORMAT.tmpl</code> exists then <code>chezmoi init</code> will use it to create an initial config file. <code>$FORMAT</code> must be one of the supported config file formats, e.g. <code>json</code>, <code>jsonc</code>, <code>toml</code>, or <code>yaml</code>. Templates defined in <code>.chezmoitemplates</code> are not available because the template is executed before the source state is read.</p> <p>Example</p> ~/.local/share/chezmoi/.chezmoi.yaml.tmpl<pre><code>{{ $email := promptString \"email\" -}}\n\ndata:\n    email: {{ $email | quote }}\n</code></pre>"},{"location":"reference/special-files-and-directories/chezmoidata-format/","title":"<code>.chezmoidata</code> and <code>.chezmoidata.$FORMAT</code>","text":"<p>If a file called <code>.chezmoidata.$FORMAT</code> exists in the source state, it is interpreted as template data in the given format.</p> <p>If a directory called <code>.chezmoidata</code> exists in the source state, then all files in it are interpreted as template data in the format given by their extension.</p> <p>Example</p> <p>If <code>.chezmoidata.toml</code> contains the following:</p> ~/.local/share/chezmoi/.chezmoidata.toml<pre><code>fontSize = 12\n</code></pre> <p>Then the <code>.fontSize</code> variable is available in templates, e.g.</p> <pre><code>FONT_SIZE={{ .fontSize }}\n</code></pre> <p>Will result in:</p> <pre><code>FONT_SIZE=12\n</code></pre>"},{"location":"reference/special-files-and-directories/chezmoiexternal-format/","title":"<code>.chezmoiexternal.$FORMAT{,.tmpl}</code>","text":"<p>If a file called <code>.chezmoiexternal.$FORMAT</code> (with an optional <code>.tmpl</code> extension) exists in the source state (either <code>~/.local/share/chezmoi</code> or directory defined inside <code>.chezmoiroot</code>), it is interpreted as a list of external files and archives to be included as if they were in the source state.</p> <p><code>$FORMAT</code> must be one of chezmoi's supported configuration file formats, e.g. <code>json</code>, <code>jsonc</code>, <code>toml</code>, or <code>yaml</code>.</p> <p><code>.chezmoiexternal.$FORMAT</code> is interpreted as a template. This allows different externals to be included on different machines.</p> <p>Entries are indexed by target name relative to the directory of the <code>.chezmoiexternal.$FORMAT</code> file, and must have a <code>type</code> and a <code>url</code> field. <code>type</code> can be either <code>file</code>, <code>archive</code>, <code>archive-file</code>, or <code>git-repo</code>. If the entry's parent directories do not already exist in the source state then chezmoi will create them as regular directories.</p> <p>Entries may have the following fields:</p> Variable Type Default value Description <code>type</code> string none External type (<code>file</code>, <code>archive</code>, <code>archive-file</code>, or <code>git-repo</code>) <code>encrypted</code> bool <code>false</code> Whether the external is encrypted <code>exact</code> bool <code>false</code> Add <code>exact_</code> attribute to directories in archive <code>exclude</code> []string none Patterns to exclude from archive <code>executable</code> bool <code>false</code> Add <code>executable_</code> attribute to file <code>format</code> string autodetect Format of archive <code>path</code> string none Path to file in archive <code>include</code> []string none Patterns to include from archive <code>refreshPeriod</code> duration <code>0</code> Refresh period <code>stripComponents</code> int <code>0</code> Number of leading directory components to strip from archives <code>url</code> string none URL <code>checksum.sha256</code> string none Expected SHA256 checksum of data <code>checksum.sha384</code> string none Expected SHA384 checksum of data <code>checksum.sha512</code> string none Expected SHA512 checksum of data <code>checksum.size</code> int none Expected size of data <code>clone.args</code> []string none Extra args to <code>git clone</code> <code>filter.command</code> string none Command to filter contents <code>filter.args</code> []string none Extra args to command to filter contents <code>pull.args</code> []string none Extra args to <code>git pull</code> <code>archive.extractAppleDouble</code> bool <code>false</code> If <code>true</code>, AppleDouble files are extracted <p>If any of the optional <code>checksum.sha256</code>, <code>checksum.sha384</code>, or <code>checksum.sha512</code> fields are set, chezmoi will verify that the downloaded data has the given checksum.</p> <p>The optional boolean <code>encrypted</code> field specifies whether the file or archive is encrypted.</p> <p>If optional string <code>filter.command</code> and array of strings <code>filter.args</code> are specified, the file or archive is filtered by piping it into the command's standard input and reading the command's standard output.</p> <p>If <code>type</code> is <code>file</code> then the target is a file with the contents of <code>url</code>. The optional boolean field <code>executable</code> may be set, in which case the target file will be executable.</p> <p>If <code>type</code> is <code>archive</code> then the target is a directory with the contents of the archive at <code>url</code>. The optional boolean field <code>exact</code> may be set, in which case the directory and all subdirectories will be treated as exact directories, i.e. <code>chezmoi apply</code> will remove entries not present in the archive. The optional integer field <code>stripComponents</code> will remove leading path components from the members of archive. The optional string field <code>format</code> sets the archive format. The supported archive formats are <code>tar</code>, <code>tar.gz</code>, <code>tgz</code>, <code>tar.bz2</code>, <code>tbz2</code>, <code>xz</code>, <code>.tar.zst</code>, and <code>zip</code>. If <code>format</code> is not specified then chezmoi will guess the format using firstly the path of the URL and secondly its contents.</p> <p>When <code>type</code> is <code>archive</code> or <code>archive-file</code>, the optional setting <code>archive.extractAppleDouble</code> controls whether AppleDouble files are extracted. It is <code>false</code> by default, so AppleDouble files will not be extracted.</p> <p>The optional <code>include</code> and <code>exclude</code> fields are lists of patterns specify which archive members to include or exclude respectively. Patterns match paths in the archive, not the target state. chezmoi uses the following algorithm to determine whether an archive member is included:</p> <ol> <li>If the archive member name matches any <code>exclude</code> pattern, then the archive    member is excluded. In addition, if the archive member is a directory, then    all contained files and sub-directories will be excluded, too (recursively).</li> <li>Otherwise, if the archive member name matches any <code>include</code> pattern, then    the archive member is included.</li> <li>Otherwise, if only <code>include</code> patterns were specified then the archive member    is excluded.</li> <li>Otherwise, if only <code>exclude</code> patterns were specified then the archive member    is included.</li> <li>Otherwise, the archive member is included.o</li> </ol> <p>Excluded archive members do not generate source state entries, and, if they are directories, all of their children are also excluded.</p> <p>If <code>type</code> is <code>archive-file</code> then the target is a file or symlink with the contents of the entry <code>path</code> in the archive at <code>url</code>. The optional integer field <code>stripComponents</code> will remove leading path components from the members of the archive before comparing them with <code>path</code>. The behavior of <code>format</code> is the same as for <code>archive</code>. If <code>executable</code> is <code>true</code> then chezmoi will set the executable bits on the target file, even if they are not set in the archive.</p> <p>If <code>type</code> is <code>git-repo</code> then chezmoi will run <code>git clone $URL $TARGET_NAME</code> with the optional <code>clone.args</code> if the target does not exist. If the target exists, then chezmoi will run <code>git pull</code> with the optional <code>pull.args</code> to update the target.</p> <p>For <code>file</code> and <code>archive</code> externals, chezmoi will cache downloaded URLs. The optional duration <code>refreshPeriod</code> field specifies how often chezmoi will re-download the URL. The default is zero meaning that chezmoi will never re-download unless forced. To force chezmoi to re-download URLs, pass the <code>-R</code>/<code>--refresh-externals</code> flag. Suitable refresh periods include one day (<code>24h</code>), one week (<code>168h</code>), or four weeks (<code>672h</code>).</p> <p>Example</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>[\".vim/autoload/plug.vim\"]\n    type = \"file\"\n    url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\"\n    refreshPeriod = \"168h\"\n[\".oh-my-zsh\"]\n    type = \"archive\"\n    url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\"\n    exact = true\n    stripComponents = 1\n    refreshPeriod = \"168h\"\n[\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"]\n    type = \"archive\"\n    url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\"\n    exact = true\n    stripComponents = 1\n    refreshPeriod = \"168h\"\n[\".oh-my-zsh/custom/themes/powerlevel10k\"]\n    type = \"archive\"\n    url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\"\n    exact = true\n    stripComponents = 1\n[\".local/bin/age\"]\n    type = \"archive-file\"\n    url = \"https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-{{ .chezmoi.os }}-{{ .chezmoi.arch }}.tar.gz\"\n    path = \"age/age\"\n[\"www/adminer/plugins\"]\n    type = \"archive\"\n    url = \"https://api.github.com/repos/vrana/adminer/tarball\"\n    refreshPeriod = \"744h\"\n    stripComponents = 2\n    include = [\"*/plugins/**\"]\n</code></pre> <p>Some more examples can be found in the user guide.</p>"},{"location":"reference/special-files-and-directories/chezmoiexternals/","title":"<code>.chezmoiexternals</code>","text":"<p>If a directory called <code>.chezmoiexternals</code> exists, then all files in this directory are treated as <code>.chezmoiexternal.&lt;format&gt;</code> files.</p>"},{"location":"reference/special-files-and-directories/chezmoiignore/","title":"<code>.chezmoiignore{,.tmpl}</code>","text":"<p>If a file called <code>.chezmoiignore</code> (with an optional <code>.tmpl</code> extension) exists in the source state then it is interpreted as a set of patterns to ignore. Patterns are matched using <code>doublestar.Match</code> and match against the target path, not the source path.</p> <p>Patterns can be excluded by prefixing them with a <code>!</code> character. All excludes take priority over all includes.</p> <p>Comments are introduced with the <code>#</code> character and run until the end of the line.</p> <p><code>.chezmoiignore</code> is interpreted as a template, whether or not it has a <code>.tmpl</code> extension. This allows different files to be ignored on different machines.</p> <p><code>.chezmoiignore</code> files in subdirectories apply only to that subdirectory.</p> <p>Example</p> ~/.local/share/chezmoi/.chezmoiignore<pre><code>README.md\n\n*.txt   # ignore *.txt in the target directory\n*/*.txt # ignore *.txt in subdirectories of the target directory\n        # but not in subdirectories of subdirectories;\n        # so a/b/c.txt would *not* be ignored\n\nbackups/   # ignore the backups folder, but not its contents\nbackups/** # ignore the contents of backups folder but not the folder itself\n\n{{- if ne .email \"firstname.lastname@company.com\" }}\n# Ignore .company-directory unless configured with a company email\n.company-directory # note that the pattern is not dot_company-directory\n{{- end }}\n\n{{- if ne .email \"me@home.org\" }}\n.personal-file\n{{- end }}\n</code></pre>"},{"location":"reference/special-files-and-directories/chezmoiremove/","title":"<code>.chezmoiremove{,.tmpl}</code>","text":"<p>If a file called <code>.chezmoiremove</code> (with an optional <code>.tmpl</code> extension) exists in the source state then it is interpreted as a list of targets to remove. <code>.chezmoiremove</code> is interpreted as a template, whether or not it has a <code>.tmpl</code> extension.</p>"},{"location":"reference/special-files-and-directories/chezmoiroot/","title":"<code>.chezmoiroot</code>","text":"<p>If a file called <code>.chezmoiroot</code> exists in the root of the source directory then the source state is read from the directory specified in <code>.chezmoiroot</code> interpreted as a relative path to the source directory. <code>.chezmoiroot</code> is read before all other files in the source directory.</p>"},{"location":"reference/special-files-and-directories/chezmoiscripts/","title":"<code>.chezmoiscripts</code>","text":"<p>If a directory called <code>.chezmoiscripts</code> exists in the root of the source directory then any scripts in it are executed as normal scripts without creating a corresponding directory in the target state.</p>"},{"location":"reference/special-files-and-directories/chezmoitemplates/","title":"<code>.chezmoitemplates</code>","text":"<p>If a directory called <code>.chezmoitemplates</code> exists, then all files in this directory are available as templates with a name equal to the relative path to the <code>.chezmoitemplates</code> directory.</p> <p>The <code>template</code> action can be used to include these templates in another template. The value of <code>.</code> must be set explicitly if needed, otherwise the template will be executed with <code>nil</code> data.</p> <p>Example</p> <p>Given:</p> ~/.local/share/chezmoi/.chezmoitemplates/foo<pre><code>{{ if true }}bar{{ end }}\n</code></pre> ~/.local/share/chezmoi/dot_file.tmpl<pre><code>{{ template \"foo\" . }}\n</code></pre> <p>The target state of <code>.file</code> will be <code>bar</code>.</p>"},{"location":"reference/special-files-and-directories/chezmoiversion/","title":"<code>.chezmoiversion</code>","text":"<p>If a file called <code>.chezmoiversion</code> exists, then its contents are interpreted as a semantic version defining the minimum version of chezmoi required to interpret the source state correctly. chezmoi will refuse to interpret the source state if the current version is too old.</p> <p>Example</p> ~/.local/share/chezmoi/.chezmoiversion<pre><code>1.5.0\n</code></pre>"},{"location":"reference/templates/","title":"Templates","text":"<p>chezmoi executes templates using <code>text/template</code>. The result is treated differently depending on whether the target is a file or a symlink.</p> <p>If target is a file, then:</p> <ul> <li> <p>If the result is an empty string, then the file is removed.</p> </li> <li> <p>Otherwise, the target file contents are result.</p> </li> </ul> <p>If the target is a symlink, then:</p> <ul> <li> <p>Leading and trailing whitespace are stripped from the result.</p> </li> <li> <p>If the result is an empty string, then the symlink is removed.</p> </li> <li> <p>Otherwise, the target symlink target is the result.</p> </li> </ul> <p>chezmoi executes templates using <code>text/template</code>'s <code>missingkey=error</code> option, which means that misspelled or missing keys will raise an error. This can be overridden by setting a list of options in the configuration file.</p> <p>Hint</p> <p>For a full list of template options, see <code>Template.Option</code>.</p> <p>Example</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[template]\n    options = [\"missingkey=zero\"]\n</code></pre>"},{"location":"reference/templates/directives/","title":"Directives","text":"<p>File-specific template options can be set using template directives in the template of the form:</p> <pre><code>chezmoi:template:$KEY=$VALUE\n</code></pre> <p>which sets the template option <code>$KEY</code> to <code>$VALUE</code>. <code>$VALUE</code> must be quoted if it contains spaces or double quotes. Multiple key/value pairs may be specified on a single line.</p> <p>Lines containing template directives are removed to avoid parse errors from any delimiters. If multiple directives are present in a file, later directives override earlier ones.</p>"},{"location":"reference/templates/directives/#delimiters","title":"Delimiters","text":"<p>By default, chezmoi uses the standard <code>text/template</code> delimiters <code>{{</code> and <code>}}</code>. If a template contains the string:</p> <pre><code>chezmoi:template:left-delimiter=$LEFT right-delimiter=$RIGHT\n</code></pre> <p>Then the delimiters <code>$LEFT</code> and <code>$RIGHT</code> are used instead. Either or both of <code>left-delimiter=$LEFT</code> and <code>right-delimiter=$RIGHT</code> may be omitted. If either <code>$LEFT</code> or <code>$RIGHT</code> is empty then the default delimiter (<code>{{</code> and <code>}}</code> respectively) is set instead.</p> <p>The delimiters are specific to the file in which they appear and are not inherited by templates called from the file.</p> <p>Example</p> <pre><code>#!/bin/sh\n# chezmoi:template:left-delimiter=\"# [[\" right-delimiter=]]\n\n# [[ \"true\" ]]\n</code></pre>"},{"location":"reference/templates/directives/#line-endings","title":"Line endings","text":"<p>Many of the template functions available in chezmoi primarily use UNIX-style line endings (<code>lf</code>/<code>\\n</code>), which may result in unexpected output when running <code>chezmoi diff</code> on a <code>modify_</code> template. These line endings can be overridden with a template directive:</p> <pre><code>chezmoi:template:line-endings=$VALUE\n</code></pre> <p><code>$VALUE</code> can be an arbitrary string or one of:</p> Value Effect <code>crlf</code> Use Windows line endings (<code>\\r\\n</code>) <code>lf</code> Use UNIX-style line endings (<code>\\n</code>) <code>native</code> Use platform-native line endings (<code>crlf</code> on Windows, <code>lf</code> elsewhere)"},{"location":"reference/templates/directives/#missing-keys","title":"Missing keys","text":"<p>By default, chezmoi will return an error if a template indexes a map with a key that is not present in the map. This behavior can be changed globally with the <code>template.options</code> configuration variable or with a template directive:</p> <pre><code>chezmoi:template:missing-key=$VALUE\n</code></pre> <p><code>$VALUE</code> can be one of:</p> Value Effect <code>error</code> Return an error on any missing key (default) <code>invalid</code> Ignore missing keys. If printed, the result of the index operation is the string <code>&lt;no value&gt;</code> <code>zero</code> Ignore missing keys. If printed, the result of the index operation is the zero value"},{"location":"reference/templates/variables/","title":"Variables","text":"<p>chezmoi provides the following automatically-populated variables:</p> Variable Type Value <code>.chezmoi.arch</code> string Architecture, e.g. <code>amd64</code>, <code>arm</code>, etc. as returned by runtime.GOARCH <code>.chezmoi.args</code> []string The arguments passed to the <code>chezmoi</code> command, starting with the program command <code>.chezmoi.cacheDir</code> string The cache directory <code>.chezmoi.config</code> object The configuration, as read from the config file <code>.chezmoi.configFile</code> string The path to the configuration file used by chezmoi <code>.chezmoi.executable</code> string The path to the <code>chezmoi</code> executable, if available <code>.chezmoi.fqdnHostname</code> string The fully-qualified domain name hostname of the machine chezmoi is running on <code>.chezmoi.gid</code> string The primary group ID <code>.chezmoi.group</code> string The group of the user running chezmoi <code>.chezmoi.homeDir</code> string The home directory of the user running chezmoi <code>.chezmoi.hostname</code> string The hostname of the machine chezmoi is running on, up to the first <code>.</code> <code>.chezmoi.kernel</code> string Contains information from <code>/proc/sys/kernel</code>. Linux only, useful for detecting specific kernels (e.g. Microsoft's WSL kernel) <code>.chezmoi.os</code> string Operating system, e.g. <code>darwin</code>, <code>linux</code>, etc. as returned by runtime.GOOS <code>.chezmoi.osRelease</code> string The information from <code>/etc/os-release</code>, Linux only, run <code>chezmoi data</code> to see its output <code>.chezmoi.pathListSeparator</code> string The path list separator, typically <code>;</code> on Windows and <code>:</code> on other systems. Used to separate paths in environment variables. ie <code>/bin:/sbin:/usr/bin</code> <code>.chezmoi.pathSeparator</code> string The path separator, typically <code>\\</code> on windows and <code>/</code> on unix. Used to separate files and directories in a path. ie <code>c:\\see\\dos\\run</code> <code>.chezmoi.sourceDir</code> string The source directory <code>.chezmoi.sourceFile</code> string The path of the template relative to the source directory <code>.chezmoi.targetFile</code> string The absolute path of the target file for the template <code>.chezmoi.uid</code> string The user ID <code>.chezmoi.username</code> string The username of the user running chezmoi <code>.chezmoi.version.builtBy</code> string The program that built the <code>chezmoi</code> executable, if set <code>.chezmoi.version.commit</code> string The git commit at which the <code>chezmoi</code> executable was built, if set <code>.chezmoi.version.date</code> string The timestamp at which the <code>chezmoi</code> executable was built, if set <code>.chezmoi.version.version</code> string The version of chezmoi <code>.chezmoi.windowsVersion</code> object Windows version information, if running on Windows <code>.chezmoi.workingTree</code> string The working tree of the source directory <p><code>.chezmoi.windowsVersion</code> contains the following keys populated from the registry key <code>Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion</code>.</p> Key Type <code>currentBuild</code> string <code>currentMajorVersionNumber</code> integer <code>currentMinorVersionNumber</code> integer <code>currentVersion</code> string <code>displayVersion</code> string <code>editionID</code> string <code>productName</code> string <p>Additional variables can be defined in the config file in the <code>data</code> section. Variable names must consist of a letter and be followed by zero or more letters and/or digits.</p>"},{"location":"reference/templates/1password-functions/","title":"1Password functions","text":"<p>The <code>onepassword*</code> template functions return structured data from 1Password using the 1Password CLI (<code>op</code>).</p> <p>Warning</p> <p>When using the 1Password CLI with biometric authentication, account shorthand names are not available. In order to assist with this, chezmoi supports multiple derived values from <code>op account list</code> that can be changed into the appropriate 1Password account-uuid.</p> <p>Warning</p> <p>Support for 1Password CLI v1 will be removed with the next major release of chezmoi.</p>"},{"location":"reference/templates/1password-functions/#example","title":"Example","text":"<p>If <code>op account list --format=json</code> returns the following structure:</p> <pre><code>[\n  {\n    \"url\": \"account1.1password.ca\",\n    \"email\": \"my@email.com\",\n    \"user_uuid\": \"some-user-uuid\",\n    \"account_uuid\": \"some-account-uuid\"\n  }\n]\n</code></pre> <p>The following values can be used in the <code>account</code> parameter and the value <code>some-account-uuid</code> will be passed as the <code>--account</code> parameter to <code>op</code>.</p> <ul> <li><code>some-account-uuid</code></li> <li><code>some-user-uuid</code></li> <li><code>account1.1password.ca</code></li> <li><code>account1</code></li> <li><code>my@email.com</code></li> <li><code>my</code></li> <li><code>my@account1.1password.ca</code></li> <li><code>my@account1</code></li> </ul> <p>If there are multiple accounts and any value exists more than once, that value will be removed from the account mapping. That is, if you are signed into <code>my@email.com</code> and <code>your@email.com</code> for <code>account1.1password.ca</code>, then <code>account1.1password.ca</code> will not be a valid lookup value, but <code>my@account1</code>, <code>my@account1.1password.ca</code>, <code>your@account1</code>, and <code>your@account1.1password.ca</code> would all be valid lookups.</p>"},{"location":"reference/templates/1password-functions/onepassword/","title":"<code>onepassword</code> uuid [vault-uuid [account-name]]","text":"<p><code>onepassword</code> returns structured data from 1Password using the 1Password CLI (<code>op</code>). uuid is passed to <code>op item get $UUID --format json</code> and the output from <code>op</code> is parsed as JSON. The output from <code>op</code> is cached so calling <code>onepassword</code> multiple times with the same uuid will only invoke <code>op</code> once. If the optional vault-uuid is supplied, it will be passed along to the <code>op item get</code> call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the <code>op item get</code> call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts).</p> <p>If there is no valid session in the environment, by default you will be interactively prompted to sign in.</p> <p>The 1password CLI command can be set with the <code>onePassword.command</code> config variable, and extra arguments can be specified with the <code>onePassword.args</code> config variable.</p> <p>Example</p> <pre><code>{{ (onepassword \"$UUID\").fields[1].value }}\n{{ (onepassword \"$UUID\" \"$VAULT_UUID\").fields[1].value }}\n{{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").fields[1].value }}\n{{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").fields[1].value }}\n</code></pre> <p>A more robust way to get a password field would be something like:</p> <pre><code>{{ range (onepassword \"$UUID\").fields -}}\n{{   if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}}\n{{     .value -}}\n{{   end -}}\n{{ end }}\n</code></pre> <p>Info</p> <p>For 1Password CLI 1.x.</p> <pre><code>{{ (onepassword \"$UUID\").details.password }}\n{{ (onepassword \"$UUID\" \"$VAULT_UUID\").details.password }}\n{{ (onepassword \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").details.password }}\n{{ (onepassword \"$UUID\" \"\" \"$ACCOUNT_NAME\").details.password }}\n</code></pre>"},{"location":"reference/templates/1password-functions/onepasswordDetailsFields/","title":"<code>onepasswordDetailsFields</code> uuid [vault-uuid [account-name]]","text":"<p><code>onepasswordDetailsFields</code> returns structured data from 1Password using the 1Password CLI (<code>op</code>). uuid is passed to <code>op get item $UUID</code>, the output from <code>op</code> is parsed as JSON, and elements of <code>details.fields</code> are returned as a map indexed by each field's <code>id</code> (if set) or <code>label</code> (if set and <code>id</code> is not present).</p> <p>If there is no valid session in the environment, by default you will be interactively prompted to sign in.</p> <p>The output from <code>op</code> is cached so calling <code>onepasswordDetailsFields</code> multiple times with the same uuid will only invoke <code>op</code> once. If the optional vault-uuid is supplied, it will be passed along to the <code>op get</code> call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the <code>op get</code> call, which will help it look in the right account, in case you have multiple accounts (e.g. personal and work accounts).</p> <p>Example</p> <pre><code>{{ (onepasswordDetailsFields \"$UUID\").password.value }}\n{{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\").password.value }}\n{{ (onepasswordDetailsFields \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\").password.value }}\n{{ (onepasswordDetailsFields \"$UUID\" \"\" \"$ACCOUNT_NAME\").password.value }}\n</code></pre> <p>Example</p> <p>Given the output from <code>op</code>:</p> <pre><code>{\n    \"uuid\": \"$UUID\",\n    \"details\": {\n        \"fields\": [\n            {\n                \"designation\": \"username\",\n                \"name\": \"username\",\n                \"type\": \"T\",\n                \"value\": \"exampleuser\"\n            },\n            {\n                \"designation\": \"password\",\n                \"name\": \"password\",\n                \"type\": \"P\",\n                \"value\": \"examplepassword\"\n            }\n        ]\n    }\n}\n</code></pre> <p>the return value of <code>onepasswordDetailsFields</code> will be the map:</p> <pre><code>{\n    \"username\": {\n        \"designation\": \"username\",\n        \"name\": \"username\",\n        \"type\": \"T\",\n        \"value\": \"exampleuser\"\n    },\n    \"password\": {\n        \"designation\": \"password\",\n        \"name\": \"password\",\n        \"type\": \"P\",\n        \"value\": \"examplepassword\"\n    }\n}\n</code></pre>"},{"location":"reference/templates/1password-functions/onepasswordDocument/","title":"<code>onepasswordDocument</code> uuid [vault-uuid [account-name]]","text":"<p><code>onepasswordDocument</code> returns a document from 1Password using the 1Password CLI (<code>op</code>). uuid is passed to <code>op get document $UUID</code> and the output from <code>op</code> is returned. The output from <code>op</code> is cached so calling <code>onepasswordDocument</code> multiple times with the same uuid will only invoke <code>op</code> once. If the optional vault-uuid is supplied, it will be passed along to the <code>op get</code> call, which can significantly improve performance. If the optional account-name is supplied, it will be passed along to the <code>op get</code> call, which will help it look in the right account, in case you have multiple accounts (e.g., personal and work accounts).</p> <p>If there is no valid session in the environment, by default you will be interactively prompted to sign in.</p> <p>Example</p> <pre><code>{{- onepasswordDocument \"$UUID\" -}}\n{{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" -}}\n{{- onepasswordDocument \"$UUID\" \"$VAULT_UUID\" \"$ACCOUNT_NAME\" -}}\n{{- onepasswordDocument \"$UUID\" \"\" \"$ACCOUNT_NAME\" -}}\n</code></pre>"},{"location":"reference/templates/1password-functions/onepasswordItemFields/","title":"<code>onepasswordItemFields</code> uuid [vault-uuid [account-name]]","text":"<p><code>onepasswordItemFields</code> returns structured data from 1Password using the 1Password CLI (<code>op</code>). uuid is passed to <code>op item get $UUID --format json</code>, the output from <code>op</code> is parsed as JSON, and each element of <code>details.sections</code> are iterated over and any <code>fields</code> are returned as a map indexed by each field's <code>n</code>.</p> <p>If there is no valid session in the environment, by default you will be interactively prompted to sign in.</p> <p>Example</p> <p>The result of</p> <pre><code>{{ (onepasswordItemFields \"abcdefghijklmnopqrstuvwxyz\").exampleLabel.value }}\n</code></pre> <p>is equivalent to calling</p> <pre><code>$ op item get abcdefghijklmnopqrstuvwxyz --fields label=exampleLabel\n# or\n$ op item get abcdefghijklmnopqrstuvwxyz --fields exampleLabel\n</code></pre> <p>Example</p> <p>Given the output from <code>op</code>:</p> <pre><code>{\n    \"id\": \"$UUID\",\n    \"title\": \"$TITLE\",\n    \"version\": 1,\n    \"vault\": {\n        \"id\": \"$vaultUUID\"\n    },\n    \"category\": \"LOGIN\",\n    \"last_edited_by\": \"userUUID\",\n    \"created_at\": \"2022-01-12T16:29:26Z\",\n    \"updated_at\": \"2022-01-12T16:29:26Z\",\n    \"sections\": [\n        {\n            \"id\": \"$sectionID\",\n            \"label\": \"Related Items\"\n        }\n    ],\n    \"fields\": [\n        {\n            \"id\": \"nerlnqbfzdm5q5g6ydsgdqgdw4\",\n            \"type\": \"STRING\",\n            \"label\": \"exampleLabel\",\n            \"value\": \"exampleValue\"\n        }\n    ],\n}\n</code></pre> <p>the return value of <code>onepasswordItemFields</code> will be the map:</p> <pre><code>{\n    \"exampleLabel\": {\n        \"id\": \"string\",\n        \"type\": \"D4328E0846D2461E8E455D7A07B93397\",\n        \"label\": \"exampleLabel\",\n        \"value\": \"exampleValue\"\n    }\n}\n</code></pre> <p>Info</p> <p>For 1Password CLI 1.x, the output is this:</p> <pre><code>{\n    \"uuid\": \"$UUID\",\n    \"details\": {\n        \"sections\": [\n            {\n                \"name\": \"linked items\",\n                \"title\": \"Related Items\"\n            },\n            {\n                \"fields\": [\n                    {\n                        \"k\": \"string\",\n                        \"n\": \"D4328E0846D2461E8E455D7A07B93397\",\n                        \"t\": \"exampleLabel\",\n                        \"v\": \"exampleValue\"\n                    }\n                  ],\n                \"name\": \"Section_20E0BD380789477D8904F830BFE8A121\",\n                \"title\": \"\"\n            }\n        ]\n    },\n}\n</code></pre> <p>the return value of <code>onepasswordItemFields</code> will be the map:</p> <pre><code>{\n    \"exampleLabel\": {\n        \"k\": \"string\",\n        \"n\": \"D4328E0846D2461E8E455D7A07B93397\",\n        \"t\": \"exampleLabel\",\n        \"v\": \"exampleValue\"\n    }\n}\n</code></pre>"},{"location":"reference/templates/1password-functions/onepasswordRead/","title":"<code>onepasswordRead</code> url [account]","text":"<p><code>onepasswordRead</code> returns data from 1Password using the 1Password CLI (<code>op</code>). url is passed to the <code>op read --no-newline</code> command. If account is specified, the extra arguments <code>--account $ACCOUNT</code> are passed to <code>op</code>.</p> <p>If there is no valid session in the environment, by default you will be interactively prompted to sign in.</p> <p>Example</p> <p>The result of</p> <pre><code>{{ onepasswordRead \"op://vault/item/field\" }}\n</code></pre> <p>is equivalent to calling</p> <pre><code>$ op read --no-newline op://vault/item/field\n</code></pre>"},{"location":"reference/templates/aws-secrets-manager-functions/","title":"AWS Secrets Manager functions","text":"<p>The <code>awsSecretsManager*</code> functions return data from AWS Secrets Manager using the <code>GetSecretValue</code> API.</p> <p>The profile and region are pulled from the standard environment variables and shared config files but can be overridden by setting <code>awsSecretsManager.profile</code> and <code>awsSecretsManager.region</code> configuration variables respectively.</p>"},{"location":"reference/templates/aws-secrets-manager-functions/awsSecretsManager/","title":"<code>awsSecretsManager</code> arn","text":"<p><code>awsSecretsManager</code> returns structured data retrieved from AWS Secrets Manager. arn specifies the <code>SecretId</code> passed to <code>GetSecretValue</code>. This can either be the full ARN or the simpler name if applicable.</p>"},{"location":"reference/templates/aws-secrets-manager-functions/awsSecretsManagerRaw/","title":"<code>awsSecretsManagerRaw</code> arn","text":"<p><code>awsSecretsManager</code> returns the raw string value retrieved from AWS Secrets Manager. arn specifies the <code>SecretId</code> passed to <code>GetSecretValue</code>. This can either be the full ARN or the simpler name if applicable.</p>"},{"location":"reference/templates/azure-key-vault-functions/azureKeyVault/","title":"<code>azureKeyVault</code> secret name [vault-name]","text":"<p><code>azureKeyVault</code> returns a secret value retrieved from an Azure Key Vault.</p> <p>The mandatory <code>secret name</code> argument specifies the name of the secret to retrieve.</p> <p>The optional <code>vault name</code> argument specifies the name of the vault, if not set, the default vault name will be used.</p> <p>Warning</p> <p>The current implementation will always return the latest version of the secret. Retrieving a specific version of a secret is not supported.</p>"},{"location":"reference/templates/bitwarden-functions/","title":"Bitwarden functions","text":"<p>The <code>bitwarden*</code> and <code>rbw*</code> functions return data from Bitwarden using the Bitwarden CLI (<code>bw</code>), Bitwarden Secrets CLI (<code>bws</code>), and <code>rbw</code> commands.</p>"},{"location":"reference/templates/bitwarden-functions/bitwarden/","title":"<code>bitwarden</code> [arg...]","text":"<p><code>bitwarden</code> returns structured data retrieved from Bitwarden using the Bitwarden CLI (<code>bw</code>). args are passed to <code>bw get</code> unchanged and the output from <code>bw get</code> is parsed as JSON.</p> <p>The output from <code>bw get</code> is cached so calling <code>bitwarden</code> multiple times with the same arguments will only invoke <code>bw</code> once.</p> <p>Example</p> <pre><code>username = {{ (bitwarden \"item\" \"$ITEMID\").login.username }}\npassword = {{ (bitwarden \"item\" \"$ITEMID\").login.password }}\n</code></pre>"},{"location":"reference/templates/bitwarden-functions/bitwardenAttachment/","title":"<code>bitwardenAttachment</code> filename itemid","text":"<p><code>bitwardenAttachment</code> returns a document from Bitwarden using the Bitwarden CLI (<code>bw</code>). filename and itemid are passed to <code>bw get attachment $FILENAME --itemid $ITEMID</code> and the output is returned.</p> <p>The output from <code>bw</code> is cached so calling <code>bitwardenAttachment</code> multiple times with the same filename and itemid will only invoke <code>bw</code> once.</p> <p>Example</p> <pre><code>{{- bitwardenAttachment \"$FILENAME\" \"$ITEMID\" -}}\n</code></pre>"},{"location":"reference/templates/bitwarden-functions/bitwardenAttachmentByRef/","title":"<code>bitwardenAttachmentByRef</code> filename args","text":"<p><code>bitwardenAttachmentByRef</code> returns a document from Bitwarden using the Bitwarden CLI (<code>bw</code>). This method requires two calls to <code>bw</code> to complete:</p> <ol> <li>First, args are passed to <code>bw get</code> in order to retrieve the item's    itemid.</li> <li>Then, filename and itemid are passed to <code>bw get attachment $FILENAME    --itemid $ITEMID</code> and the output from <code>bw</code> is returned.</li> </ol> <p>The output from <code>bw</code> is cached so calling <code>bitwardenAttachmentByRef</code> multiple times with the same filename and itemid will only invoke <code>bw</code> once.</p> <p>Example</p> <pre><code>{{- bitwardenAttachmentByRef \"$FILENAME\" \"$ARGS\" -}}\n</code></pre> <p>Example</p> <pre><code>{{- bitwardenAttachmentByRef \"id_rsa\" \"item\" \"example.com\" -}}\n</code></pre>"},{"location":"reference/templates/bitwarden-functions/bitwardenFields/","title":"<code>bitwardenFields</code> [arg...]","text":"<p><code>bitwardenFields</code> returns structured data retrieved from Bitwarden using the Bitwarden CLI (<code>bw</code>). args are passed to <code>bw get</code> unchanged, the output from <code>bw get</code> is parsed as JSON, and the elements of <code>fields</code> are returned as a dict indexed by each field's <code>name</code>.</p> <p>The output from <code>bw get</code> is cached so calling <code>bitwardenFields</code> multiple times with the same arguments will only invoke <code>bw get</code> once.</p> <p>Example</p> <pre><code>{{ (bitwardenFields \"item\" \"$ITEMID\").token.value }}\n</code></pre> <p>Example</p> <p>Given the output from <code>bw get</code>:</p> <pre><code>{\n    \"object\": \"item\",\n    \"id\": \"bf22e4b4-ae4a-4d1c-8c98-ac620004b628\",\n    \"organizationId\": null,\n    \"folderId\": null,\n    \"type\": 1,\n    \"name\": \"example.com\",\n    \"notes\": null,\n    \"favorite\": false,\n    \"fields\": [\n        {\n            \"name\": \"hidden\",\n            \"value\": \"hidden-value\",\n            \"type\": 1\n        },\n        {\n            \"name\": \"token\",\n            \"value\": \"token-value\",\n            \"type\": 0\n        }\n    ],\n    \"login\": {\n        \"username\": \"username-value\",\n        \"password\": \"password-value\",\n        \"totp\": null,\n        \"passwordRevisionDate\": null\n    },\n    \"collectionIds\": [],\n    \"revisionDate\": \"2020-10-28T00:21:02.690Z\"\n}\n</code></pre> <p>the return value if <code>bitwardenFields</code> will be the map:</p> <pre><code>{\n    \"hidden\": {\n        \"name\": \"hidden\",\n        \"type\": 1,\n        \"value\": \"hidden-value\"\n    },\n    \"token\": {\n        \"name\": \"token\",\n        \"type\": 0,\n        \"value\": \"token-value\"\n    }\n}\n</code></pre>"},{"location":"reference/templates/bitwarden-functions/bitwardenSecrets/","title":"<code>bitwardenSecrets</code> secret-id [access-token]","text":"<p><code>bitwardenSecrets</code> returns structured data from Bitwarden using the Bitwarden Secrets CLI (<code>bws</code>). secret-id is passed to <code>bws secret get</code> and the output from <code>bws secret get</code> is parsed as JSON and returned.</p> <p>If the additional access-token argument is given, it is passed to <code>bws secret get</code> with the <code>--access-token</code> flag.</p> <p>The output from <code>bws secret get</code> is cached so calling <code>bitwardenSecrets</code> multiple times with the same secret-id and access-token will only invoke <code>bws secret get</code> once.</p> <p>!!!</p> <pre><code>```\n{{ (bitwardenSecrets \"be8e0ad8-d545-4017-a55a-b02f014d4158\").value }}\n```\n</code></pre>"},{"location":"reference/templates/bitwarden-functions/rbw/","title":"<code>rbw</code> name [arg...]","text":"<p><code>rbw</code> returns structured data retrieved from Bitwarden using <code>rbw</code>. name is passed to <code>rbw get --raw</code>, along with any extra args, and the output is parsed as JSON.</p> <p>The output from <code>rbw get --raw</code> is cached so calling <code>rbw</code> multiple times with the same arguments will only invoke <code>rbw</code> once.</p> <p>Example</p> <pre><code>username = {{ (rbw \"test-entry\").data.username }}\npassword = {{ (rbw \"test-entry\" \"--folder\" \"my-folder\").data.password }}\n</code></pre>"},{"location":"reference/templates/bitwarden-functions/rbwFields/","title":"<code>rbwFields</code> name [arg...]","text":"<p><code>rbw</code> returns structured data retrieved from Bitwarden using <code>rbw</code>. name is passed to <code>rbw get --raw</code>, along with any extra args, the output is parsed as JSON, and the elements of <code>fields</code> are returned as a dict indexed by each field's <code>name</code>.</p> <p>The output from <code>rbw get --raw</code> is cached so calling <code>rbwFields</code> multiple times with the same arguments will only invoke <code>rbwFields</code> once.</p> <p>Example</p> <pre><code>{{ (rbwFields \"item\").name.value }}\n{{ (rbwFields \"item\" \"--folder\" \"my-folder\").name.value }}\n</code></pre>"},{"location":"reference/templates/dashlane-functions/","title":"Dashlane functions","text":"<p>The <code>dashlane*</code> functions return data from Dashlane using the Dashlane CLI.</p>"},{"location":"reference/templates/dashlane-functions/dashlaneNote/","title":"<code>dashlaneNote</code> filter","text":"<p><code>dashlaneNote</code> returns the content of a secure note from Dashlane using the Dashlane CLI (<code>dcli</code>). filter is passed to <code>dcli note</code>, and the output from <code>dcli note</code> is just read as a multiline string.</p> <p>The output from <code>dcli note</code> is cached so calling <code>dashlaneNote</code> multiple times with the same filter will only invoke <code>dcli note</code> once.</p> <p>Example</p> <pre><code>{{ dashlaneNote \"filter\" }}\n</code></pre>"},{"location":"reference/templates/dashlane-functions/dashlanePassword/","title":"<code>dashlanePassword</code> filter","text":"<p><code>dashlanePassword</code> returns structured data from Dashlane using the Dashlane CLI (<code>dcli</code>). filter is passed to <code>dcli password --output json</code>, and the output from <code>dcli password</code> is parsed as JSON.</p> <p>The output from <code>dcli password</code> cached so calling <code>dashlanePassword</code> multiple times with the same filter will only invoke <code>dcli password</code> once.</p> <p>Example</p> <pre><code>{{ (index (dashlanePassword \"filter\") 0).password }}\n</code></pre>"},{"location":"reference/templates/doppler-functions/","title":"Doppler","text":"<p>chezmoi includes support for Doppler using the <code>doppler</code> CLI to expose data through the <code>doppler</code> and <code>dopplerProjectJson</code> template functions.</p> <p>Warning</p> <p>Doppler is in beta and chezmoi's interface to it may change.</p>"},{"location":"reference/templates/doppler-functions/doppler/","title":"<code>doppler</code> key [project [config]]","text":"<p><code>doppler</code> returns the secret for the specified project and configuration from Doppler using <code>doppler secrets download --json --no-file</code>.</p> <p>If either of project or config are empty or omitted, then chezmoi will use the value from the <code>doppler.project</code> and <code>doppler.config</code> config variables if they are set and not empty.</p> <p>Example</p> <pre><code>{{ doppler \"SECRET_NAME\" \"project_name\" \"configuration_name\" }}\n</code></pre>"},{"location":"reference/templates/doppler-functions/dopplerProjectJson/","title":"<code>dopplerProjectJson</code> [project [config]]","text":"<p><code>dopplerProjectJson</code> returns the secret for the specified project and configuration from Doppler using <code>doppler secrets download --json --no-file</code> as <code>json</code> structured data.</p> <p>If either of project or config are empty or omitted, then chezmoi will use the value from the <code>doppler.project</code> and <code>doppler.config</code> config variables if they are set and not empty.</p> <p>Example</p> <pre><code>{{ (dopplerProjectJson \"project_name\" \"configuration_name\").SECRET_NAME }}\n</code></pre>"},{"location":"reference/templates/ejson-functions/","title":"ejson functions","text":"<p>The <code>ejson*</code> functions return data from ejson-encrypted files.</p>"},{"location":"reference/templates/ejson-functions/ejsonDecrypt/","title":"<code>ejsonDecrypt</code> filePath","text":"<p><code>ejsonDecrypt</code> returns the decrypted content of an ejson-encrypted file.</p> <p>filePath indicates where the encrypted file is located.</p> <p>The decrypted file is cached so calling <code>ejsonDecrypt</code> multiple times with the same filePath will only run through the decryption process once. The cache is shared with <code>ejsonDecryptWithKey</code>.</p> <p>Example</p> <pre><code>{{ (ejsonDecrypt \"my-secrets.ejson\").password }}\n</code></pre>"},{"location":"reference/templates/ejson-functions/ejsonDecryptWithKey/","title":"<code>ejsonDecryptWithKey</code> filePath key","text":"<p><code>ejsonDecryptWithKey</code> returns the decrypted content of an ejson-encrypted file.</p> <p>filePath indicates where the encrypted file is located, and key is used to decrypt the file.</p> <p>The decrypted file is cached so calling <code>ejsonDecryptWithKey</code> multiple times with the same filePath will only run through the decryption process once. The cache is shared with <code>ejsonDecrypt</code>.</p> <p>Example</p> <pre><code>{{ (ejsonDecryptWithKey \"my-secrets.ejson\" \"top-secret-key\").password }}\n</code></pre>"},{"location":"reference/templates/functions/","title":"Functions","text":"<p>All standard <code>text/template</code> and text template functions from <code>sprig</code> are included. chezmoi provides some additional functions.</p>"},{"location":"reference/templates/functions/comment/","title":"<code>comment</code> prefix text","text":"<p><code>comment</code> returns text with each line prefixed with prefix.</p> <p>Example</p> <pre><code>{{ \"Header\" | comment \"# \" }}\n</code></pre>"},{"location":"reference/templates/functions/completion/","title":"<code>completion</code> shell","text":"<p><code>completion</code> returns chezmoi's shell completion for shell. shell can be one of <code>bash</code>, <code>fish</code>, <code>powershell</code>, or <code>zsh</code>.</p> <p>Example</p> <pre><code>{{ completion \"zsh\" }}\n</code></pre>"},{"location":"reference/templates/functions/decrypt/","title":"<code>decrypt</code> ciphertext","text":"<p><code>decrypt</code> decrypts ciphertext using chezmoi's configured encryption method.</p> <p>Example</p> <pre><code>{{ joinPath .chezmoi.sourceDir \".ignored-encrypted-file.age\" | include | decrypt }}\n</code></pre>"},{"location":"reference/templates/functions/deleteValueAtPath/","title":"<code>deleteValueAtPath</code> path dict","text":"<p><code>deleteValueAtPath</code> modifies dict to delete the value at path and returns dict. path can be either a string containing a <code>.</code>-separated list of keys or a list of keys.</p> <p>If path does not exist in dict then <code>deleteValueAtPath</code> returns dict unchanged.</p> <p>Example</p> <pre><code>{{ dict \"outer\" (dict \"inner\" \"value\") | deleteValueAtPath \"outer.inner\" | toJson }}\n{{ dict | setValueAtPath \"key1\" \"value1\" | setValueAtPath \"key2.nestedKey\" \"value2\" | toJson }}\n{{ dict | setValueAtPath (list \"key2\" \"nestedKey\") \"value2\" | toJson }}\n</code></pre>"},{"location":"reference/templates/functions/encrypt/","title":"<code>encrypt</code> plaintext","text":"<p><code>encrypt</code> encrypts plaintext using chezmoi's configured encryption method.</p>"},{"location":"reference/templates/functions/eqFold/","title":"<code>eqFold</code> string1 string2 [extraString...]","text":"<p><code>eqFold</code> returns the boolean truth of comparing string1 with string2 and any number of extraStrings under Unicode case-folding.</p> <p>Example</p> <pre><code>{{ $commandOutput := output \"path/to/output-FOO.sh\" }}\n{{ if eqFold \"foo\" $commandOutput }}\n# $commandOutput is \"foo\"/\"Foo\"/\"FOO\"...\n{{ else if eqFold \"bar\" $commandOutput }}\n# $commandOutput is \"bar\"/\"Bar\"/\"BAR\"...\n{{ end }}\n</code></pre>"},{"location":"reference/templates/functions/findExecutable/","title":"<code>findExecutable</code> file path-list","text":"<p><code>findExecutable</code> searches for an executable named file in directories identified by path-list. The result will be the executable file concatenated with the matching path. If an executable file cannot be found in path-list, <code>findExecutable</code> returns an empty string.</p> <p><code>findExecutable</code> is provided as an alternative to <code>lookPath</code> so that you can interrogate the system PATH as it would be configured after <code>chezmoi apply</code>. Like <code>lookPath</code>, <code>findExecutable</code> is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates.</p> <p>The return value of the first successful call to <code>findExecutable</code> is cached, and future calls to <code>findExecutable</code> with the same parameters will return this path.</p> <p>Info</p> <p>On Windows, the resulting path will contain the first found executable extension as identified by the environment variable <code>%PathExt%</code>.</p> <p>Example</p> <pre><code>{{ if findExecutable \"rtx\" (list \"bin\" \"go/bin\" \".cargo/bin\" \".local/bin\") }}\n# $HOME/.cargo/bin/rtx exists and will probably be in $PATH after apply\n{{ end }}\n</code></pre>"},{"location":"reference/templates/functions/findOneExecutable/","title":"<code>findOneExecutable</code> file-list path-list","text":"<p><code>findOneExecutable</code> searches for an executable from file-list in directories identified by path-list, finding the first matching executable in the first matching directory (each directory is searched for matching executables in turn). The result will be the executable file concatenated with the matching path. If an executable from file-list cannot be found in path-list, <code>findOneExecutable</code> returns an empty string.</p> <p><code>findOneExecutable</code> is provided as an alternative to <code>lookPath</code> so that you can interrogate the system PATH as it would be configured after <code>chezmoi apply</code>. Like <code>lookPath</code>, <code>findOneExecutable</code> is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates.</p> <p>The return value of the first successful call to <code>findOneExecutable</code> is cached, and future calls to <code>findOneExecutable</code> with the same parameters will return this path.</p> <p>Info</p> <p>On Windows, the resulting path will contain the first found executable extension as identified by the environment variable <code>%PathExt%</code>.</p> <p>Example</p> <pre><code>{{ if findOneExecutable (list \"eza\" \"exa\") (list \"bin\" \"go/bin\" \".cargo/bin\" \".local/bin\") }}\n# $HOME/.cargo/bin/exa exists and will probably be in $PATH after apply\n{{ end }}\n</code></pre>"},{"location":"reference/templates/functions/fromIni/","title":"<code>fromIni</code> initext","text":"<p><code>fromIni</code> returns the parsed value of initext.</p> <p>Example</p> <pre><code>{{ (fromIni \"[section]\\nkey = value\").section.key }}\n</code></pre>"},{"location":"reference/templates/functions/fromJson/","title":"<code>fromJson</code> jsontext","text":"<p><code>fromJson</code> parses jsontext as JSON and returns the parsed value.</p> <p>JSON numbers that can be represented exactly as 64-bit signed integers are returned as such. Otherwise, if the number is in the range of 64-bit IEEE floating point values, it is returned as such. Otherwise, the number is returned as a string. See RFC7159 Section 6.</p>"},{"location":"reference/templates/functions/fromJsonc/","title":"<code>fromJsonc</code> jsonctext","text":"<p><code>fromJsonc</code> parses jsonctext as JSONC using <code>github.com/tailscale/hujson</code> and returns the parsed value.</p>"},{"location":"reference/templates/functions/fromToml/","title":"<code>fromToml</code> tomltext","text":"<p><code>fromToml</code> returns the parsed value of tomltext.</p> <p>Example</p> <pre><code>{{ (fromToml \"[section]\\nkey = \\\"value\\\"\").section.key }}\n</code></pre>"},{"location":"reference/templates/functions/fromYaml/","title":"<code>fromYaml</code> yamltext","text":"<p><code>fromYaml</code> returns the parsed value of yamltext.</p> <p>Example</p> <pre><code>{{ (fromYaml \"key1: value\\nkey2: value\").key2 }}\n</code></pre>"},{"location":"reference/templates/functions/glob/","title":"<code>glob</code> pattern","text":"<p><code>glob</code> returns the list of files matching pattern according to <code>doublestar.Glob</code>. Relative paths are interpreted relative to the destination directory.</p>"},{"location":"reference/templates/functions/hexDecode/","title":"<code>hexDecode</code> hextext","text":"<p><code>hexDecode</code> returns hextext decoded from a hex-encoding string.</p> <p>Example</p> <pre><code>{{ hexDecode \"68656c6c6f\" }}\n</code></pre>"},{"location":"reference/templates/functions/hexEncode/","title":"<code>hexEncode</code> string","text":"<p><code>hexEncode</code> returns string encoded as a hex string.</p> <p>Example</p> <pre><code>{{ hexEncode \"example\" }}\n</code></pre>"},{"location":"reference/templates/functions/include/","title":"<code>include</code> filename","text":"<p><code>include</code> returns the literal contents of the file named <code>*filename*</code>. Relative paths are interpreted relative to the source directory.</p>"},{"location":"reference/templates/functions/includeTemplate/","title":"<code>includeTemplate</code> filename [data]","text":"<p><code>includeTemplate</code> returns the result of executing the contents of filename with the optional data. Relative paths are first searched for in <code>.chezmoitemplates</code> and, if not found, are interpreted relative to the source directory.</p>"},{"location":"reference/templates/functions/ioreg/","title":"<code>ioreg</code>","text":"<p>On macOS, <code>ioreg</code> returns the structured output of the <code>ioreg -a -l</code> command, which includes detailed information about the I/O Kit registry.</p> <p>On non-macOS operating systems, <code>ioreg</code> returns <code>nil</code>.</p> <p>The output from <code>ioreg</code> is cached so multiple calls to the <code>ioreg</code> function will only execute the <code>ioreg -a -l</code> command once.</p> <p>Example</p> <pre><code>{{ if eq .chezmoi.os \"darwin\" }}\n{{   $serialNumber := index ioreg \"IORegistryEntryChildren\" 0 \"IOPlatformSerialNumber\" }}\n{{ end }}\n</code></pre> <p>Warning</p> <p>The <code>ioreg</code> function can be very slow and should not be used. It will be removed in a later version of chezmoi.</p>"},{"location":"reference/templates/functions/isExecutable/","title":"<code>isExecutable</code> file","text":"<p><code>isExecutable</code> returns true if a file is executable.</p> <p>Example</p> <pre><code>{{ if isExecutable \"/bin/echo\" }}\n# echo is executable\n{{ end }}\n</code></pre>"},{"location":"reference/templates/functions/joinPath/","title":"<code>joinPath</code> element...","text":"<p><code>joinPath</code> joins any number of path elements into a single path, separating them with the OS-specific path separator. Empty elements are ignored. The result is cleaned. If the argument list is empty or all its elements are empty, <code>joinPath</code> returns an empty string. On Windows, the result will only be a UNC path if the first non-empty element is a UNC path.</p> <p>Example</p> <pre><code>{{ joinPath .chezmoi.homeDir \".zshrc\" }}\n</code></pre>"},{"location":"reference/templates/functions/jq/","title":"<code>jq</code> query input","text":"<p><code>jq</code> runs the jq query query against input and returns a list of results.</p> <p>Example</p> <pre><code>{{ dict \"key\" \"value\" | jq \".key\" | first }}\n</code></pre> <p>Warning</p> <p><code>jq</code> uses <code>github.com/itchyny/gojq</code>, which behaves slightly differently to the <code>jq</code> command in some edge cases.</p>"},{"location":"reference/templates/functions/lookPath/","title":"<code>lookPath</code> file","text":"<p><code>lookPath</code> searches for an executable named file in the directories named by the <code>PATH</code> environment variable. If file contains a slash, it is tried directly and the <code>PATH</code> is not consulted. The result may be an absolute path or a path relative to the current directory. If file is not found, <code>lookPath</code> returns an empty string.</p> <p><code>lookPath</code> is not hermetic: its return value depends on the state of the environment and the filesystem at the moment the template is executed. Exercise caution when using it in your templates.</p> <p>The return value of the first successful call to <code>lookPath</code> is cached, and future calls to <code>lookPath</code> for the same file will return this path.</p> <p>Example</p> <pre><code>{{ if lookPath \"diff-so-fancy\" }}\n# diff-so-fancy is in $PATH\n{{ end }}\n</code></pre>"},{"location":"reference/templates/functions/lstat/","title":"<code>lstat</code> name","text":"<p><code>lstat</code> runs <code>os.Lstat</code> on name. If name exists it returns structured data. If name does not exist then it returns a false value. If <code>os.Lstat</code> returns any other error then it raises an error. The structured value returned if name exists contains the fields <code>name</code>, <code>size</code>, <code>mode</code>, <code>perm</code>, <code>modTime</code>, <code>isDir</code>, and <code>type</code>.</p> <p><code>lstat</code> is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates.</p> <p>Example</p> <pre><code>{{ if eq (joinPath .chezmoi.homeDir \".xinitrc\" | lstat).type \"symlink\" }}\n# ~/.xinitrc exists and is a symlink\n{{ end }}\n</code></pre>"},{"location":"reference/templates/functions/mozillaInstallHash/","title":"<code>mozillaInstallHash</code> path","text":"<p><code>mozillaInstallHash</code> returns the Mozilla install hash for path. This is a convenience function to assist the management of Firefox profiles.</p>"},{"location":"reference/templates/functions/output/","title":"<code>output</code> name [arg...]","text":"<p><code>output</code> returns the output of executing the command name with args. If executing the command returns an error then template execution exits with an error. The execution occurs every time that the template is executed. It is the user's responsibility to ensure that executing the command is both idempotent and fast.</p> <p>Example</p> <pre><code>current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }}\n</code></pre>"},{"location":"reference/templates/functions/pruneEmptyDicts/","title":"<code>pruneEmptyDicts</code> dict","text":"<p><code>pruneEmptyDicts</code> modifies dict to remove nested empty dicts. Properties are pruned from the bottom up, so any nested dicts that themselves only contain empty dicts are pruned.</p> <p>Example</p> <pre><code>{{ dict \"key\" \"value\" inner (dict) | pruneEmptyDicts | toJson }}\n</code></pre>"},{"location":"reference/templates/functions/quoteList/","title":"<code>quoteList</code> list","text":"<p><code>quoteList</code> returns a list where each element is the corresponding element in list quoted.</p> <p>Example</p> <pre><code>{{ $args := list \"alpha\" \"beta\" \"gamma\" }}\ncommand {{ $args | quoteList }}\n</code></pre> <pre><code>[section]\n    array = [{{- $list | quoteList | join \", \" -}}]\n</code></pre>"},{"location":"reference/templates/functions/replaceAllRegex/","title":"<code>replaceAllRegex</code> expr repl text","text":"<p><code>replaceAllRegex</code> returns text with all substrings matching the regular expression expr replaced with repl. It is an alternative to sprig's <code>regexpReplaceAll</code> function with a different argument order that supports pipelining.</p> <p>Example</p> <pre><code>{{ \"foo subject string\" | replaceAllRegex \"foo\" \"bar\" }}\n</code></pre>"},{"location":"reference/templates/functions/setValueAtPath/","title":"<code>setValueAtPath</code> path value dict","text":"<p><code>setValueAtPath</code> modifies dict to set the value at path to value and returns dict. path can be either a string containing a <code>.</code>-separated list of keys or a list of keys. The function will create new key/value pairs in dict if needed.</p> <p>This is an alternative to sprig's <code>set</code> function with a different argument order that supports pipelining.</p> <p>Example</p> <pre><code>{{ dict | setValueAtPath \"key1\" \"value1\" | setValueAtPath \"key2.nestedKey\" \"value2\" | toJson }}\n{{ dict | setValueAtPath (list \"key2\" \"nestedKey\") \"value2\" | toJson }}\n</code></pre>"},{"location":"reference/templates/functions/stat/","title":"<code>stat</code> name","text":"<p><code>stat</code> runs <code>os.Stat</code> on name. If name exists it returns structured data. If name does not exist then it returns a false value. If <code>os.Stat</code> returns any other error then it raises an error. The structured value returned if name exists contains the fields <code>name</code>, <code>size</code>, <code>mode</code>, <code>perm</code>, <code>modTime</code>, <code>isDir</code>, and <code>type</code>.</p> <p><code>stat</code> is not hermetic: its return value depends on the state of the filesystem at the moment the template is executed. Exercise caution when using it in your templates.</p> <p>Example</p> <pre><code>{{ if stat (joinPath .chezmoi.homeDir \".pyenv\") }}\n# ~/.pyenv exists\n{{ end }}\n</code></pre>"},{"location":"reference/templates/functions/toIni/","title":"<code>toIni</code> value","text":"<p><code>toIni</code> returns the ini representation of value, which must be a dict.</p> <p>Example</p> <pre><code>{{ dict \"key\" \"value\" \"section\" (dict \"subkey\" \"subvalue\") | toIni }}\n</code></pre> <p>Warning</p> <p>The ini format is not well defined, and the particular variant generated by <code>toIni</code> might not be suitable for you.</p>"},{"location":"reference/templates/functions/toPrettyJson/","title":"<code>toPrettyJson</code> [indent] value","text":"<p><code>toPrettyJson</code> returns the JSON representation of value. The optional indent specifies how much nested elements are indented relative to their parent. indent defaults to two spaces.</p> <p>Examples</p> <pre><code>{{ dict \"a\" (dict \"b\" \"c\") | toPrettyJson \"\\t\" }}\n</code></pre>"},{"location":"reference/templates/functions/toToml/","title":"<code>toToml</code> value","text":"<p><code>toToml</code> returns the TOML representation of value.</p> <p>Example</p> <pre><code>{{ dict \"key\" \"value\" | toToml }}\n</code></pre>"},{"location":"reference/templates/functions/toYaml/","title":"<code>toYaml</code> value","text":"<p><code>toYaml</code> returns the YAML representation of value.</p> <p>Example</p> <pre><code>{{ dict \"key\" \"value\" | toYaml }}\n</code></pre>"},{"location":"reference/templates/github-functions/","title":"GitHub functions","text":"<p>The <code>gitHub*</code> template functions return data from the GitHub API.</p> <p>By default, chezmoi makes anonymous GitHub API requests, which are subject to GitHub's rate limits (currently 60 requests per hour per source IP address). chezmoi caches results from identical GitHub API requests for the period defined in <code>gitHub.refreshPeriod</code> (default one minute).</p> <p>If any of the environment variables <code>$CHEZMOI_GITHUB_ACCESS_TOKEN</code>, <code>$GITHUB_ACCESS_TOKEN</code>, or <code>$GITHUB_TOKEN</code> are found, then the first one found will be used to authenticate the GitHub API requests which have a higher rate limit (currently 5,000 requests per hour per user).</p> <p>In practice, GitHub API rate limits are high enough chezmoi's caching of results mean that you should rarely need to set a token, unless you are sharing a source IP address with many other GitHub users. If needed, the GitHub documentation describes how to create a personal access token.</p>"},{"location":"reference/templates/github-functions/gitHubKeys/","title":"<code>gitHubKeys</code> user","text":"<p><code>gitHubKeys</code> returns user's public SSH keys from GitHub using the GitHub API. The returned value is a slice of structs with <code>.ID</code> and <code>.Key</code> fields.</p> <p>Warning</p> <p>If you use this function to populate your <code>~/.ssh/authorized_keys</code> file then you potentially open SSH access to anyone who is able to modify or add to your GitHub public SSH keys, possibly including certain GitHub employees. You should not use this function on publicly-accessible machines and should always verify that no unwanted keys have been added, for example by using the <code>-v</code> / <code>--verbose</code> option when running <code>chezmoi apply</code> or <code>chezmoi update</code>.</p> <p>Additionally, GitHub automatically removes keys which haven't been used in the last year. This may cause your keys to be removed from <code>~/.ssh/authorized_keys</code> suddenly, and without any warning or indication of the removal. You should provide one or more keys in plain text alongside this function to avoid unknowingly losing remote access to your machine.</p> <p>Example</p> <pre><code>{{ range gitHubKeys \"user\" }}\n{{- .Key }}\n{{ end }}\n</code></pre>"},{"location":"reference/templates/github-functions/gitHubLatestRelease/","title":"<code>gitHubLatestRelease</code> owner-repo","text":"<p><code>gitHubLatestRelease</code> calls the GitHub API to retrieve the latest release about the given owner-repo, returning structured data as defined by the GitHub Go API bindings.</p> <p>Calls to <code>gitHubLatestRelease</code> are cached so calling <code>gitHubLatestRelease</code> with the same owner-repo will only result in one call to the GitHub API.</p> <p>Example</p> <pre><code>{{ (gitHubLatestRelease \"docker/compose\").TagName }}\n</code></pre>"},{"location":"reference/templates/github-functions/gitHubLatestTag/","title":"<code>gitHubLatestTag</code> owner-repo","text":"<p><code>gitHubLatestTag</code> calls the GitHub API to retrieve the latest tag for the given owner-repo, returning structured data as defined by the GitHub Go API bindings.</p> <p>Calls to <code>gitHubLatestTag</code> are cached the same as <code>githubTags</code>, so calling <code>gitHubLatestTag</code> with the same owner-repo will only result in one call to the GitHub API.</p> <p>Example</p> <pre><code>{{ (gitHubLatestTag \"docker/compose\").Name }}\n</code></pre> <p>Warning</p> <p>The <code>gitHubLatestTag</code> returns the first tag returned by the list repository tags GitHub API endpoint. Although this seems to be the most recent tag, the GitHub API documentation does not specify the order of the returned tags.</p>"},{"location":"reference/templates/github-functions/gitHubReleases/","title":"<code>gitHubReleases</code> owner-repo","text":"<p><code>gitHubReleases</code> calls the GitHub API to retrieve the first page of releases for the given owner-repo, returning structured data as defined by the GitHub Go API bindings.</p> <p>Calls to <code>gitHubReleases</code> are cached so calling <code>gitHubReleases</code> with the same owner-repo will only result in one call to the GitHub API.</p> <p>Example</p> <pre><code>{{ (index (gitHubReleases \"docker/compose\") 0).TagName }}\n</code></pre> <p>Note</p> <p>The maximum number of items returned by <code>gitHubReleases</code> is determined by default page size for the GitHub API.</p> <p>Warning</p> <p>The values returned by <code>gitHubReleases</code> are not directly queryable via the <code>jq</code> function and must instead be converted through JSON:</p> <pre><code>{{ gitHubReleases \"docker/compose\" | toJson | fromJson | jq \".[0].tag_name\" }}\n</code></pre>"},{"location":"reference/templates/github-functions/gitHubTags/","title":"<code>gitHubTags</code> owner-repo","text":"<p><code>gitHubTags</code> calls the GitHub API to retrieve the first page of tags for the given owner-repo, returning structured data as defined by the GitHub Go API bindings.</p> <p>Calls to <code>gitHubTags</code> are cached so calling <code>gitHubTags</code> with the same owner-repo will only result in one call to the GitHub API.</p> <p>Example</p> <pre><code>{{ (index (gitHubTags \"docker/compose\") 0).Name }}\n</code></pre> <p>Note</p> <p>The maximum number of items returned by <code>gitHubReleases</code> is determined by default page size for the GitHub API.</p> <p>Warning</p> <p>The values returned by <code>gitHubTags</code> are not directly queryable via the <code>jq</code> function and must instead be converted through JSON:</p> <pre><code>{{ gitHubTags \"docker/compose\" | toJson | fromJson | jq \".[0].name\" }}\n</code></pre>"},{"location":"reference/templates/gopass-functions/","title":"gopass functions","text":"<p>The <code>gopass*</code> template functions return data stored in gopass using the gopass CLI (<code>gopass</code>).</p>"},{"location":"reference/templates/gopass-functions/gopass/","title":"<code>gopass</code> gopass-name","text":"<p><code>gopass</code> returns passwords stored in gopass using the gopass CLI (<code>gopass</code>). gopass-name is passed to <code>gopass show --password $GOPASS_NAME</code> and the first line of the output of <code>gopass</code> is returned with the trailing newline stripped. The output from <code>gopass</code> is cached so calling <code>gopass</code> multiple times with the same gopass-name will only invoke <code>gopass</code> once.</p> <p>Example</p> <pre><code>{{ gopass \"$PASS_NAME\" }}\n</code></pre>"},{"location":"reference/templates/gopass-functions/gopassRaw/","title":"<code>gopassRaw</code> gopass-name","text":"<p><code>gopass</code> returns raw passwords stored in gopass using the gopass CLI (<code>gopass</code>). gopass-name is passed to <code>gopass show --noparsing $GOPASS_NAME</code> and the output is returned. The output from <code>gopassRaw</code> is cached so calling <code>gopassRaw</code> multiple times with the same gopass-name will only invoke <code>gopass</code> once.</p>"},{"location":"reference/templates/hcp-vault-secrets-functions/","title":"HCP Vault Secrets","text":"<p>chezmoi includes support for HCP Vault Secrets using the <code>vlt</code> CLI to expose data through the <code>hcpVaultSecret</code> and <code>hcpVaultSecretJson</code> template functions.</p> <p>Warning</p> <p>HCP Vault Secrets is in beta and chezmoi's interface to it may change.</p>"},{"location":"reference/templates/hcp-vault-secrets-functions/hcpVaultSecret/","title":"<code>hcpVaultSecret</code> key [application-name [project-id [organization-id]]]","text":"<p><code>hcpVaultSecret</code> returns the plaintext secret from HCP Vault Secrets using <code>vlt secrets get --plaintext</code>.</p> <p>If any of application-name, project-id, or organization-id are empty or omitted, then chezmoi will use the value from the <code>hcpVaultSecret.applicationName</code>, <code>hcpVaultSecret.projectId</code>, and <code>hcpVaultSecret.organizationId</code> config variables if they are set and not empty.</p> <p>Example</p> <pre><code>{{ hcpVaultSecret \"username\" }}\n</code></pre>"},{"location":"reference/templates/hcp-vault-secrets-functions/hcpVaultSecretJson/","title":"<code>hcpVaultSecretJson</code> key [application-name [project-id [organization-id]]]","text":"<p><code>hcpVaultSecretJson</code> returns structured data from HCP Vault Secrets using <code>vlt secrets get --format=json</code>.</p> <p>If any of application-name, project-id, or organization-id are empty or omitted, then chezmoi will use the value from the <code>hcpVaultSecret.applicationName</code>, <code>hcpVaultSecret.projectId</code>, and <code>hcpVaultSecret.organizationId</code> config variables if they are set and not empty.</p> <p>Example</p> <pre><code>{{ (hcpVaultSecretJson \"secret_name\" \"application_name\").created_by.email }}\n</code></pre>"},{"location":"reference/templates/init-functions/","title":"Init functions","text":"<p>These template functions are only available when generating a config file with <code>chezmoi init</code>. For testing with <code>chezmoi execute-template</code>, pass the <code>--init</code> flag to enable them.</p>"},{"location":"reference/templates/init-functions/exit/","title":"<code>exit</code> code","text":"<p><code>exit</code> stops template execution and causes chezmoi to exit with code.</p>"},{"location":"reference/templates/init-functions/promptBool/","title":"<code>promptBool</code> prompt [default]","text":"<p><code>promptBool</code> prompts the user with prompt and returns the user's response interpreted as a boolean. If default is passed and the user's response is empty then it returns default. The user's response is interpreted as follows (case insensitive):</p> Response Result 1, on, t, true, y, yes <code>true</code> 0, off, f, false, n, no <code>false</code>"},{"location":"reference/templates/init-functions/promptBoolOnce/","title":"<code>promptBoolOnce</code> map path prompt [default]","text":"<p><code>promptBoolOnce</code> returns the value of map at path if it exists and is a boolean value, otherwise it prompts the user for a boolean value with prompt and an optional default using <code>promptBool</code>.</p> <p>Example</p> <pre><code>{{ $hasGUI := promptBoolOnce . \"hasGUI\" \"Does this machine have a GUI\" }}\n</code></pre>"},{"location":"reference/templates/init-functions/promptChoice/","title":"<code>promptChoice</code> prompt choices [default]","text":"<p><code>promptChoice</code> prompts the user with prompt and choices and returns the user's response. choices must be a list of strings. If default is passed and the user's response is empty then it returns default.</p> <p>Example</p> <pre><code>{{- $choices := list \"desktop\" \"server\" -}}\n{{- $hosttype := promptChoice \"What type of host are you on\" $choices -}}\n[data]\n    hosttype = {{- $hosttype | quote -}}\n</code></pre>"},{"location":"reference/templates/init-functions/promptChoiceOnce/","title":"<code>promptChoiceOnce</code> map path prompt choices [default]","text":"<p><code>promptChoiceOnce</code> returns the value of map at path if it exists and is a string, otherwise it prompts the user for one of choices with prompt and an optional default using <code>promptChoice</code>.</p> <p>Example</p> <pre><code>{{- $choices := list \"desktop\" \"laptop\" \"server\" \"termux\" -}}\n{{- $hosttype := promptChoiceOnce . \"hosttype\" \"What type of host are you on\" $choices -}}\n[data]\n    hosttype = {{- $hosttype | quote -}}\n</code></pre>"},{"location":"reference/templates/init-functions/promptInt/","title":"<code>promptInt</code> prompt [default]","text":"<p><code>promptInt</code> prompts the user with prompt and returns the user's response interpreted as an integer. If default is passed and the user's response is empty then it returns default.</p>"},{"location":"reference/templates/init-functions/promptIntOnce/","title":"<code>promptIntOnce</code> map path prompt [default]","text":"<p><code>promptIntOnce</code> returns the value of map at path if it exists and is an integer value, otherwise it prompts the user for a integer value with prompt and an optional default using <code>promptInt</code>.</p> <p>Example</p> <pre><code>{{ $monitors := promptIntOnce . \"monitors\" \"How many monitors does this machine have\" }}\n</code></pre>"},{"location":"reference/templates/init-functions/promptString/","title":"<code>promptString</code> prompt [default]","text":"<p><code>promptString</code> prompts the user with prompt and returns the user's response with all leading and trailing spaces stripped. If default is passed and the user's response is empty then it returns default.</p> <p>Example</p> <pre><code>{{ $email := promptString \"email\" -}}\n[data]\n    email = {{ $email | quote }}\n</code></pre>"},{"location":"reference/templates/init-functions/promptStringOnce/","title":"<code>promptStringOnce</code> map path prompt [default]","text":"<p><code>promptStringOnce</code> returns the value of map at path if it exists and is an string value, otherwise it prompts the user for a string value with prompt and an optional default using <code>promptString</code>.</p> <p>Example</p> <pre><code>{{ $email := promptStringOnce . \"email\" \"What is your email address\" }}\n</code></pre>"},{"location":"reference/templates/init-functions/stdinIsATTY/","title":"<code>stdinIsATTY</code>","text":"<p><code>stdinIsATTY</code> returns <code>true</code> if chezmoi's standard input is a TTY. It is primarily useful for determining whether <code>prompt*</code> functions should be called or default values be used.</p> <p>Example</p> <pre><code>{{ $email := \"\" }}\n{{ if stdinIsATTY }}\n{{   $email = promptString \"email\" }}\n{{ else }}\n{{   $email = \"user@example.com\" }}\n{{ end }}\n</code></pre>"},{"location":"reference/templates/init-functions/writeToStdout/","title":"<code>writeToStdout</code> string...","text":"<p><code>writeToStdout</code> writes each string to stdout.</p> <p>Example</p> <pre><code>{{- writeToStdout \"Hello, world\\n\" -}}\n</code></pre>"},{"location":"reference/templates/keepassxc-functions/","title":"KeePassXC functions","text":"<p>The <code>keepassxc*</code> template functions return structured data retrieved from a KeePassXC database using the KeePassXC CLI (<code>keepassxc-cli</code>)</p> <p>The database is configured by setting <code>keepassxc.database</code> in the configuration file. You will be prompted for the database password the first time <code>keepassxc-cli</code> is run, and the password is cached, in plain text, in memory until chezmoi terminates.</p> <p>The command used can by changed by setting the <code>keepassxc.command</code> configuration variable, and extra arguments can be added by setting <code>keepassxc.args</code>. Also, you can disable the password prompt by setting <code>keepassxc.prompt</code> to <code>false</code>.</p>"},{"location":"reference/templates/keepassxc-functions/keepassxc/","title":"<code>keepassxc</code> entry","text":"<p><code>keepassxc</code> returns structured data for entry using <code>keepassxc-cli</code>.</p> <p>The output from <code>keepassxc-cli</code> is parsed into key-value pairs and cached so calling <code>keepassxc</code> multiple times with the same entry will only invoke <code>keepassxc-cli</code> once.</p> <p>Example</p> <pre><code>username = {{ (keepassxc \"example.com\").UserName }}\npassword = {{ (keepassxc \"example.com\").Password }}\n</code></pre>"},{"location":"reference/templates/keepassxc-functions/keepassxcAttachment/","title":"<code>keepassxcAttachment</code> entry name","text":"<p><code>keepassxcAttachment</code> returns the attachment with name of entry using <code>keepassxc-cli</code>.</p> <p>Info</p> <p><code>keepassxcAttachment</code> requires <code>keepassxc-cli</code> version 2.7.0 or later.</p> <p>Example</p> <pre><code>{{- keepassxcAttachment \"SSH Config\" \"config\" -}}\n</code></pre>"},{"location":"reference/templates/keepassxc-functions/keepassxcAttribute/","title":"<code>keepassxcAttribute</code> entry attribute","text":"<p><code>keepassxcAttribute</code> returns the attribute attribute of entry using <code>keepassxc-cli</code>, with any leading or trailing whitespace removed.</p> <p>Example</p> <pre><code>{{ keepassxcAttribute \"SSH Key\" \"private-key\" }}\n</code></pre>"},{"location":"reference/templates/keeper-functions/","title":"Keeper functions","text":"<p>The <code>keeper*</code> functions return data from Keeper Commander CLI (<code>keeper</code>).</p> <p>The command used can by changed by setting the <code>keeper.command</code> configuration variable, and extra arguments can be added by setting <code>keeper.args</code>.</p>"},{"location":"reference/templates/keeper-functions/keeper/","title":"<code>keeper</code> uid","text":"<p><code>keeper</code> returns structured data retrieved from Keeper using the Commander CLI. uid is passed to <code>keeper get --format=json</code> and the output is parsed as JSON.</p>"},{"location":"reference/templates/keeper-functions/keeperDataFields/","title":"<code>keeperDataFields</code> uid","text":"<p><code>keeperDataFields</code> returns the <code>.data.fields</code> elements of <code>keeper get --format=json *uid*</code> indexed by <code>type</code>.</p>"},{"location":"reference/templates/keeper-functions/keeperDataFields/#example","title":"Example","text":"<pre><code>url = {{ (keeperDataFields \"$UID\").url }}\nlogin = {{ index (keeperDataFields \"$UID\").login 0 }}\npassword = {{ index (keeperDataFields \"$UID\").password 0 }}\n</code></pre>"},{"location":"reference/templates/keeper-functions/keeperFindPassword/","title":"<code>keeperFindPassword</code> query","text":"<p><code>keeperFindPassword</code> returns the output of <code>keeper find-password query</code>. query can be a UID or a path.</p>"},{"location":"reference/templates/keyring-functions/keyring/","title":"<code>keyring</code> service user","text":"<p><code>keyring</code> retrieves the value associated with service and user from the user's keyring.</p> OS Keyring macOS Keychain Linux GNOME Keyring Windows Windows Credentials Manager FreeBSD GNOME Keyring <p>Example</p> <pre><code>[github]\n    user = {{ .github.user | quote }}\n    token = {{ keyring \"github\" .github.user | quote }}\n</code></pre> <p>Warning</p> <p>On FreeBSD, the <code>keyring</code> template function is only available if chezmoi was compiled with cgo enabled. The official release binaries of chezmoi are not compiled with cgo enabled, and <code>keyring</code> will always return an empty string.</p>"},{"location":"reference/templates/lastpass-functions/","title":"LastPass functions","text":"<p>The <code>lastpass*</code> template functions return structured data from LastPass using the LastPass CLI (<code>lpass</code>).</p>"},{"location":"reference/templates/lastpass-functions/lastpass/","title":"<code>lastpass</code> id","text":"<p><code>lastpass</code> returns structured data from LastPass using the LastPass CLI (<code>lpass</code>). id is passed to <code>lpass show --json $ID</code> and the output from <code>lpass</code> is parsed as JSON. In addition, the <code>note</code> field, if present, is further parsed as colon-separated key-value pairs. The structured data is an array so typically the <code>index</code> function is used to extract the first item. The output from <code>lastpass</code> is cached so calling <code>lastpass</code> multiple times with the same id will only invoke <code>lpass</code> once.</p> <p>Example</p> <pre><code>githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }}\n{{ (index (lastpass \"SSH\") 0).note.privateKey }}\n</code></pre>"},{"location":"reference/templates/lastpass-functions/lastpassRaw/","title":"<code>lastpassRaw</code> id","text":"<p><code>lastpassRaw</code> returns structured data from LastPass using the LastPass CLI (<code>lpass</code>). It behaves identically to the <code>lastpass</code> function, except that no further parsing is done on the <code>note</code> field.</p> <p>Example</p> <pre><code>{{ (index (lastpassRaw \"SSH Private Key\") 0).note }}\n</code></pre>"},{"location":"reference/templates/pass-functions/","title":"pass functions","text":"<p>The <code>pass</code> template functions return passwords stored in pass using the pass CLI (<code>pass</code>).</p> <p>Hint</p> <p>To use a pass-compatible password manager like passage, set <code>pass.command</code> to the name of the binary and use chezmoi's <code>pass*</code> template functions as if you were using pass.</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[pass]\n    command = \"passage\"\n</code></pre>"},{"location":"reference/templates/pass-functions/pass/","title":"<code>pass</code> pass-name","text":"<p><code>pass</code> returns passwords stored in pass using the pass CLI (<code>pass</code>). pass-name is passed to <code>pass show $PASS_NAME</code> and the first line of the output of <code>pass</code> is returned with the trailing newline stripped. The output from <code>pass</code> is cached so calling <code>pass</code> multiple times with the same pass-name will only invoke <code>pass</code> once.</p> <p>Example</p> <pre><code>{{ pass \"$PASS_NAME\" }}\n</code></pre>"},{"location":"reference/templates/pass-functions/passFields/","title":"<code>passFields</code> pass-name","text":"<p><code>passFields</code> returns structured data stored in pass using the pass CLI (<code>pass</code>). pass-name is passed to <code>pass show $PASS_NAME</code> and the output is parsed as colon-separated key-value pairs, one per line. The return value is a map of keys to values.</p> <p>Example</p> <p>Given the output from <code>pass</code>:</p> <pre><code>GitHub\nlogin: username\npassword: secret\n</code></pre> <p>the return value will be the map:</p> <pre><code>{\n    \"login\": \"username\",\n    \"password\": \"secret\"\n}\n</code></pre> <p>Example</p> <pre><code>{{ (passFields \"GitHub\").password }}\n</code></pre>"},{"location":"reference/templates/pass-functions/passRaw/","title":"<code>passRaw</code> pass-name","text":"<p><code>passRaw</code> returns passwords stored in pass using the pass CLI (<code>pass</code>). pass-name is passed to <code>pass show $PASS_NAME</code> and the output is returned. The output from <code>pass</code> is cached so calling <code>passRaw</code> multiple times with the same pass-name will only invoke <code>pass</code> once.</p>"},{"location":"reference/templates/passhole-functions/","title":"Passhole","text":"<p>chezmoi includes support for KeePass using the Passhole CLI (<code>ph</code>).</p>"},{"location":"reference/templates/passhole-functions/passhole/","title":"passhole path field","text":"<p><code>passhole</code> returns the field of path from a KeePass database using passhole's <code>ph</code> command.</p> <p>Example</p> <pre><code>{{ passhole \"example.com\" \"password\" }}\n</code></pre>"},{"location":"reference/templates/secret-functions/","title":"Generic secret functions","text":"<p>The <code>secret*</code> template functions return the output of the generic secret command defined by the <code>secret.command</code> configuration variable.</p>"},{"location":"reference/templates/secret-functions/secret/","title":"<code>secret</code> [arg...]","text":"<p><code>secret</code> returns the output of the generic secret command defined by the <code>secret.command</code> configuration variable with <code>secret.args</code> and args with leading and trailing whitespace removed. The output is cached so multiple calls to <code>secret</code> with the same args will only invoke the generic secret command once.</p>"},{"location":"reference/templates/secret-functions/secretJSON/","title":"<code>secretJSON</code> [arg...]","text":"<p><code>secretJSON</code> returns structured data from the generic secret command defined by the <code>secret.command</code> configuration variable with <code>secret.args</code> and args. The output is parsed as JSON. The output is cached so multiple calls to <code>secret</code> with the same args will only invoke the generic secret command once.</p>"},{"location":"reference/templates/vault-functions/vault/","title":"<code>vault</code> key","text":"<p><code>vault</code> returns structured data from Vault using the Vault CLI (<code>vault</code>). key is passed to <code>vault kv get -format=json $KEY</code> and the output from <code>vault</code> is parsed as JSON. The output from <code>vault</code> is cached so calling <code>vault</code> multiple times with the same key will only invoke <code>vault</code> once.</p> <p>Example</p> <pre><code>{{ (vault \"$KEY\").data.data.password }}\n</code></pre>"},{"location":"user-guide/command-overview/","title":"Command overview","text":""},{"location":"user-guide/command-overview/#getting-started","title":"Getting started","text":"<ul> <li> <p><code>chezmoi doctor</code> checks for common problems. If you encounter something unexpected, run this first.</p> </li> <li> <p><code>chezmoi init</code> creates chezmoi's source directory and a git repo on a new machine.</p> </li> </ul>"},{"location":"user-guide/command-overview/#daily-commands","title":"Daily commands","text":"<ul> <li> <p><code>chezmoi add $FILE</code> adds <code>$FILE</code>from your home directory to the source directory.</p> </li> <li> <p><code>chezmoi edit $FILE</code> opens your editor with the file in the source directory that corresponds to <code>$FILE</code>.</p> </li> <li> <p><code>chezmoi status</code> gives a quick summary of what files would change if you ran <code>chezmoi apply</code>.</p> </li> <li> <p><code>chezmoi diff</code> shows the changes that <code>chezmoi apply</code> would make to your home directory.</p> </li> <li> <p><code>chezmoi apply</code> updates your dotfiles from the source directory.</p> </li> <li> <p><code>chezmoi edit --apply $FILE</code> is like <code>chezmoi edit $FILE</code> but also runs <code>chezmoi apply $FILE</code> afterwards.</p> </li> <li> <p><code>chezmoi cd</code> opens a subshell in the source directory.</p> </li> </ul> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     H-&gt;&gt;W: chezmoi add &lt;file&gt;     W-&gt;&gt;W: chezmoi edit &lt;file&gt;     W--&gt;&gt;H: chezmoi status     W--&gt;&gt;H: chezmoi diff     W-&gt;&gt;H: chezmoi apply     W-&gt;&gt;H: chezmoi edit --apply &lt;file&gt;     H--&gt;&gt;W: chezmoi cd"},{"location":"user-guide/command-overview/#using-chezmoi-across-multiple-machines","title":"Using chezmoi across multiple machines","text":"<ul> <li> <p><code>chezmoi init $GITHUB_USERNAME</code> clones your dotfiles from GitHub into the source directory.</p> </li> <li> <p><code>chezmoi init --apply $GITHUB_USERNAME</code> clones your dotfiles from GitHub into the source directory and runs <code>chezmoi apply</code>.</p> </li> <li> <p><code>chezmoi update</code> pulls the latest changes from your remote repo and runs <code>chezmoi apply</code>.</p> </li> <li> <p>Use normal git commands to add, commit, and push changes to your remote repo.</p> </li> </ul> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     R-&gt;&gt;W: chezmoi init &lt;github-username&gt;     R-&gt;&gt;H: chezmoi init --apply &lt;github-username&gt;     R-&gt;&gt;H: chezmoi update &lt;github-username&gt;     W-&gt;&gt;L: git commit     L-&gt;&gt;R: git push"},{"location":"user-guide/command-overview/#working-with-templates","title":"Working with templates","text":"<ul> <li> <p><code>chezmoi data</code> prints the available template data.</p> </li> <li> <p><code>chezmoi add --template $FILE</code> adds <code>$FILE</code> as a template.</p> </li> <li> <p><code>chezmoi chattr +template $FILE</code> makes an existing file a template.</p> </li> <li> <p><code>chezmoi cat $FILE</code> prints the target contents of <code>$FILE</code>, without changing <code>$FILE</code>.</p> </li> <li> <p><code>chezmoi execute-template</code> is useful for testing and debugging templates.</p> </li> </ul>"},{"location":"user-guide/daily-operations/","title":"Daily operations","text":""},{"location":"user-guide/daily-operations/#pull-the-latest-changes-from-your-repo-and-apply-them","title":"Pull the latest changes from your repo and apply them","text":"<p>You can pull the changes from your repo and apply them in a single command:</p> <pre><code>$ chezmoi update\n</code></pre> <p>This runs <code>git pull --autostash --rebase</code> in your source directory and then <code>chezmoi apply</code>.</p> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     R-&gt;&gt;H: chezmoi update"},{"location":"user-guide/daily-operations/#pull-the-latest-changes-from-your-repo-and-see-what-would-change-without-actually-applying-the-changes","title":"Pull the latest changes from your repo and see what would change, without actually applying the changes","text":"<p>Run:</p> <pre><code>$ chezmoi git pull -- --autostash --rebase &amp;&amp; chezmoi diff\n</code></pre> <p>This runs <code>git pull --autostash --rebase</code> in your source directory and <code>chezmoi diff</code> then shows the difference between the target state computed from your source directory and the actual state.</p> <p>If you're happy with the changes, then you can run</p> <pre><code>$ chezmoi apply\n</code></pre> <p>to apply them.</p> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     R-&gt;&gt;W: chezmoi git pull     W--&gt;&gt;H: chezmoi diff     W-&gt;&gt;H: chezmoi apply"},{"location":"user-guide/daily-operations/#automatically-commit-and-push-changes-to-your-repo","title":"Automatically commit and push changes to your repo","text":"<p>chezmoi can automatically commit and push changes to your source directory to your repo. This feature is disabled by default. To enable it, add the following to your config file:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[git]\n    autoCommit = true\n    autoPush = true\n</code></pre> <p>Whenever a change is made to your source directory, chezmoi will commit the changes with an automatically-generated commit message (if <code>autoCommit</code> is true) and push them to your repo (if <code>autoPush</code> is true). <code>autoPush</code> implies <code>autoCommit</code>, i.e. if <code>autoPush</code> is true then chezmoi will auto-commit your changes. If you only set <code>autoCommit</code> to true then changes will be committed but not pushed.</p> <p>By default, <code>autoCommit</code> will generate a commit message based on the files changed. You can override this by setting the <code>git.commitMessageTemplate</code> configuration variable. For example, to have chezmoi prompt you for a commit message each time, use:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[git]\n    autoCommit = true\n    commitMessageTemplate = \"{{ promptString \\\"Commit message\\\" }}\"\n</code></pre> <p>If your commit message is longer than fits in a string then you can set <code>git.commitMessageTemplateFile</code> to specify a path to the commit message template relative to the source directory, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[git]\n    autoCommit = true\n    commitMessageTemplateFile = \".commit_message.tmpl\"\n</code></pre> <p>Be careful when using <code>autoPush</code>. If your dotfiles repo is public and you accidentally add a secret in plain text, that secret will be pushed to your public repo.</p> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     W-&gt;&gt;L: autoCommit     W-&gt;&gt;R: autoPush"},{"location":"user-guide/daily-operations/#install-chezmoi-and-your-dotfiles-on-a-new-machine-with-a-single-command","title":"Install chezmoi and your dotfiles on a new machine with a single command","text":"<p>chezmoi's install script can run <code>chezmoi init</code> for you by passing extra arguments to the newly installed chezmoi binary. If your dotfiles repo is <code>github.com/$GITHUB_USERNAME/dotfiles</code> then installing chezmoi, running <code>chezmoi init</code>, and running <code>chezmoi apply</code> can be done in a single line of shell:</p> <pre><code>$ sh -c \"$(curl -fsLS get.chezmoi.io)\" -- init --apply $GITHUB_USERNAME\n</code></pre> <p>If your dotfiles repo has a different name to <code>dotfiles</code>, or if you host your dotfiles on a different service, then see the reference manual for <code>chezmoi init</code>.</p> <p>For setting up transitory environments (e.g. short-lived Linux containers) you can install chezmoi, install your dotfiles, and then remove all traces of chezmoi, including the source directory and chezmoi's configuration directory, with a single command:</p> <pre><code>$ sh -c \"$(curl -fsLS get.chezmoi.io)\" -- init --one-shot $GITHUB_USERNAME\n</code></pre>"},{"location":"user-guide/include-files-from-elsewhere/","title":"Include dotfiles from elsewhere","text":"<p>The sections below contain examples of how to use <code>.chezmoiexternal.toml</code> to include files from external sources. For more details, check the reference manual .</p>"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-from-a-url","title":"Include a subdirectory from a URL","text":"<p>To include a subdirectory from another repository, e.g. Oh My Zsh, you cannot use git submodules because chezmoi uses its own format for the source state and Oh My Zsh is not distributed in this format. Instead, you can use the <code>.chezmoiexternal.$FORMAT</code> to tell chezmoi to import dotfiles from an external source.</p> <p>For example, to import Oh My Zsh, the zsh-syntax-highlighting plugin, and powerlevel10k, put the following in <code>~/.local/share/chezmoi/.chezmoiexternal.toml</code>:</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>[\".oh-my-zsh\"]\n    type = \"archive\"\n    url = \"https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\"\n    exact = true\n    stripComponents = 1\n    refreshPeriod = \"168h\"\n[\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"]\n    type = \"archive\"\n    url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\"\n    exact = true\n    stripComponents = 1\n    refreshPeriod = \"168h\"\n[\".oh-my-zsh/custom/themes/powerlevel10k\"]\n    type = \"archive\"\n    url = \"https://github.com/romkatv/powerlevel10k/archive/v1.15.0.tar.gz\"\n    exact = true\n    stripComponents = 1\n</code></pre> <p>To apply the changes, run:</p> <pre><code>$ chezmoi apply\n</code></pre> <p>chezmoi will download the archives and unpack them as if they were part of the source state. chezmoi caches downloaded archives locally to avoid re-downloading them every time you run a chezmoi command, and will only re-download them at most every <code>refreshPeriod</code> (default never).</p> <p>In the above example <code>refreshPeriod</code> is set to <code>168h</code> (one week) for <code>.oh-my-zsh</code> and <code>.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</code> because the URL point to tarballs of the <code>master</code> branch, which changes over time. No refresh period is set for <code>.oh-my-zsh/custom/themes/powerlevel10k</code> because the URL points to the a tarball of a tagged version, which does not change over time. To bump the version of powerlevel10k, change the version in the URL.</p> <p>To force a refresh the downloaded archives, use the <code>--refresh-externals</code> flag to <code>chezmoi apply</code>:</p> <pre><code>$ chezmoi --refresh-externals apply\n</code></pre> <p><code>--refresh-externals</code> can be shortened to <code>-R</code>:</p> <pre><code>$ chezmoi -R apply\n</code></pre> <p>When using Oh My Zsh, make sure you disable auto-updates by setting <code>DISABLE_AUTO_UPDATE=\"true\"</code> in <code>~/.zshrc</code>. Auto updates will cause the <code>~/.oh-my-zsh</code> directory to drift out of sync with chezmoi's source state. To update Oh My Zsh and its plugins, refresh the downloaded archives.</p> <p>Note</p> <p>If your external dependency target directory can contain cache files that are added during normal use, chezmoi will report that files have changed on <code>chezmoi apply</code>. To avoid this, add the cache directory to your <code>.chezmoiignore</code> file.</p> <p>For example, Oh My Zsh may cache completions in <code>.oh-my-zsh/cache/completions/</code>, which should be added to your <code>.chezmoiignore</code> file.</p>"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-with-selected-files-from-a-url","title":"Include a subdirectory with selected files from a URL","text":"<p>Use <code>include</code> pattern filters to include only selected files from an archive URL.</p> <p>For example, to import just the required source files of the zsh-syntax-highlighting plugin in the example above, add in <code>include</code> filter to the <code>zsh-syntax-highlighting</code> section as shown below:</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>[\".oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"]\n    type = \"archive\"\n    url = \"https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\"\n    exact = true\n    stripComponents = 1\n    refreshPeriod = \"168h\"\n    include = [\"*/*.zsh\", \"*/.version\", \"*/.revision-hash\", \"*/highlighters/**\"]\n</code></pre>"},{"location":"user-guide/include-files-from-elsewhere/#include-a-single-file-from-a-url","title":"Include a single file from a URL","text":"<p>Including single files uses the same mechanism as including a subdirectory above, except with the external type <code>file</code> instead of <code>archive</code>. For example, to include <code>plug.vim</code> from <code>github.com/junegunn/vim-plug</code> in <code>~/.vim/autoload/plug.vim</code> put the following in <code>~/.local/share/chezmoi/.chezmoiexternal.toml</code>:</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>[\".vim/autoload/plug.vim\"]\n    type = \"file\"\n    url = \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\"\n    refreshPeriod = \"168h\"\n</code></pre>"},{"location":"user-guide/include-files-from-elsewhere/#extract-a-single-file-from-an-archive","title":"Extract a single file from an archive","text":"<p>You can extract a single file from an archive using the <code>archive-file</code> type in <code>.chezmoiexternal.$FORMAT</code>, for example:</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>{{ $ageVersion := \"1.1.1\" -}}\n[\".local/bin/age\"]\n    type = \"archive-file\"\n    url = \"https://github.com/FiloSottile/age/releases/download/v{{ $ageVersion }}/age-v{{ $ageVersion }}-{{ .chezmoi.os }}-{{ .chezmoi.arch }}.tar.gz\"\n    path = \"age/age\"\n</code></pre> <p>This will extract the single archive member <code>age/age</code> from the given URL (which is computed for the current OS and architecture) to the target <code>./local/bin/age</code>.</p>"},{"location":"user-guide/include-files-from-elsewhere/#import-archives","title":"Import archives","text":"<p>It is occasionally useful to import entire archives of configuration into your source state. The <code>import</code> command does this. For example, to import the latest version <code>github.com/ohmyzsh/ohmyzsh</code> to <code>~/.oh-my-zsh</code> run:</p> <pre><code>$ curl -s -L -o ${TMPDIR}/oh-my-zsh-master.tar.gz https://github.com/ohmyzsh/ohmyzsh/archive/master.tar.gz\n$ mkdir -p $(chezmoi source-path)/dot_oh-my-zsh\n$ chezmoi import --strip-components 1 --destination ~/.oh-my-zsh ${TMPDIR}/oh-my-zsh-master.tar.gz\n</code></pre> <p>Note</p> <p>This only updates the source state. You will need to run:</p> <pre><code>$ chezmoi apply\n</code></pre> <p>to update your destination directory.</p>"},{"location":"user-guide/include-files-from-elsewhere/#handle-tar-archives-in-an-unsupported-compression-format","title":"Handle tar archives in an unsupported compression format","text":"<p>chezmoi natively understands tar archives. tar archives can be uncompressed or compressed in the bzip2, gzip, xz, or zstd formats.</p> <p>If you have a tar archive in an unsupported compression format then you can use a filter to decompress it. For example, before chezmoi natively supported the zstd compression format, you could handle <code>.tar.zst</code> external archives with, for example:</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>[\".Software/anki/2.1.54-qt6\"]\n    type = \"archive\"\n    url = \"https://github.com/ankitects/anki/releases/download/2.1.54/anki-2.1.54-linux-qt6.tar.zst\"\n    filter.command = \"zstd\"\n    filter.args = [\"-d\"]\n    format = \"tar\"\n</code></pre> <p>Here <code>filter.command</code> and <code>filter.args</code> together tell chezmoi to filter the downloaded data through <code>zstd -d</code>. The <code>format = \"tar\"</code> line tells chezmoi that output of the filter is an uncompressed tar archive.</p>"},{"location":"user-guide/include-files-from-elsewhere/#include-a-subdirectory-from-a-git-repository","title":"Include a subdirectory from a git repository","text":"<p>You can configure chezmoi to keep a git repository up to date in a subdirectory by using the external type <code>git-repo</code>, for example:</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>[\".vim/pack/alker0/chezmoi.vim\"]\n    type = \"git-repo\"\n    url = \"https://github.com/alker0/chezmoi.vim.git\"\n    refreshPeriod = \"168h\"\n</code></pre> <p>If the directory does not exist then chezmoi will run <code>git clone</code> to clone it. If the directory does exist then chezmoi will run <code>git pull</code> to pull the latest changes, but not more often than every <code>refreshPeriod</code>. In the above example the <code>refreshPeriod</code> is <code>168h</code> which is one week. The default <code>refreshPeriod</code> is zero, which disables refreshes. You can force a refresh (i.e. force a <code>git pull</code>) by passing the <code>--refresh-externals</code>/<code>-R</code> flag to <code>chezmoi apply</code>.</p> <p>Warning</p> <p>chezmoi's support for <code>git-repo</code> externals is limited to running <code>git clone</code> and/or <code>git pull</code> in a directory. You must have a <code>git</code> binary in your <code>$PATH</code>.</p> <p>Using a <code>git-repo</code> external delegates management of the directory to git. chezmoi cannot manage any other files in that directory.</p> <p>The contents of <code>git-repo</code> externals will not be manifested in commands like <code>chezmoi diff</code> or <code>chezmoi dump</code>, and will be listed by <code>chezmoi unmanaged</code>.</p> <p>Hint</p> <p>If you need to manage extra files in a <code>git-repo</code> external, use an <code>archive</code> external instead with the URL pointing to an archive of the git repo's <code>master</code> or <code>main</code> branch.</p> <p>You can customize the arguments to <code>git clone</code> and <code>git pull</code> by setting the <code>$DIR.clone.args</code> and <code>$DIR.pull.args</code> variables in <code>.chezmoiexternal.$FORMAT</code>, for example:</p> ~/.local/share/chezmoi/.chezmoiexternal.toml<pre><code>[\".vim/pack/alker0/chezmoi.vim\"]\n    type = \"git-repo\"\n    url = \"https://github.com/alker0/chezmoi.vim.git\"\n    refreshPeriod = \"168h\"\n    [\".vim/pack/alker0/chezmoi.vim\".pull]\n        args = [\"--ff-only\"]\n</code></pre>"},{"location":"user-guide/include-files-from-elsewhere/#use-git-submodules-in-your-source-directory","title":"Use git submodules in your source directory","text":"<p>Important</p> <p>If you use git submodules, then you should set the <code>external_</code> attribute on the subdirectory containing the submodule.</p> <p>You can include git repos from elsewhere as git submodules in your source directory. <code>chezmoi init</code> and <code>chezmoi update</code> are aware of git submodules and will run git with the <code>--recurse-submodules</code> flag by default.</p> <p>chezmoi assumes that all files and directories in its source state are in chezmoi's format, i.e. their filenames include attributes like <code>private_</code> and <code>run_</code>.  Most git submodules are not in chezmoi's format and so files like <code>run_test.sh</code> will be be interpreted by chezmoi as a <code>run_</code> script. To avoid this problem, set the <code>external_</code> attribute on all subdirectories that contain submodules.</p> <p>You can stop chezmoi from handling git submodules by passing the <code>--recurse-submodules=false</code> flag or setting the <code>update.recurseSubmodules</code> configuration variable to <code>false</code>.</p>"},{"location":"user-guide/manage-different-types-of-file/","title":"Manage different types of file","text":""},{"location":"user-guide/manage-different-types-of-file/#have-chezmoi-create-a-directory-but-ignore-its-contents","title":"Have chezmoi create a directory, but ignore its contents","text":"<p>If you want chezmoi to create a directory, but ignore its contents, say <code>~/src</code>, first run:</p> <pre><code>$ mkdir -p $(chezmoi source-path)/src\n</code></pre> <p>This creates the directory in the source state, which means that chezmoi will create it (if it does not already exist) when you run <code>chezmoi apply</code>.</p> <p>However, as this is an empty directory it will be ignored by git. So, create a file in the directory in the source state that will be seen by git (so git does not ignore the directory) but ignored by chezmoi (so chezmoi does not include it in the target state):</p> <pre><code>$ touch $(chezmoi source-path)/src/.keep\n</code></pre> <p>chezmoi automatically creates <code>.keep</code> files when you add an empty directory with <code>chezmoi add</code>.</p>"},{"location":"user-guide/manage-different-types-of-file/#ensure-that-a-target-is-removed","title":"Ensure that a target is removed","text":"<p>Create a file called <code>.chezmoiremove</code> in the source directory containing a list of patterns of files to remove. chezmoi will remove anything in the target directory that matches the pattern. As this command is potentially dangerous, you should run chezmoi in verbose, dry-run mode beforehand to see what would be removed:</p> <pre><code>$ chezmoi apply --dry-run --verbose\n</code></pre> <p><code>.chezmoiremove</code> is interpreted as a template, so you can remove different files on different machines. Negative matches (patterns prefixed with a <code>!</code>) or targets listed in <code>.chezmoiignore</code> will never be removed.</p>"},{"location":"user-guide/manage-different-types-of-file/#manage-part-but-not-all-of-a-file","title":"Manage part, but not all, of a file","text":"<p>chezmoi, by default, manages whole files, but there are two ways to manage just parts of a file.</p> <p>Firstly, a <code>modify_</code> script receives the current contents of the file on the standard input and chezmoi reads the target contents of the file from the script's standard output. This can be used to change parts of a file, for example using <code>sed</code>.</p> <p>Hint</p> <p>If you need random access to the file to modify it, then you can write standard input to a temporary file, modify the temporary file, and then write the temporary file to the standard output, for example:</p> <pre><code>#!/bin/sh\ntempfile=\"$(mktemp)\"\ntrap 'rm -rf \"${tempfile}\"' EXIT\ncat &gt; \"${tempfile}\"\n# modify ${tempfile}\ncat \"${tempfile}\"\n</code></pre> <p>Note</p> <p>If the file does not exist then the standard input to the <code>modify_</code> script will be empty and it is the script's responsibility to write a complete file to the standard output.</p> <p><code>modify_</code> scripts that contain the string <code>chezmoi:modify-template</code> are executed as templates with the current contents of the file passed as <code>.chezmoi.stdin</code> and the result of the template execution used as the new contents of the file.</p> <p>Example</p> <p>To replace the string <code>old</code> with <code>new</code> in a file while leaving the rest of the file unchanged, use the modify script:</p> <pre><code>{{- /* chezmoi:modify-template */ -}}\n{{- .chezmoi.stdin | replaceAllRegex \"old\" \"new\" }}\n</code></pre> <p>To set individual values in JSON, JSONC, TOML, and YAML files you can use the <code>setValueAtPath</code> template function, for example:</p> <pre><code>{{- /* chezmoi:modify-template */ -}}\n{{ fromJson .chezmoi.stdin | setValueAtPath \"key.nestedKey\" \"value\" | toPrettyJson }}\n</code></pre> <p>Warning</p> <p>Modify templates must not have a <code>.tmpl</code> extension.</p> <p>Secondly, if only a small part of the file changes then consider using a template to re-generate the full contents of the file from the current state. For example, Kubernetes configurations include a current context that can be substituted with:</p> ~/.local/share/chezmoi/dot_kube/config.tmpl<pre><code>current-context: {{ output \"kubectl\" \"config\" \"current-context\" | trim }}\n</code></pre> <p>Hint</p> <p>For managing ini files with a mix of settings and state (such as recently used files or window positions), there is a third party tool called <code>chezmoi_modify_manager</code> that builds upon <code>modify_</code> scripts. See related software for more information.</p>"},{"location":"user-guide/manage-different-types-of-file/#manage-a-files-permissions-but-not-its-contents","title":"Manage a file's permissions, but not its contents","text":"<p>chezmoi's <code>create_</code> attributes allows you to tell chezmoi to create a file if it does not already exist. chezmoi, however, will apply any permission changes from the <code>executable_</code>, <code>private_</code>, and <code>readonly_</code> attributes. This can be used to control a file's permissions without altering its contents.</p> <p>For example, if you want to ensure that <code>~/.kube/config</code> always has permissions 600 then if you create an empty file called <code>dot_kube/private_config</code> in your source state, chezmoi will ensure <code>~/.kube/config</code>'s permissions are 0600 when you run <code>chezmoi apply</code> without changing its contents.</p> <p>This approach does have the downside that chezmoi will create the file if it does not already exist. If you only want <code>chezmoi apply</code> to set a file's permissions if it already exists and not create the file otherwise, you can use a <code>run_</code> script. For example, create a file in your source state called <code>run_set_kube_config_permissions.sh</code> containing:</p> <pre><code>#!/bin/sh\n\nFILE=\"$HOME/.kube/config\"\nif [ -f \"$FILE\" ]; then\n    if [ \"$(stat -c %a \"$FILE\")\" != \"600\" ] ; then\n        chmod 600 \"$FILE\"\n    fi\nfi\n</code></pre>"},{"location":"user-guide/manage-different-types-of-file/#handle-configuration-files-which-are-externally-modified","title":"Handle configuration files which are externally modified","text":"<p>Some programs modify their configuration files. When you next run <code>chezmoi apply</code>, any modifications made by the program will be lost.</p> <p>You can track changes to these files by replacing with a symlink back to a file in your source directory, which is under version control. Here is a worked example for VSCode's <code>settings.json</code> on Linux:</p> <p>Copy the configuration file to your source directory:</p> <pre><code>$ cp ~/.config/Code/User/settings.json $(chezmoi source-path)\n</code></pre> <p>Tell chezmoi to ignore this file:</p> <pre><code>$ echo settings.json &gt;&gt; $(chezmoi source-path)/.chezmoiignore\n</code></pre> <p>Tell chezmoi that <code>~/.config/Code/User/settings.json</code> should be a symlink to the file in your source directory:</p> <pre><code>$ mkdir -p $(chezmoi source-path)/private_dot_config/private_Code/User\n$ echo -n \"{{ .chezmoi.sourceDir }}/settings.json\" &gt; $(chezmoi source-path)/private_dot_config/private_Code/User/symlink_settings.json.tmpl\n</code></pre> <p>The prefix <code>private_</code> is used because the <code>~/.config</code> and <code>~/.config/Code</code> directories are private by default.</p> <p>Apply the changes:</p> <pre><code>$ chezmoi apply -v\n</code></pre> <p>Now, when the program modifies its configuration file it will modify the file in the source state instead.</p>"},{"location":"user-guide/manage-different-types-of-file/#populate-sshauthorized_keys-with-your-public-ssh-keys-from-github","title":"Populate <code>~/.ssh/authorized_keys</code> with your public SSH keys from GitHub","text":"<p>chezmoi can retrieve your public SSH keys from GitHub, which can be useful for populating your <code>~/.ssh/authorized_keys</code>. Put the following in your <code>~/.local/share/chezmoi/dot_ssh/authorized_keys.tmpl</code>:</p> <pre><code>{{ range gitHubKeys \"$GITHUB_USERNAME\" -}}\n{{   .Key }}\n{{ end -}}\n</code></pre>"},{"location":"user-guide/manage-machine-to-machine-differences/","title":"Manage machine-to-machine differences","text":""},{"location":"user-guide/manage-machine-to-machine-differences/#use-templates","title":"Use templates","text":"<p>The primary goal of chezmoi is to manage configuration files across multiple machines, for example your personal macOS laptop, your work Ubuntu desktop, and your work Linux laptop. You will want to keep much configuration the same across these, but also need machine-specific configurations for email addresses, credentials, etc. chezmoi achieves this functionality by using <code>text/template</code> for the source state where needed.</p> <p>For example, your home <code>~/.gitconfig</code> on your personal machine might look like:</p> ~/.gitconfig<pre><code>[user]\n    email = \"me@home.org\"\n</code></pre> <p>Whereas at work it might be:</p> ~/.gitconfig<pre><code>[user]\n    email = \"firstname.lastname@company.com\"\n</code></pre> <p>To handle this, on each machine create a configuration file called <code>~/.config/chezmoi/chezmoi.toml</code> defining variables that might vary from machine to machine. For example, for your home machine:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[data]\n    email = \"me@home.org\"\n</code></pre> <p>If you intend to store private data (e.g. access tokens) in <code>~/.config/chezmoi/chezmoi.toml</code>, make sure it has permissions <code>0600</code>.</p> <p>If you prefer, you can use JSON, JSONC, or YAML for your configuration file. Variable names must start with a letter and be followed by zero or more letters or digits.</p> <p>Then, add <code>~/.gitconfig</code> to chezmoi using the <code>--template</code> flag to turn it into a template:</p> <pre><code>$ chezmoi add --template ~/.gitconfig\n</code></pre> <p>You can then open the template (which will be saved in the file <code>~/.local/share/chezmoi/dot_gitconfig.tmpl</code>):</p> <pre><code>$ chezmoi edit ~/.gitconfig\n</code></pre> <p>Edit the file so it looks something like:</p> ~/.local/share/chezmoi/dot_gitconfig.tmpl<pre><code>[user]\n    email = {{ .email | quote }}\n</code></pre> <p>Templates are often used to capture machine-specific differences. For example, in your <code>~/.local/share/chezmoi/dot_bashrc.tmpl</code> you might have:</p> ~/.local/share/chezmoi/dot_bashrc.tmpl<pre><code># common config\nexport EDITOR=vi\n\n# machine-specific configuration\n{{- if eq .chezmoi.hostname \"work-laptop\" }}\n# this will only be included in ~/.bashrc on work-laptop\n{{- end }}\n</code></pre> <p>For a full list of variables, run:</p> <pre><code>$ chezmoi data\n</code></pre> <p>For more advanced usage, you can use the full power of the <code>text/template</code> language. chezmoi includes all of the text functions from sprig and its own functions for interacting with password managers.</p> <p>Templates can be executed directly from the command line, without the need to create a file on disk, with the <code>execute-template</code> command, for example:</p> <pre><code>$ chezmoi execute-template \"{{ .chezmoi.os }}/{{ .chezmoi.arch }}\"\n</code></pre> <p>This is useful when developing or debugging templates.</p> <p>Some password managers allow you to store complete files. The files can be retrieved with chezmoi's template functions. For example, if you have a file stored in 1Password with the UUID <code>uuid</code> then you can retrieve it with the template:</p> <pre><code>{{- onepasswordDocument \"uuid\" -}}\n</code></pre> <p>The <code>-</code>s inside the brackets remove any whitespace before or after the template expression, which is useful if your editor has added any newlines.</p> <p>If, after executing the template, the file contents are empty, the target file will be removed. This can be used to ensure that files are only present on certain machines. If you want an empty file to be created anyway, you will need to give it an <code>empty_</code> prefix.</p>"},{"location":"user-guide/manage-machine-to-machine-differences/#ignore-files-or-a-directory-on-different-machines","title":"Ignore files or a directory on different machines","text":"<p>For coarser-grained control of files and entire directories managed on different machines, or to exclude certain files completely, you can create <code>.chezmoiignore</code> files in the source directory. These specify a list of patterns that chezmoi should ignore, and are interpreted as templates. An example <code>.chezmoiignore</code> file might look like:</p> ~/.local/share/chezmoi/.chezmoiignore<pre><code>README.md\n{{- if ne .chezmoi.hostname \"work-laptop\" }}\n.work # only manage .work on work-laptop\n{{- end }}\n</code></pre> <p>The use of <code>ne</code> (not equal) is deliberate. What we want to achieve is \"only install <code>.work</code> if hostname is <code>work-laptop</code>\" but chezmoi installs everything by default, so we have to turn the logic around and instead write \"ignore <code>.work</code> unless the hostname is <code>work-laptop</code>\".</p> <p>Patterns can be excluded by starting the line with a <code>!</code>, for example:</p> ~/.local/share/chezmoi/.chezmoiignore<pre><code>dir/f*\n!dir/foo\n</code></pre> <p>will ignore all files beginning with an <code>f</code> in <code>dir</code> except for <code>dir/foo</code>.</p> <p>You can see what files chezmoi ignores with the command</p> <pre><code>$ chezmoi ignored\n</code></pre>"},{"location":"user-guide/manage-machine-to-machine-differences/#handle-different-file-locations-on-different-systems-with-the-same-contents","title":"Handle different file locations on different systems with the same contents","text":"<p>If you want to have the same file contents in different locations on different systems, but maintain only a single file in your source state, you can use a shared template.</p> <p>Create the common file in the <code>.chezmoitemplates</code> directory in the source state. For example, create <code>.chezmoitemplates/file.conf</code>. The contents of this file are available in templates with the <code>template $NAME .</code> function where <code>$NAME</code> is the name of the file (<code>.</code> passes the current data to the template code in <code>file.conf</code>; see https://pkg.go.dev/text/template#hdr-Actions for details).</p> <p>Then create files for each system, for example <code>Library/Application Support/App/file.conf.tmpl</code> for macOS and <code>dot_config/app/file.conf.tmpl</code> for Linux. Both template files should contain <code>{{- template \"file.conf\" . -}}</code>.</p> <p>Finally, tell chezmoi to ignore files where they are not needed by adding lines to your <code>.chezmoiignore</code> file, for example:</p> ~/.local/share/chezmoi/.chezmoiignore<pre><code>{{ if ne .chezmoi.os \"darwin\" }}\nLibrary/Application Support/App/file.conf\n{{ end }}\n{{ if ne .chezmoi.os \"linux\" }}\n.config/app/file.conf\n{{ end }}\n</code></pre>"},{"location":"user-guide/manage-machine-to-machine-differences/#use-completely-different-dotfiles-on-different-machines","title":"Use completely different dotfiles on different machines","text":"<p>chezmoi's template functionality allows you to change a file's contents based on any variable. For example, if you want <code>~/.bashrc</code> to be different on Linux and macOS you would create a file in the source state called <code>dot_bashrc.tmpl</code> containing:</p> ~/.local/share/chezmoi/dot_bashrc.tmpl<pre><code>{{ if eq .chezmoi.os \"darwin\" -}}\n# macOS .bashrc contents\n{{ else if eq .chezmoi.os \"linux\" -}}\n# Linux .bashrc contents\n{{ end -}}\n</code></pre> <p>However, if the differences between the two versions are so large that you'd prefer to use completely separate files in the source state, you can achieve this with the <code>include</code> template function.</p> <p>Create the following files:</p> ~/.local/share/chezmoi/.bashrc_darwin<pre><code># macOS .bashrc contents\n</code></pre> ~/.local/share/chezmoi/.bashrc_linux<pre><code># Linux .bashrc contents\n</code></pre> ~/.local/share/chezmoi/dot_bashrc.tmpl<pre><code>{{- if eq .chezmoi.os \"darwin\" -}}\n{{-   include \".bashrc_darwin\" -}}\n{{- else if eq .chezmoi.os \"linux\" -}}\n{{-   include \".bashrc_linux\" -}}\n{{- end -}}\n</code></pre> <p>This will cause <code>~/.bashrc</code> to contain <code>~/.local/share/chezmoi/.bashrc_darwin</code> on macOS and <code>~/.local/share/chezmoi/.bashrc_linux</code> on Linux.</p> <p>If you want to use templates within your templates, then, instead, create:</p> ~/.local/share/chezmoi/.chezmoitemplates/bashrc_darwin.tmpl<pre><code># macOS .bashrc template contents\n</code></pre> ~/.local/share/chezmoi/.chezmoitemplates/bashrc_linux.tmpl<pre><code># Linux .bashrc template contents\n</code></pre> ~/.local/share/chezmoi/dot_bashrc.tmpl<pre><code>{{- if eq .chezmoi.os \"darwin\" -}}\n{{-   template \"bashrc_darwin.tmpl\" . -}}\n{{- else if eq .chezmoi.os \"linux\" -}}\n{{-   template \"bashrc_linux.tmpl\" . -}}\n{{- end -}}\n</code></pre>"},{"location":"user-guide/setup/","title":"Setup","text":""},{"location":"user-guide/setup/#understand-chezmois-files-and-directories","title":"Understand chezmoi's files and directories","text":"<p>chezmoi generates your dotfiles for your local machine. It combines two main sources of data:</p> <p>The source directory, <code>~/.local/share/chezmoi</code>, is common to all your machines, and is a clone of your dotfiles repo. Each file that chezmoi manages has a corresponding file in the source directory.</p> <p>The config file, typically <code>~/.config/chezmoi/chezmoi.toml</code> (although you can use JSON or YAML if you prefer), is specific to the local machine.</p> <p>Files whose contents are the same on all of your machines are copied verbatim from the source directory. Files which vary from machine to machine are executed as templates, typically using data from the local machine's config file to tune the final contents specific to the local machine.</p>"},{"location":"user-guide/setup/#use-a-hosted-repo-to-manage-your-dotfiles-across-multiple-machines","title":"Use a hosted repo to manage your dotfiles across multiple machines","text":"<p>chezmoi relies on your version control system and hosted repo to share changes across multiple machines. You should create a repo on the source code repository of your choice (e.g. Bitbucket, GitHub, or GitLab, many people call their repo <code>dotfiles</code>) and push the repo in the source directory here. For example:</p> <pre><code>$ chezmoi cd\n$ git remote add origin https://github.com/$GITHUB_USERNAME/dotfiles.git\n$ git push -u origin main\n$ exit\n</code></pre> <p>On another machine you can checkout this repo:</p> <pre><code>$ chezmoi init https://github.com/$GITHUB_USERNAME/dotfiles.git\n</code></pre> <p>You can then see what would be changed:</p> <pre><code>$ chezmoi diff\n</code></pre> <p>If you're happy with the changes then apply them:</p> <pre><code>$ chezmoi apply\n</code></pre> <p>The above commands can be combined into a single init, checkout, and apply:</p> <pre><code>$ chezmoi init --apply --verbose https://github.com/$GITHUB_USERNAME/dotfiles.git\n</code></pre> <p>These commands are summarized this sequence diagram:</p> sequenceDiagram     participant H as home directory     participant W as working copy     participant L as local repo     participant R as remote repo     R-&gt;&gt;W: chezmoi init &lt;repo&gt;     W--&gt;&gt;H: chezmoi diff     W-&gt;&gt;H: chezmoi apply     R-&gt;&gt;H: chezmoi init --apply &lt;repo&gt;"},{"location":"user-guide/setup/#use-a-private-repo-to-store-your-dotfiles","title":"Use a private repo to store your dotfiles","text":"<p>chezmoi supports storing your dotfiles in both public and private repos.</p> <p>chezmoi is designed so that your dotfiles repo can be public by making it easy for you to store your secrets either in your password manager, in encrypted files, or in private configuration files. Your dotfiles repo can still be private, if you choose.</p> <p>If you use a private repo for your dotfiles then you will typically need to enter your credentials (e.g. your username and password) each time you interact with the repo, for example when pulling or pushing changes. chezmoi itself does not store any credentials, but instead relies on your local git configuration for these operations.</p> <p>When using a private repo on GitHub without <code>--ssh</code>, when prompted for a password you will need to enter a GitHub personal access token. For more information on these changes, read the GitHub blog post on Token authentication requirements for Git operations</p>"},{"location":"user-guide/setup/#create-a-config-file-on-a-new-machine-automatically","title":"Create a config file on a new machine automatically","text":"<p><code>chezmoi init</code> can also create a config file automatically, if one does not already exist. If your repo contains a file called <code>.chezmoi.$FORMAT.tmpl</code> where <code>$FORMAT</code> is one of the supported config file formats (e.g. <code>json</code>, <code>jsonc</code>, <code>toml</code>, or <code>yaml</code>) then <code>chezmoi init</code> will execute that template to generate your initial config file.</p> <p>Specifically, if you have <code>.chezmoi.toml.tmpl</code> that looks like this:</p> ~/.local/share/chezmoi/.chezmoi.toml.tmpl<pre><code>{{- $email := promptStringOnce . \"email\" \"Email address\" -}}\n\n[data]\n    email = {{ $email | quote }}\n</code></pre> <p>Then <code>chezmoi init</code> will create an initial <code>chezmoi.toml</code> using this template. <code>promptStringOnce</code> is a special function that prompts the user (you) for a value if it is not already set in your <code>data</code>.</p> <p>To test this template, use <code>chezmoi execute-template</code> with the <code>--init</code> and <code>--promptString</code> flags, for example:</p> <pre><code>$ chezmoi execute-template --init --promptString email=me@home.org &lt; ~/.local/share/chezmoi/.chezmoi.toml.tmpl\n</code></pre>"},{"location":"user-guide/setup/#re-create-your-config-file","title":"Re-create your config file","text":"<p>If you change your config file template, chezmoi will warn you if your current config file was not generated from that template. You can re-generate your config file by running:</p> <pre><code>$ chezmoi init\n</code></pre> <p>If you are using any <code>prompt*</code> template functions in your config file template you will be prompted again. However, you can avoid this with the following example template logic:</p> <pre><code>{{- $email := promptStringOnce . \"email\" \"Email address\" -}}\n\n[data]\n    email = {{ $email | quote }}\n</code></pre> <p>This will cause chezmoi use the <code>email</code> variable from your <code>data</code> and fallback to <code>promptString</code> only if it is not set.</p>"},{"location":"user-guide/templating/","title":"Templating","text":""},{"location":"user-guide/templating/#introduction","title":"Introduction","text":"<p>Templates are used to change the contents of a file depending on the environment. For example, you can use the hostname of the machine to create different configurations on different machines.</p> <p>chezmoi uses the <code>text/template</code> syntax from Go extended with text template functions from <code>sprig</code>.</p> <p>When reading files from the source state, chezmoi interprets them as a template if either of the following is true:</p> <ul> <li> <p>The file name has a <code>.tmpl</code> suffix.</p> </li> <li> <p>The file is in the <code>.chezmoitemplates</code> directory, or a subdirectory of   <code>.chezmoitemplates</code>.</p> </li> </ul>"},{"location":"user-guide/templating/#template-data","title":"Template data","text":"<p>chezmoi provides a variety of template variables. For a full list, run</p> <pre><code>$ chezmoi data\n</code></pre> <p>These come from a variety of sources (later data overwrite earlier ones):</p> <ul> <li> <p>Variables populated by chezmoi are in <code>.chezmoi</code>, for example <code>.chezmoi.os</code>.</p> </li> <li> <p>Variables created by you in the <code>.chezmoidata.$FORMAT</code> configuration file.   The various supported formats (<code>json</code>, <code>jsonc</code>, <code>toml</code> and <code>yaml</code>) are read in   alphabetical order.</p> </li> <li> <p>Variables created by you in the <code>data</code> section of the configuration file.</p> </li> </ul> <p>Furthermore, chezmoi provides a variety of functions to retrieve data at runtime from password managers, environment variables, and the filesystem.</p>"},{"location":"user-guide/templating/#creating-a-template-file","title":"Creating a template file","text":"<p>There are several ways to create a template:</p> <ul> <li> <p>When adding a file for the first time, pass the <code>--template</code> argument, for example:</p> <pre><code>$ chezmoi add --template ~/.zshrc\n</code></pre> </li> <li> <p>If a file is already managed by chezmoi, but is not a template, you can make   it a template by running, for example:</p> <pre><code>$ chezmoi chattr +template ~/.zshrc\n</code></pre> </li> <li> <p>You can create a template manually in the source directory by giving it a   <code>.tmpl</code> extension, for example:</p> <pre><code>$ chezmoi cd\n$ $EDITOR dot_zshrc.tmpl\n</code></pre> </li> <li> <p>Templates in <code>.chezmoitemplates</code> must be created manually, for example:</p> <pre><code>$ chezmoi cd\n$ mkdir -p .chezmoitemplates\n$ cd .chezmoitemplates\n$ $EDITOR mytemplate\n</code></pre> </li> </ul>"},{"location":"user-guide/templating/#editing-a-template-file","title":"Editing a template file","text":"<p>The easiest way to edit a template is to use <code>chezmoi edit</code>, for example:</p> <pre><code>$ chezmoi edit ~/.zshrc\n</code></pre> <p>This will open the source file for <code>~/.zshrc</code> in <code>$EDITOR</code>. When you quit the editor, chezmoi will check the template syntax.</p> <p>If you want the changes you make to be immediately applied after you quit the editor, use the <code>--apply</code> option, for example:</p> <pre><code>$ chezmoi edit --apply ~/.zshrc\n</code></pre>"},{"location":"user-guide/templating/#testing-templates","title":"Testing templates","text":"<p>Templates can be tested with the <code>chezmoi execute-template</code> command which treats each of its arguments as a template and executes it. This can be useful for testing small fragments of templates, for example:</p> <pre><code>$ chezmoi execute-template '{{ .chezmoi.hostname }}'\n</code></pre> <p>If there are no arguments, <code>chezmoi execute-template</code> will read the template from the standard input. This can be useful for testing whole files, for example:</p> <pre><code>$ chezmoi cd\n$ chezmoi execute-template &lt; dot_zshrc.tmpl\n</code></pre>"},{"location":"user-guide/templating/#template-syntax","title":"Template syntax","text":"<p>Template actions are written inside double curly brackets, <code>{{</code> and <code>}}</code>. Actions can be variables, pipelines, or control statements. Text outside actions is copied literally.</p> <p>Variables are written literally, for example:</p> <pre><code>{{ .chezmoi.hostname }}\n</code></pre> <p>Conditional expressions can be written using <code>if</code>, <code>else if</code>, <code>else</code>, and <code>end</code>, for example:</p> <pre><code>{{ if eq .chezmoi.os \"darwin\" }}\n# darwin\n{{ else if eq .chezmoi.os \"linux\" }}\n# linux\n{{ else }}\n# other operating system\n{{ end }}\n</code></pre> <p>For a full description of the template syntax, see the <code>text/template</code> documentation.</p>"},{"location":"user-guide/templating/#removing-whitespace","title":"Removing whitespace","text":"<p>For formatting reasons you might want to leave some whitespace after or before the template code. This whitespace will remain in the final file, which you might not want.</p> <p>A solution for this is to place a minus sign and a space next to the brackets. So <code>{{-</code> for the left brackets and <code>-}}</code> for the right brackets. Here's an example:</p> <pre><code>HOSTNAME={{- .chezmoi.hostname }}\n</code></pre> <p>This will result in</p> <pre><code>HOSTNAME=myhostname\n</code></pre> <p>Notice that this will remove any number of tabs, spaces and even newlines and carriage returns.</p>"},{"location":"user-guide/templating/#debugging-templates","title":"Debugging templates","text":"<p>If there is a mistake in one of your templates and you want to debug it, chezmoi can help you. You can use this subcommand to test and play with the examples in these docs as well.</p> <p>There is a very handy subcommand called <code>execute-template</code>. chezmoi will interpret any data coming from stdin or at the end of the command. It will then interpret all templates and output the result to stdout. For example with the command:</p> <pre><code>$ chezmoi execute-template '{{ .chezmoi.os }}/{{ .chezmoi.arch }}'\n</code></pre> <p>chezmoi will output the current OS and architecture to stdout.</p> <p>You can also feed the contents of a file to this command by typing:</p> <pre><code>$ cat foo.txt | chezmoi execute-template\n</code></pre>"},{"location":"user-guide/templating/#simple-logic","title":"Simple logic","text":"<p>A very useful feature of chezmoi templates is the ability to perform logical operations.</p> <pre><code># common config\nexport EDITOR=vi\n\n# machine-specific configuration\n{{- if eq .chezmoi.hostname \"work-laptop\" }}\n# this will only be included in ~/.bashrc on work-laptop\n{{- end }}\n</code></pre> <p>In this example chezmoi will look at the hostname of the machine and if that is equal to \"work-laptop\", the text between the <code>if</code> and the <code>end</code> will be included in the result.</p>"},{"location":"user-guide/templating/#boolean-functions","title":"Boolean functions","text":"Function Return value <code>eq</code> Returns true if the first argument is equal to any of the other arguments <code>not</code> Returns the boolean negation of its single argument <code>and</code> Returns the boolean AND of its arguments by returning the first empty argument or the last argument, that is, <code>and x y</code> behaves as <code>if x then y else x</code>. All the arguments are evaluated <code>or</code> Returns the boolean OR of its arguments by returning the first non-empty argument or the last argument, that is, <code>or x y</code> behaves as <code>if x then x else y</code> All the arguments are evaluated"},{"location":"user-guide/templating/#integer-functions","title":"Integer functions","text":"Function Return value <code>len</code> Returns the integer length of its argument <code>eq</code> Returns the boolean truth of arg1 == arg2 <code>ne</code> Returns the boolean truth of arg1 != arg2 <code>lt</code> Returns the boolean truth of arg1 &lt; arg2 <code>le</code> Returns the boolean truth of arg1 &lt;= arg2 <code>gt</code> Returns the boolean truth of arg1 &gt; arg2 <code>ge</code> Returns the boolean truth of arg1 &gt;= arg2"},{"location":"user-guide/templating/#more-complicated-logic","title":"More complicated logic","text":"<p>Up until now, we have only seen if statements that can handle at most two variables. In this part we will see how to create more complicated expressions.</p> <p>You can also create more complicated expressions. The <code>eq</code> command can accept multiple arguments. It will check if the first argument is equal to any of the other arguments.</p> <pre><code>{{ if eq \"foo\" \"foo\" \"bar\" }}hello{{end}}\n{{ if eq \"foo\" \"bar\" \"foo\" }}hello{{end}}\n{{ if eq \"foo\" \"bar\" \"bar\" }}hello{{end}}\n</code></pre> <p>The first two examples will output <code>hello</code> and the last example will output nothing.</p> <p>The operators <code>or</code> and <code>and</code> can also accept multiple arguments.</p>"},{"location":"user-guide/templating/#chaining-operators","title":"Chaining operators","text":"<p>You can perform multiple checks in one if statement.</p> <pre><code>{{ if (and (eq .chezmoi.os \"linux\") (ne .email \"me@home.org\")) }}\n...\n{{ end }}\n</code></pre> <p>This will check if the operating system is Linux and the configured email is not the home email. The brackets are needed here, because otherwise all the arguments will be give to the <code>and</code> command.</p> <p>This way you can chain as many operators together as you like.</p>"},{"location":"user-guide/templating/#helper-functions","title":"Helper functions","text":"<p>chezmoi has added multiple helper functions to the <code>text/template</code> syntax.</p> <p>chezmoi includes <code>sprig</code>, an extension to the <code>text/template</code> format that contains many helper functions. Take a look at their documentation for a list.</p> <p>chezmoi adds a few functions of its own as well. Take a look at the reference for complete list.</p>"},{"location":"user-guide/templating/#template-variables","title":"Template variables","text":"<p>chezmoi defines a few useful templates variables that depend on the system you are currently on. A list of the variables defined by chezmoi can be found here.</p> <p>There are, however more variables than that. To view the variables available on your system, execute:</p> <pre><code>$ chezmoi data\n</code></pre> <p>This outputs the variables in JSON format by default. To access the variable <code>chezmoi.kernel.osrelease</code> in a template, use</p> <pre><code>{{ .chezmoi.kernel.osrelease }}\n</code></pre> <p>This way you can also access the variables you defined yourself.</p>"},{"location":"user-guide/templating/#using-chezmoitemplates","title":"Using <code>.chezmoitemplates</code>","text":"<p>Files in the <code>.chezmoitemplates</code> subdirectory are parsed as templates and are available to be included in other templates using the <code>template</code> action with a name equal to their relative path to the <code>.chezmoitemplates</code> directory.</p> <p>By default, such templates will be executed with <code>nil</code> data. If you want to access template variables (e.g. <code>.chezmoi.os</code>) in the template you must pass the data explicitly.</p> <p>For example:</p> <pre><code>.chezmoitemplates/part.tmpl:\n{{ if eq .chezmoi.os \"linux\" }}\n# linux config\n{{ else }}\n# non-linux config\n{{ end }}\n\ndot_file.tmpl:\n{{ template \"part.tmpl\" . }}\n</code></pre>"},{"location":"user-guide/templating/#using-chezmoitemplates-for-creating-similar-files","title":"Using <code>.chezmoitemplates</code> for creating similar files","text":"<p>When you have multiple similar files, but they aren't quite the same, you can create a template file in the directory <code>.chezmoitemplates</code>. This template can be inserted in other template files, for example:</p> <p>Create <code>.local/share/chezmoi/.chezmoitemplates/alacritty</code>:</p> <pre><code>some: config\nfontsize: {{ . }}\nmore: config\n</code></pre> <p>Notice the file name doesn't have to end in <code>.tmpl</code>, as all files in the directory <code>.chezmoitemplates</code> are interpreted as templates.</p> <p>Create other files using the template <code>~/.local/share/chezmoi/small-font.yml.tmpl</code></p> <pre><code>{{- template \"alacritty\" 12 -}}\n</code></pre> <p><code>~/.local/share/chezmoi/big-font.yml.tmpl</code></p> <pre><code>{{- template \"alacritty\" 18 -}}\n</code></pre> <p>Here we're calling the shared <code>alacritty</code> template with the font size as the <code>.</code> value passed in. You can test this with <code>chezmoi cat</code>:</p> <pre><code>$ chezmoi cat ~/small-font.yml\nsome: config\nfontsize: 12\nmore: config\n$ chezmoi cat ~/big-font.yml\nsome: config\nfontsize: 18\nmore: config\n</code></pre>"},{"location":"user-guide/templating/#passing-multiple-arguments","title":"Passing multiple arguments","text":"<p>In the example above only one arguments is passed to the template. To pass more arguments to the template, you can do it in two ways.</p>"},{"location":"user-guide/templating/#via-the-config-file","title":"Via the config file","text":"<p>This method is useful if you want to use the same template arguments multiple times, because you don't specify the arguments every time. Instead you specify them in the file <code>~/.config/chezmoi/chezmoi.toml</code>:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[data.alacritty.big]\n    fontsize = 18\n    font = \"DejaVu Serif\"\n[data.alacritty.small]\n    fontsize = 12\n    font = \"DejaVu Sans Mono\"\n</code></pre> <p>Use the variables in <code>~/.local/share/chezmoi/.chezmoitemplates/alacritty</code>:</p> ~/.local/share/chezmoi/.chezmoitemplates/alacritty<pre><code>some: config\nfontsize: {{ .fontsize }}\nfont: {{ .font }}\nmore: config\n</code></pre> <p>And connect them with <code>~/.local/share/chezmoi/small-font.yml.tmpl</code>:</p> ~/.local/share/chezmoi/small-font.yml.tmpl<pre><code>{{- template \"alacritty\" .alacritty.small -}}\n</code></pre> <p>At the moment, this means that you'll have to duplicate the alacritty data in the config file on every machine, but a feature will be added to avoid this.</p>"},{"location":"user-guide/templating/#by-passing-a-dictionary","title":"By passing a dictionary","text":"<p>Using the same alacritty configuration as above, you can pass the arguments to it with a dictionary, for example <code>~/.local/share/chezmoi/small-font.yml.tmpl</code>:</p> ~/.local/share/chezmoi/small-font.yml.tmpl<pre><code>{{- template \"alacritty\" dict \"fontsize\" 12 \"font\" \"DejaVu Sans Mono\" -}}\n</code></pre>"},{"location":"user-guide/use-scripts-to-perform-actions/","title":"Use scripts to perform actions","text":""},{"location":"user-guide/use-scripts-to-perform-actions/#understand-how-scripts-work","title":"Understand how scripts work","text":"<p>chezmoi supports scripts, which are executed when you run <code>chezmoi apply</code>. The scripts can either run every time you run <code>chezmoi apply</code>, only when their contents have changed, or only if they have not been run before.</p> <p>In verbose mode, the script's contents will be printed before executing it. In dry-run mode, the script is not executed.</p> <p>Scripts are any file in the source directory with the prefix <code>run_</code>, and are executed in alphabetical order. Scripts that should be run whenever their contents change have the <code>run_onchange_</code> prefix. Scripts that should only be run if they have not been run before have the prefix <code>run_once_</code>.</p> <p>Scripts break chezmoi's declarative approach, and as such should be used sparingly. Any script should be idempotent, even <code>run_onchange_</code> and <code>run_once_</code> scripts.</p> <p>Scripts are normally run while chezmoi updates your dotfiles. To configure scripts to run before or after your dotfiles are updated use the <code>before_</code> and <code>after_</code> attributes respectively, e.g. <code>run_once_before_install-password-manager.sh</code>.</p> <p>Scripts must be created manually in the source directory, typically by running <code>chezmoi cd</code> and then creating a file with a <code>run_</code> prefix. There is no need to set the executable bit on the script.</p> <p>Scripts with the suffix <code>.tmpl</code> are treated as templates, with the usual template variables available. If, after executing the template, the result is only whitespace or an empty string, then the script is not executed. This is useful for disabling scripts.</p> <p>When chezmoi executes a script, it first generates the script contents in a file in a temporary directory with the executable bit set, and then executes the contents with <code>exec(3)</code>. Consequently, the script's contents must either include a <code>#!</code> line or be an executable binary.</p>"},{"location":"user-guide/use-scripts-to-perform-actions/#set-environment-variables","title":"Set environment variables","text":"<p>You can set extra environment variables for your scripts in the <code>scriptEnv</code> section of your config file. For example, to set the <code>MY_VAR</code> environment variable to <code>my_value</code>, specify:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[scriptEnv]\n    MY_VAR = \"my_value\"\n</code></pre> <p>chezmoi sets a number of environment variables when running scripts, including <code>CHEZMOI=1</code> and common template data like <code>CHEZMOI_OS</code> and <code>CHEZMOI_ARCH</code>.</p> <p>Note</p> <p>By default, <code>chezmoi diff</code> will print the contents of scripts that would be run by <code>chezmoi apply</code>. To exclude scripts from the output of <code>chezmoi diff</code>, set <code>diff.exclude</code> in your configuration file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[diff]\n    exclude = [\"scripts\"]\n</code></pre> <p>Similarly, <code>chezmoi status</code> will print the names of the scripts that it will execute with the status <code>R</code>. This can similarly disabled by setting <code>status.exclude</code> to <code>[\"scripts\"]</code> in your configuration file.</p>"},{"location":"user-guide/use-scripts-to-perform-actions/#install-packages-with-scripts","title":"Install packages with scripts","text":"<p>Change to the source directory and create a file called <code>run_onchange_install-packages.sh</code>:</p> <pre><code>$ chezmoi cd\n$ $EDITOR run_onchange_install-packages.sh\n</code></pre> <p>In this file create your package installation script, e.g.</p> <pre><code>#!/bin/sh\nsudo apt install ripgrep\n</code></pre> <p>The next time you run <code>chezmoi apply</code> or <code>chezmoi update</code> this script will be run. As it has the <code>run_onchange_</code> prefix, it will not be run again unless its contents change, for example if you add more packages to be installed.</p> <p>This script can also be a template. For example, if you create <code>run_onchange_install-packages.sh.tmpl</code> with the contents:</p> ~/.local/share/chezmoi/run_onchange_install-packages.sh.tmpl<pre><code>{{ if eq .chezmoi.os \"linux\" -}}\n#!/bin/sh\nsudo apt install ripgrep\n{{ else if eq .chezmoi.os \"darwin\" -}}\n#!/bin/sh\nbrew install ripgrep\n{{ end -}}\n</code></pre> <p>This will install <code>ripgrep</code> on both Debian/Ubuntu Linux systems and macOS.</p>"},{"location":"user-guide/use-scripts-to-perform-actions/#run-a-script-when-the-contents-of-another-file-changes","title":"Run a script when the contents of another file changes","text":"<p>chezmoi's <code>run_</code> scripts are run every time you run <code>chezmoi apply</code>, whereas <code>run_onchange_</code> scripts are run only when their contents have changed, after executing them as templates. You can use this to cause a <code>run_onchange_</code> script to run when the contents of another file has changed by including a checksum of the other file's contents in the script.</p> <p>For example, if your dconf settings are stored in <code>dconf.ini</code> in your source directory then you can make <code>chezmoi apply</code> only load them when the contents of <code>dconf.ini</code> has changed by adding the following script as <code>run_onchange_dconf-load.sh.tmpl</code>:</p> ~/.local/share/chezmoi/run_onchange_dconf-load.sh.tmpl<pre><code>#!/bin/bash\n\n# dconf.ini hash: {{ include \"dconf.ini\" | sha256sum }}\ndconf load / &lt; {{ joinPath .chezmoi.sourceDir \"dconf.ini\" | quote }}\n</code></pre> <p>As the SHA256 sum of <code>dconf.ini</code> is included in a comment in the script, the contents of the script will change whenever the contents of <code>dconf.ini</code> are changed, so chezmoi will re-run the script whenever the contents of <code>dconf.ini</code> change.</p> <p>In this example you should also add <code>dconf.ini</code> to <code>.chezmoiignore</code> so chezmoi does not create <code>dconf.ini</code> in your home directory.</p>"},{"location":"user-guide/use-scripts-to-perform-actions/#clear-the-state-of-all-run_onchange_-and-run_once_-scripts","title":"Clear the state of all <code>run_onchange_</code> and <code>run_once_</code> scripts","text":"<p>chezmoi stores whether and when <code>run_onchange_</code> and <code>run_once_</code> scripts have been run in its persistent state.</p> <p>To clear the state of <code>run_onchange_</code> scripts, run:</p> <pre><code>$ chezmoi state delete-bucket --bucket=entryState\n</code></pre> <p>To clear the state of <code>run_once_</code> scripts, run:</p> <pre><code>$ chezmoi state delete-bucket --bucket=scriptState\n</code></pre>"},{"location":"user-guide/advanced/customize-your-source-directory/","title":"Customize your source directory","text":""},{"location":"user-guide/advanced/customize-your-source-directory/#use-a-subdirectory-of-your-dotfiles-repo-as-the-root-of-the-source-state","title":"Use a subdirectory of your dotfiles repo as the root of the source state","text":"<p>By default, chezmoi uses the root of your dotfiles repo as the root of the source state. If your source state contains many entries in its root, then your target directory (usually your home directory) will in turn be filled with many entries in its root as well. You can reduce the number of entries by keeping <code>.chezmoiignore</code> up to date, but this can become tiresome.</p> <p>Instead, you can specify that chezmoi should read the source state from a subdirectory of the source directory instead by creating a file called <code>.chezmoiroot</code> containing the relative path to this subdirectory.</p> <p>For example, given:</p> ~/.local/share/chezmoi/.chezmoiroot<pre><code>home\n</code></pre> <p>Then chezmoi will read the source state from the <code>home</code> subdirectory of your source directory, for example the desired state of <code>~/.gitconfig</code> will be read from <code>~/.local/share/chezmoi/home/dot_gitconfig</code> (instead of <code>~/.local/share/chezmoi/dot_gitconfig</code>).</p> <p>When migrating an existing chezmoi dotfiles repo to use <code>.chezmoiroot</code> you will need to move the relevant files in to the new root subdirectory manually. You do not need to move files that are ignored by chezmoi in all cases (i.e. are listed in <code>.chezmoiignore</code> when executed as a template on all machines), and you can afterwards remove their entries from <code>home/.chezmoiignore</code>.</p>"},{"location":"user-guide/advanced/customize-your-source-directory/#use-a-different-version-control-system-to-git","title":"Use a different version control system to git","text":"<p>Although chezmoi is primarily designed to use a git repo for the source state, it does not require git and can be used with other version control systems, such as fossil or pijul.</p> <p>The version control system is used in only three places:</p> <ul> <li><code>chezmoi init</code> will use <code>git clone</code> to clone the source repo if it does not   already exist.</li> <li><code>chezmoi update</code> will use <code>git pull</code> by default to pull the latest changes.</li> <li>chezmoi's auto add, commit, and push functionality use <code>git status</code>, <code>git   add</code>, <code>git commit</code> and <code>git push</code>.</li> </ul> <p>Using a different version control system (VCS) to git can be achieved in two ways.</p> <p>Firstly, if your VCS is compatible with git's CLI, then you can set the <code>git.command</code> configuration variable to your VCS command and set <code>useBuiltinGit</code> to <code>false</code>.</p> <p>Otherwise, you can use your VCS to create the source directory before running <code>chezmoi init</code>, for example:</p> <pre><code>$ fossil clone https://dotfiles.example.com/ dotfiles.fossil\n$ mkdir -p .local/share/chezmoi/.git\n$ cd .local/share/chezmoi\n$ fossil open ~/dotfiles.fossil\n$ chezmoi init --apply\n</code></pre> <p>Note</p> <p>The creation of an empty <code>.git</code> directory in the source directory is required for chezmoi to be able to identify the work tree.</p> <p>For updates, you can set the <code>update.command</code> and <code>update.args</code> configuration variables and <code>chezmoi update</code> will use these instead of <code>git pull</code>, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[update]\n    command = \"fossil\"\n    args = [\"update\"]\n</code></pre> <p>Currently, it is not possible to override the auto add, commit, and push behavior for non-git VCSs, so you will have to commit changes manually, for example:</p> <pre><code>$ chezmoi cd\n$ fossil add .\n$ fossil commit\n</code></pre>"},{"location":"user-guide/advanced/install-packages-declaratively/","title":"Install packages declaratively","text":"<p>chezmoi uses a declarative approach for the contents of dotfiles, but package installation requires running imperative commands. However, you can simulate declarative package installation with a combination of a <code>.chezmoidata</code> file and a <code>run_onchange_</code> script.</p> <p>The following example uses homebrew on macOS, but should be adaptable to other operating systems and package managers.</p> <p>First, create <code>.chezmoidata/packages.yaml</code> declaring the packages that you want installed, for example:</p> ~/.local/share/chezmoi/.chezmoidata/packages.yaml<pre><code>packages:\n  darwin:\n    brews:\n    - 'git'\n    casks:\n    - 'google-chrome'\n</code></pre> <p>Second, create a <code>run_onchange_darwin-install-packages.sh.tmpl</code> script that uses the package manager to install those packages, for example:</p> ~/.local/share/chezmoi/run_onchange_darwin-install-packages.sh.tmpl<pre><code>{{ if eq .chezmoi.os \"darwin\" -}}\n#!/bin/bash\n\nbrew bundle --no-lock --file=/dev/stdin &lt;&lt;EOF\n{{ range .packages.darwin.brews -}}\nbrew {{ . | quote }}\n{{ end -}}\n{{ range .packages.darwin.casks -}}\ncask {{ . | quote }}\n{{ end -}}\nEOF\n{{ end -}}\n</code></pre> <p>Now, when you run <code>chezmoi apply</code>, chezmoi will execute the <code>install-packages.sh</code> script with when the list of packages defined in <code>.chezmoidata/packages.yaml</code> changes.</p>"},{"location":"user-guide/advanced/install-your-password-manager-on-init/","title":"Install your password manager on init","text":"<p>Warning</p> <p>The approach described here is experimental and may change in a future version of chezmoi. If you use this, please contribute to the discussion.</p> <p>If you use a password manager to store your secrets then you may need to install your password manager after you have run <code>chezmoi init</code> on a new machine but before <code>chezmoi init --apply</code> or <code>chezmoi apply</code> executes your <code>run_before_</code> scripts.</p> <p>chezmoi provides a <code>hooks.read-source-state.pre</code> hook that allows you to modify your system after <code>chezmoi init</code> has cloned your dotfile repo but before chezmoi has read the source state. This is the perfect time to install your password manager as you can assume that <code>~/.local/share/chezmoi</code> is populated but has not yet been read.</p> <p>First, write your password manager install hook. chezmoi executes this hook every time any command reads the source state so the hook should terminate as quickly as possible if there is no work to do.</p> <p>This hook is not a template so you cannot use template variables and must instead detect the system you are running on yourself.</p> <p>For example:</p> ~/.local/share/chezmoi/.install-password-manager.sh<pre><code>#!/bin/sh\n\n# exit immediately if password-manager-binary is already in $PATH\ntype password-manager-binary &gt;/dev/null 2&gt;&amp;1 &amp;&amp; exit\n\ncase \"$(uname -s)\" in\nDarwin)\n    # commands to install password-manager-binary on Darwin\n    ;;\nLinux)\n    # commands to install password-manager-binary on Linux\n    ;;\n*)\n    echo \"unsupported OS\"\n    exit 1\n    ;;\nesac\n</code></pre> <p>Note</p> <p>The leading <code>.</code> in <code>.install-password-manager.sh</code> is important because it tells chezmoi to ignore <code>.install-password-manager.sh</code> when declaring the state of files in your home directory.</p> <p>Finally, tell chezmoi to run your password manager install hook before reading the source state:</p> .config/chezmoi/chezmoi.toml<pre><code>[hooks.read-source-state.pre]\n    command = \".local/share/chezmoi/.install-password-manager.sh\"\n</code></pre>"},{"location":"user-guide/advanced/migrate-away-from-chezmoi/","title":"Migrate away from chezmoi","text":"<p>chezmoi provides several mechanisms to help you move to an alternative dotfile manager (or even no dotfile manager at all) in the future:</p> <p>chezmoi creates your dotfiles just as if you were not using a dotfile manager at all. Your dotfiles are regular files, directories, and symlinks. You can run <code>chezmoi purge</code> to delete all traces of chezmoi and then, if you're migrating to a new dotfile manager, then you can use whatever mechanism it provides to add your dotfiles to your new system.</p> <p>chezmoi has a <code>chezmoi archive</code> command that generates a tarball of your dotfiles. You can replace the contents of your dotfiles repo with the contents of the archive and you've effectively immediately migrated away from chezmoi.</p> <p>chezmoi has a <code>chezmoi dump</code> command that dumps the interpreted (target) state in a machine-readable form, so you can write scripts around chezmoi.</p>"},{"location":"user-guide/advanced/use-chezmoi-with-watchman/","title":"Use chezmoi with Watchman","text":"<p>chezmoi can be used with Watchman to automatically run <code>chezmoi apply</code> whenever your source state changes, but there are some limitations because Watchman runs actions in the background without a terminal.</p> <p>Firstly, Watchman spawns a server which runs actions when filesystems change. This server reads its environment variables when it is started, typically on the first invocation of the <code>watchman</code> command. If you use a password manager that uses environment variables to persist login sessions, then you must login to your password manager before you run the first <code>watchman</code> command, and your session might eventually time out.</p> <p>Secondly, Watchman runs processes without a terminal, and so cannot run interactive processes. For <code>chezmoi apply</code>, you can use the <code>--force</code> flag to suppress prompts to overwrite files that have been modified since chezmoi last wrote them. However, if any other part of <code>chezmoi apply</code> is interactive, for example if your password manager prompts for a password, then it will not work with Watchman.</p> <ol> <li> <p>Tell watchman to watch your source directory:</p> <pre><code>$ CHEZMOI_SOURCE_PATH=\"$(chezmoi source-path)\"\n$ watchman watch \"${CHEZMOI_SOURCE_PATH}\"\n</code></pre> </li> <li> <p>Tell watchman to run <code>chezmoi apply --force</code> whenever your source directory changes:</p> <pre><code>$ watchman -j &lt;&lt;EOT\n[\"trigger\", \"${CHEZMOI_SOURCE_PATH}\", {\n  \"name\": \"chezmoi-apply\",\n  \"command\": [\"chezmoi\", \"apply\", \"--force\"]\n}]\nEOT\n</code></pre> </li> </ol> <p>You can now make changes to your source directory and Watchman will run <code>chezmoi apply --force</code> on each change.</p> <p>To shutdown the Watchman server, run:</p> <pre><code>```console\n$ watchman shutdown-server\n```\n</code></pre>"},{"location":"user-guide/encryption/","title":"Encryption","text":"<p>chezmoi supports encrypting files with age and gpg.</p> <p>Encrypted files are stored in ASCII-armored format in the source directory with the <code>encrypted_</code> attribute and are automatically decrypted when needed.</p> <p>Add files to be encrypted with the <code>--encrypt</code> flag, for example:</p> <pre><code>$ chezmoi add --encrypt ~/.ssh/id_rsa\n</code></pre> <p><code>chezmoi edit</code> will transparently decrypt the file before editing and re-encrypt it afterwards.</p>"},{"location":"user-guide/encryption/age/","title":"age","text":"<p>chezmoi supports encrypting files with age.</p> <p>Generate a key using <code>age-keygen</code>:</p> <pre><code>$ age-keygen -o $HOME/key.txt\nPublic key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\n</code></pre> <p>Specify age encryption in your configuration file, being sure to specify at least the identity and one recipient:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>encryption = \"age\"\n[age]\n    identity = \"/home/user/key.txt\"\n    recipient = \"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\"\n</code></pre> <p>chezmoi supports multiple recipients and recipient files, and multiple identities.</p>"},{"location":"user-guide/encryption/age/#symmetric-encryption","title":"Symmetric encryption","text":"<p>To use age's symmetric encryption, specify a single identity and enable symmetric encryption in your config file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>encryption = \"age\"\n[age]\n    identity = \"~/.ssh/id_rsa\"\n    symmetric = true\n</code></pre>"},{"location":"user-guide/encryption/age/#symmetric-encryption-with-a-passphrase","title":"Symmetric encryption with a passphrase","text":"<p>To use age's symmetric encryption with a passphrase, set <code>age.passphrase</code> to <code>true</code> in your config file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>encryption = \"age\"\n[age]\n    passphrase = true\n</code></pre> <p>You will be prompted for the passphrase whenever you run <code>chezmoi add --encrypt</code> and whenever chezmoi needs to decrypt the file, for example when you run <code>chezmoi apply</code>, <code>chezmoi diff</code>, or <code>chezmoi status</code>.</p>"},{"location":"user-guide/encryption/age/#builtin-age-encryption","title":"Builtin age encryption","text":"<p>chezmoi has builtin support for age encryption which is automatically used if the <code>age</code> command is not found in <code>$PATH</code>.</p> <p>Info</p> <p>The builtin age encryption does not support passphrases, symmetric encryption, or SSH keys.</p> <p>Passphrases are not supported because chezmoi needs to decrypt files regularly, e.g. when running a <code>chezmoi diff</code> or a <code>chezmoi status</code> command, not just when running <code>chezmoi apply</code>. Prompting for a passphrase each time would quickly become tiresome.</p> <p>Symmetric encryption may be supported in the future. Please open an issue if you want this.</p> <p>SSH keys are not supported as the age documentation explicitly recommends not using them:</p> <p>When integrating age into a new system, it's recommended that you only support X25519 keys, and not SSH keys. The latter are supported for manual encryption operations.</p>"},{"location":"user-guide/encryption/gpg/","title":"gpg","text":"<p>chezmoi supports encrypting files with gpg. Encrypted files are stored in the source state and automatically be decrypted when generating the target state or editing a file contents with <code>chezmoi edit</code>.</p>"},{"location":"user-guide/encryption/gpg/#asymmetric-privatepublic-key-encryption","title":"Asymmetric (private/public-key) encryption","text":"<p>Specify the encryption key to use in your configuration file (<code>chezmoi.toml</code>) with the <code>gpg.recipient</code> key:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>encryption = \"gpg\"\n[gpg]\n    recipient = \"...\"\n</code></pre> <p>chezmoi will encrypt files:</p> <pre><code>gpg --armor --recipient $RECIPIENT --encrypt\n</code></pre> <p>and store the encrypted file in the source state. The file will automatically be decrypted when generating the target state.</p>"},{"location":"user-guide/encryption/gpg/#symmetric-encryption","title":"Symmetric encryption","text":"<p>Specify symmetric encryption in your configuration file:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>encryption = \"gpg\"\n[gpg]\n    symmetric = true\n</code></pre> <p>chezmoi will encrypt files:</p> <pre><code>gpg --armor --symmetric\n</code></pre>"},{"location":"user-guide/encryption/gpg/#encrypting-files-with-a-passphrase","title":"Encrypting files with a passphrase","text":"<p>If you want to encrypt your files with a passphrase, but don't mind the passphrase being stored in plaintext on your machines, then you can use the following configuration:</p> ~/.local/share/chezmoi/.chezmoi.toml.tmpl<pre><code>{{ $passphrase := promptStringOnce . \"passphrase\" \"passphrase\" -}}\n\nencryption = \"gpg\"\n[data]\n    passphrase = {{ $passphrase | quote }}\n[gpg]\n    symmetric = true\n    args = [\"--batch\", \"--passphrase\", {{ $passphrase | quote }}, \"--no-symkey-cache\"]\n</code></pre> <p>This will prompt you for the passphrase the first time you run <code>chezmoi init</code> on a new machine, and then remember the passphrase in your configuration file.</p>"},{"location":"user-guide/encryption/gpg/#muting-gpg-output","title":"Muting gpg output","text":"<p>Since gpg sends some info messages to stderr instead of stdout, you will see some output even if you redirect stdout to <code>/dev/null</code>.</p> <p>You can mute this by adding <code>--quiet</code> to the <code>gpg.args</code> key in your configuration:</p> ~/.local/share/chezmoi/.chezmoi.toml.tmpl<pre><code>[gpg]\n    args = [\"--quiet\"]\n</code></pre>"},{"location":"user-guide/frequently-asked-questions/design/","title":"Design","text":""},{"location":"user-guide/frequently-asked-questions/design/#do-i-have-to-use-chezmoi-edit-to-edit-my-dotfiles","title":"Do I have to use <code>chezmoi edit</code> to edit my dotfiles?","text":"<p>No. <code>chezmoi edit</code> is a convenience command that has a couple of useful features, but you don't have to use it.</p> <p>You can also run <code>chezmoi cd</code> and then just edit the files in the source state directly. After saving an edited file you can run <code>chezmoi diff</code> to check what effect the changes would have, and run <code>chezmoi apply</code> if you're happy with them. If there are inconsistencies that you want to keep, then <code>chezmoi merge-all</code> will help you resolve any differences.</p> <p><code>chezmoi edit</code> provides the following useful features:</p> <ul> <li> <p>The arguments to <code>chezmoi edit</code> are the files in their target location, so you   don't have to think about source state attributes and your editor's syntax   highlighting will work.</p> </li> <li> <p>If the dotfile is encrypted in the source state, then <code>chezmoi edit</code> will   decrypt it to a private directory, open that file in your <code>$EDITOR</code>, and then   re-encrypt the file when you quit your editor. This makes encryption   transparent.</p> </li> <li> <p>With the <code>--diff</code> and <code>--apply</code> options you can see what would change and   apply those changes without having to run <code>chezmoi diff</code> or <code>chezmoi apply</code>.</p> </li> <li> <p>If you have configured git auto commits or git auto pushes then <code>chezmoi edit</code>   will create commits and push them for you.</p> </li> </ul> <p>If you chose to edit files in the source state and you're using VIM then <code>github.com/alker0/chezmoi.vim</code> gives you syntax highlighting, however you edit your files. Besides using the plugin, you can use modeline to tell VIM the correct filetype. For example, put <code># vim: filetype=zsh</code> at the top of <code>dot_zshrc</code>, and VIM will treat <code>dot_zshrc</code> as zsh file.</p>"},{"location":"user-guide/frequently-asked-questions/design/#why-doesnt-chezmoi-use-symlinks-like-gnu-stow","title":"Why doesn't chezmoi use symlinks like GNU Stow?","text":"<p>Symlinks are first class citizens in chezmoi: chezmoi supports creating them, updating them, removing them, and even more advanced features not found in other dotfile managers like having the same symlink point to different targets on different machines by using a template.</p> <p>With chezmoi, you only use a symlink where you really need a symlink, in contrast to some other dotfile managers (e.g. GNU Stow) which require the use of symlinks as a layer of indirection between a dotfile's location (which can be anywhere in your home directory) and a dotfile's content (which needs to be in a centralized directory that you manage with version control). chezmoi solves this problem in a different way.</p> <p>Instead of using a symlink to redirect from the dotfile's location to the centralized directory, chezmoi generates the dotfile as a regular file in its final location from the contents of the centralized directory. This approach allows chezmoi to provide features that are not possible when using symlinks, for example having files that are encrypted, executable, private, or templates.</p> <p>There is nothing special about dotfiles managed by chezmoi whereas dotfiles managed with GNU Stow are special because they're actually symlinks to somewhere else.</p> <p>The only advantage to using GNU Stow-style symlinks is that changes that you make to the dotfile's contents in the centralized directory are immediately visible whenever you save them, whereas chezmoi currently requires you to pass the <code>--watch</code> flag to <code>chezmoi edit</code> or set <code>edit.watch</code> to <code>true</code> in your configuration file.</p> <p>If you really want to use symlinks, then chezmoi provides a symlink mode which uses symlinks where possible. This configures chezmoi to work like GNU Stow and have it create a set of symlinks back to a central directory, but this currently requires a bit of manual work (as described in #167). chezmoi might get some automation to help (see #886 for example) but it does need some convincing use cases that demonstrate that a symlink from a dotfile's location to its contents in a central directory is better than just having the correct dotfile contents.</p>"},{"location":"user-guide/frequently-asked-questions/design/#what-are-the-limitations-of-chezmois-symlink-mode","title":"What are the limitations of chezmoi's symlink mode?","text":"<p>In symlink mode chezmoi replaces targets with symlinks to the source directory if the target is a regular file and is not encrypted, executable, private, or a template.</p> <p>Symlinks cannot be used for encrypted files because the source state contains the ciphertext, not the plaintext.</p> <p>Symlinks cannot be used for executable files as the executable bit would need to be set on the file in the source directory and chezmoi uses only regular files and directories in its source state for portability across operating systems. This may change in the future.</p> <p>Symlinks cannot be used for private files because git does not persist group and world permission bits.</p> <p>Symlinks cannot be used for templated files because the source state contains the template, not the result of executing the template.</p> <p>Symlinks cannot be used for entire directories because of chezmoi's use of attributes in the filename mangles entries in the directory, directories might have the <code>exact_</code> attribute and contain empty files, and the directory's entries might not be usable with symlinks.</p> <p>In symlink mode, running <code>chezmoi add</code> does not immediately replace the targets with a symlink. You must run <code>chezmoi apply</code> to create the symlinks.</p>"},{"location":"user-guide/frequently-asked-questions/design/#why-does-chezmoi-use-weird-filenames","title":"Why does chezmoi use weird filenames?","text":"<p>There are a number of criticisms of how chezmoi uses filenames:</p> <ol> <li>The long source file names are weird and verbose.</li> <li>Not all possible file permissions can be represented.</li> <li>Everything is in a single directory, which can end up containing many    entries.</li> </ol> <p>chezmoi's decision to store metadata in filenames is a deliberate, practical, compromise.</p> <p>Firstly, almost all programs store metadata in filenames: the filename's extension. chezmoi extends the filename to storing metadata in attributes in the filename's prefix as well.</p> <p>The <code>dot_</code> attribute makes it transparent which dotfiles are managed by chezmoi and which files are ignored by chezmoi. chezmoi ignores all files and directories that start with <code>.</code> so no special whitelists are needed for version control systems and their control files (e.g. <code>.git</code> and <code>.gitignore</code>).</p> <p>chezmoi needs per-file metadata to know how to interpret the source file's contents, for example to know when the source file is a template or if the file's contents are encrypted. By storing this metadata in the filename, the metadata is unambiguously associated with a single file and adding, updating, or removing a single file touches only a single file in the source state. Changes to the metadata (e.g. <code>chezmoi chattr +template $TARGET</code>) are simple file renames and isolated to the affected file.</p> <p>If chezmoi were to, say, use a common configuration file listing which files were templates and/or encrypted, then changes to any file would require updates to the common configuration file. Automating updates to configuration files requires a round trip (read config file, update config, write config) and it is not always possible preserve comments and formatting.</p> <p>chezmoi's attributes of <code>executable_</code>, <code>private_</code>, and <code>readonly_</code> allow the file permissions <code>0o644</code>, <code>0o755</code>, <code>0o600</code>, <code>0o700</code>, <code>0o444</code>, <code>0o555</code>, <code>0o400</code>, and <code>0o500</code> to be represented. Directories can only have permissions <code>0o755</code>, <code>0o700</code>, or <code>0o500</code>. In practice, these cover all permissions typically used for dotfiles. If this does cause a genuine problem for you, please open an issue on GitHub.</p> <p>File permissions and modes like <code>executable_</code>, <code>private_</code>, <code>readonly_</code>, and <code>symlink_</code> could also be stored in the filesystem, rather than in the filename. However, this requires the permissions to be preserved and handled by the underlying version control system and filesystem. chezmoi provides first-class support for Windows, where the <code>executable_</code> and <code>private_</code> attributes have no direct equivalents and symbolic links are not always permitted. By using regular files and directories, chezmoi avoids variations in the operating system, version control system, and filesystem making it both more robust and more portable.</p> <p>chezmoi uses a 1:1 mapping between entries in the source state and entries in the target state. This mapping is bi-directional and unambiguous.</p> <p>However, this also means that dotfiles that in the same directory in the target state must be in the same directory in the source state. In particular, every entry managed by chezmoi in the root of your home directory has a corresponding entry in the root of your source directory, which can mean that you end up with a lot of entries in the root of your source directory. This can be mitigated by using <code>.chezmoiroot</code> file.</p> <p>If chezmoi were to permit, say, multiple separate source directories (so you could, say, put <code>dot_bashrc</code> in a <code>bash/</code> subdirectory, and <code>dot_vimrc</code> in a <code>vim/</code> subdirectory, but have <code>chezmoi apply</code> map these to <code>~/.bashrc</code> and <code>~/.vimrc</code> in the root of your home directory) then the mapping between source and target states is no longer bidirectional nor unambiguous, which significantly increases complexity and requires more user interaction. For example, if both <code>bash/dot_bashrc</code> and <code>vim/dot_bashrc</code> exist, what should be the contents of <code>~/.bashrc</code>? If you run <code>chezmoi add ~/.zshrc</code>, should <code>dot_zshrc</code> be stored in the source <code>bash/</code> directory, the source <code>vim/</code> directory, or somewhere else? How does the user communicate their preferences?</p> <p>chezmoi has many users and any changes to the source state representation must be backwards-compatible.</p> <p>In summary, chezmoi's source state representation is a compromise with both advantages and disadvantages. Changes to the representation will be considered, but must meet the following criteria, in order of importance:</p> <ol> <li>Be fully backwards-compatible for existing users.</li> <li>Fix a genuine problem encountered in practice.</li> <li>Be independent of the underlying operating system, version control system,    and filesystem.</li> <li>Not add significant extra complexity to the user interface or underlying    implementation.</li> </ol>"},{"location":"user-guide/frequently-asked-questions/design/#can-chezmoi-support-multiple-sources-or-multiple-source-states","title":"Can chezmoi support multiple sources or multiple source states?","text":"<p>With some dotfile managers, dotfiles can be distributed across multiple directories or even multiple repos. For example, the user might have one directory per application, or separate repos for home and work configurations, or even separate git submodules for different applications. These can be considered multiple sources of truth for the target state. This, however, comes with complications:</p> <ol> <li> <p>Multiple sources of truth complicate the user interface. When running    <code>chezmoi add $FILE</code>, which source should <code>$FILE</code> be added to?</p> </li> <li> <p>Multiple sources of truth do not compose easily if target files overlap. For    example, if you have two sources, both of which need to set an environment    variable in <code>.bashrc</code>, how do you handle this when both, only one, or    neither source might be activated? What if the sources are mutually    exclusive, e.g. if the VIM source and the Emacs source both want to set the    <code>$EDITOR</code> environment variable?</p> </li> <li> <p>Multiple sources of truth are not always independent. Related to the    previous point, consider a source that adds an applications's configuration    files and shell completions. Should the shell completions be part of the    applications's source or of the shell's source?</p> </li> </ol> <p>chezmoi instead makes the opinionated choice to use a single source of truth, i.e. a single branch in a single git repo. Using a single source of truth avoids the inherent complexity and ambiguity of multiple sources.</p> <p>chezmoi provides mechanisms like templates (for minor differences), <code>.chezmoiignore</code> (for controlling the presence or otherwise of complete files and directories), and password manager integration (so secrets never need to be stored in a repo) handle machine-to-machine differences. Externals make it easy to pull in dotfiles from third-party sources.</p> <p>That said, if you are keen to use multiple sources of truth with chezmoi, you have a number of options with some scripting around chezmoi.</p> <p>Firstly, you can run <code>chezmoi apply</code> with different arguments to the <code>--config</code> and <code>--source</code> flags which will apply to the same destination. So that you only have to type one command you can wrap this in a shell function, for example:</p> <pre><code>chezmoi-apply() {\n    chezmoi apply --config ~/.config/chezmoi-home/chezmoi.toml \\\n                  --source ~/.local/share/chezmoi-home &amp;&amp; \\\n    chezmoi apply --config ~/.config/chezmoi-work/chezmoi.toml \\\n                  --source ~/.local/share/chezmoi-work\n}\n</code></pre> <p>If you want to generate multiple configuration files with <code>chezmoi init</code> then you will need the <code>--config-path</code> flag. For more advanced use, use the <code>--destination</code>, <code>--cache</code>, and <code>--persistent-state</code> flags.</p> <p>Secondly, you can assemble a single source state from multiple sources and then use <code>chezmoi apply</code>. For example, if you have multiple source states in subdirectories of <code>~/.dotfiles</code>:</p> <pre><code>#!/bin/bash\n\n# create a combined source state in a temporary directory\ncombined_source=\"$(mktemp -d)\"\n\n# remove the temporary source state on exit\ntrap 'rm -rf -- \"${combined_source}\"' INT TERM\n\n# copy files from multiple sources into the temporary source state\nfor source in $HOME/.dotfiles/*; do\n    cp -r \"${source}\"/* \"${combined_source}\"\ndone\n\n# apply the temporary source state\nchezmoi apply --source \"${combined_source}\"\n</code></pre> <p>Thirdly, you can use a <code>run_</code> script to invoke a second instance of chezmoi, as used by @felipecrs.</p>"},{"location":"user-guide/frequently-asked-questions/design/#why-does-chezmoi-cd-spawn-a-shell-instead-of-just-changing-directory","title":"Why does <code>chezmoi cd</code> spawn a shell instead of just changing directory?","text":"<p><code>chezmoi cd</code> spawns a shell because it is not possible for a program to change the working directory of its parent process. You can add a shell function instead:</p> <pre><code>chezmoi-cd() {\n    cd $(chezmoi source-path)\n}\n</code></pre> <p>Typing <code>chezmoi-cd</code> will then change the directory of your current shell to chezmoi's source directory.</p>"},{"location":"user-guide/frequently-asked-questions/design/#why-are-the-prompt-functions-only-available-in-config-file-templates","title":"Why are the <code>prompt*</code> functions only available in config file templates?","text":"<p>chezmoi regularly needs to execute templates to determine the target contents of files. For example, templates are executed for the <code>apply</code>, <code>diff</code>, and <code>status</code> commands, amongst many others. Having to interactively respond each time would quickly become tiresome. Therefore, chezmoi only provides these functions when generating a config file from a config file template (e.g. when you run <code>chezmoi init</code> or <code>chezmoi --init apply</code>).</p>"},{"location":"user-guide/frequently-asked-questions/design/#why-not-use-ansiblechefpuppetsalt-or-similar-to-manage-my-dotfiles-instead","title":"Why not use Ansible/Chef/Puppet/Salt, or similar to manage my dotfiles instead?","text":"<p>Whole system management tools are more than capable of managing your dotfiles, but they are large systems that entail several disadvantages. Compared to whole system management tools, chezmoi offers:</p> <ul> <li> <p>Small, focused feature set designed for dotfiles. There's simply less to learn   with chezmoi compared to whole system management tools.</p> </li> <li> <p>Easy installation and execution on every platform, without root access.   Installing chezmoi requires only copying a single binary file with no external   dependencies. Executing chezmoi just involves running the binary. In contrast,   installing and running a whole system management tool typically requires   installing a scripting language runtime, several packages, and running a   system service, all typically requiring root access.</p> </li> </ul> <p>chezmoi's focus and simple installation means that it runs almost everywhere: from tiny ARM-based Linux systems to Windows desktops, from inside lightweight containers to FreeBSD-based virtual machines in the cloud.</p>"},{"location":"user-guide/frequently-asked-questions/design/#can-i-use-chezmoi-to-manage-files-outside-my-home-directory","title":"Can I use chezmoi to manage files outside my home directory?","text":"<p>In practice, yes, you can, but this usage is strongly discouraged beyond using your system's package manager to install the packages you need.</p> <p>chezmoi is designed to operate on your home directory, and is explicitly not a full system configuration management tool. That said, there are some ways to have chezmoi manage a few files outside your home directory.</p> <p>chezmoi's scripts can execute arbitrary commands, so you can use a <code>run_</code> script that is run every time you run <code>chezmoi apply</code>, to, for example:</p> <ul> <li> <p>Make the target file outside your home directory a symlink to a file managed   by chezmoi in your home directory.</p> </li> <li> <p>Copy a file managed by chezmoi inside your home directory to the target file.</p> </li> <li> <p>Execute a template with <code>chezmoi execute-template --output=$FILENAME   template</code> where <code>$FILENAME</code> is outside the target directory.</p> </li> </ul> <p>chezmoi executes all scripts as the user executing chezmoi, so you may need to add extra privilege elevation commands like <code>sudo</code> or <code>PowerShell start -verb runas -wait</code> to your script.</p> <p>chezmoi, by default, operates on your home directory but this can be overridden with the <code>--destination</code> command line flag or by specifying <code>destDir</code> in your config file, and could even be the root directory (<code>/</code> or <code>C:\\</code>). This allows you, in theory, to use chezmoi to manage any file in your filesystem, but this usage is extremely strongly discouraged.</p> <p>If your needs extend beyond modifying a handful of files outside your target system, then existing configuration management tools like Puppet, Chef, Ansible, and Salt are much better suited - and of course can be called from a chezmoi <code>run_</code> script. Put your Puppet Manifests, Chef Recipes, Ansible Modules, and Salt Modules in a directory ignored by <code>.chezmoiignore</code> so they do not pollute your home directory.</p>"},{"location":"user-guide/frequently-asked-questions/design/#what-inspired-chezmoi","title":"What inspired chezmoi?","text":"<p>chezmoi was inspired by Puppet, but was created because Puppet is an overkill for managing your personal configuration files. The focus of chezmoi will always be personal home directory management. If your needs grow beyond that, switch to a whole system configuration management tool.</p>"},{"location":"user-guide/frequently-asked-questions/design/#where-does-the-name-chezmoi-come-from","title":"Where does the name \"chezmoi\" come from?","text":"<p>\"chezmoi\" splits to \"chez moi\" and pronounced /\u0283e\u026a mwa/ (shay-moi) meaning \"at my house\" in French. It's seven letters long, which is an appropriate length for a command that is only run occasionally. If you prefer a shorter command, add an alias to your shell configuration, for example:</p> <pre><code>alias cz=chezmoi\n</code></pre>"},{"location":"user-guide/frequently-asked-questions/encryption/","title":"Encryption","text":""},{"location":"user-guide/frequently-asked-questions/encryption/#how-do-i-configure-chezmoi-to-encrypt-files-but-only-request-a-passphrase-the-first-time-chezmoi-init-is-run","title":"How do I configure chezmoi to encrypt files but only request a passphrase the first time <code>chezmoi init</code> is run?","text":"<p>The following steps use age for encryption.</p> <p>This can be achieved with the following process:</p> <ol> <li>Generate an age private key.</li> <li>Encrypt the private key with a passphrase.</li> <li>Configure chezmoi to decrypt the private key if needed.</li> <li>Configure chezmoi to use the private key.</li> <li>Add encrypted files.</li> </ol> <p>First, change to chezmoi's root directory:</p> <pre><code>$ chezmoi cd ~\n</code></pre> <p>Generate an age private key encrypted with a passphrase in the file <code>key.txt.age</code> with the command:</p> <pre><code>$ age-keygen | age --armor --passphrase &gt; key.txt.age\nPublic key: age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl\nEnter passphrase (leave empty to autogenerate a secure one):\nConfirm passphrase:\n</code></pre> <p>Use a strong passphrase and make a note of the public key (<code>age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl</code> in this case).</p> <p>Add <code>key.txt.age</code> to <code>.chezmoiignore</code> so that chezmoi does not try to create it:</p> <pre><code>$ echo key.txt.age &gt;&gt; .chezmoiignore\n</code></pre> <p>Configure chezmoi to decrypt the passphrase-encrypted private key if needed:</p> <pre><code>$ cat &gt; run_once_before_decrypt-private-key.sh.tmpl &lt;&lt;EOF\n#!/bin/sh\n\nif [ ! -f \"${HOME}/.config/chezmoi/key.txt\" ]; then\n    mkdir -p \"${HOME}/.config/chezmoi\"\n    chezmoi age decrypt --output \"${HOME}/.config/chezmoi/key.txt\" --passphrase \"{{ .chezmoi.sourceDir }}/key.txt.age\"\n    chmod 600 \"${HOME}/.config/chezmoi/key.txt\"\nfi\nEOF\n</code></pre> <p>Configure chezmoi to use the public and private key for encryption:</p> <pre><code>$ cat &gt;&gt; .chezmoi.toml.tmpl &lt;&lt;EOF\nencryption = \"age\"\n[age]\n    identity = \"~/.config/chezmoi/key.txt\"\n    recipient = \"age193wd0hfuhtjfsunlq3c83s8m93pde442dkcn7lmj3lspeekm9g7stwutrl\"\nEOF\n</code></pre> <p><code>age.recipient</code> must be your public key from above.</p> <p>Run <code>chezmoi init --apply</code> to generate the chezmoi's config file and decrypt the private key:</p> <pre><code>$ chezmoi init --apply\nEnter passphrase:\n</code></pre> <p>At this stage everything is configured and <code>git status</code> should report:</p> <pre><code>$ git status\nOn branch main\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    .chezmoi.toml.tmpl\n    .chezmoiignore\n    key.txt.age\n    run_once_before_decrypt-private-key.sh.tmpl\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>If you're happy with the changes you can commit them. All four files should be committed.</p> <p>Add files that you want to encrypt using the <code>--encrypt</code> argument to <code>chezmoi add</code>, for example:</p> <pre><code>$ chezmoi add --encrypt ~/.ssh/id_rsa\n</code></pre> <p>When you run <code>chezmoi init</code> on a new machine you will be prompted to enter your passphrase once to decrypt <code>key.txt.age</code>. Your decrypted private key will be stored in <code>~/.config/chezmoi/key.txt</code>.</p>"},{"location":"user-guide/frequently-asked-questions/encryption/#how-to-re-encrypt-encrypted-files","title":"How to re-encrypt encrypted files","text":"<p>To rotate from an expired GPG key to its replacement, or change from GPG to age encryption, the following steps can be used:</p> <ol> <li>Make sure you have applied all encrypted files (e.g. <code>chezmoi apply</code> decrypts    files and places them in their destinations).</li> <li>Update chezmoi configuration to use the new encryption method (examples:    gpg, age,    age with one-time passphrase).</li> <li>Remove all encrypted files from the state via <code>chezmoi forget</code> or <code>chezmoi unmanage</code>.</li> <li>Add them back with <code>chezmoi add --encrypt</code>.</li> </ol>"},{"location":"user-guide/frequently-asked-questions/encryption/#example-migrate-from-gpg-to-age","title":"Example: Migrate from GPG to age","text":"<p>Update chezmoi configuration to use age encryption (with <code>chezmoi edit-config</code> or manually editing the corresponding template):</p> <pre><code>- encryption = \"gpg\"\n- [gpg]\n-     recipient = \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n+ encryption = \"age\"\n+ [age]\n+     recipient = \"age1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n+     identity = \"/home/user/key.txt\"\n</code></pre> <p>Re-encrypt the files with a script like this:</p> <pre><code>for encrypted_file in $(chezmoi managed --include encrypted --path-style absolute)\ndo\n  # optionally, add --force to avoid prompts\n  chezmoi forget \"$encrypted_file\"\n\n  # strip the .asc extension\n  decrypted_file=\"${encrypted_file%.asc}\"\n\n  chezmoi add --encrypt \"$decrypted_file\"\ndone\n</code></pre>"},{"location":"user-guide/frequently-asked-questions/general/","title":"General","text":""},{"location":"user-guide/frequently-asked-questions/general/#what-other-questions-have-been-asked-about-chezmoi","title":"What other questions have been asked about chezmoi?","text":"<p>See the issues and discussions.</p>"},{"location":"user-guide/frequently-asked-questions/general/#where-do-i-ask-a-question-that-isnt-answered-here","title":"Where do I ask a question that isn't answered here?","text":"<p>Please open an issue on GitHub or start a discussion.</p>"},{"location":"user-guide/frequently-asked-questions/general/#i-like-chezmoi-how-do-i-say-thanks","title":"I like chezmoi. How do I say thanks?","text":"<p>Thank you! chezmoi was written to scratch a personal itch, and I'm very happy that it's useful to you. Please give chezmoi a star on GitHub, and if you're happy to share your public dotfile repo then tag it with <code>chezmoi</code>.</p> <p>If you write an article or give a talk on chezmoi please inform the author (e.g. by opening an issue) so it can be added to chezmoi's articles, podcasts, and videos page.</p> <p>Contributions are very welcome and every bug report, support request, and feature request helps make chezmoi better. Thank you :)</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/","title":"Troubleshooting","text":""},{"location":"user-guide/frequently-asked-questions/troubleshooting/#how-can-i-quickly-check-for-problems-with-chezmoi-on-my-machine","title":"How can I quickly check for problems with chezmoi on my machine?","text":"<p>Run:</p> <pre><code>$ chezmoi doctor\n</code></pre> <p>Anything <code>ok</code> is fine, anything <code>warning</code> is only a problem if you want to use the related feature, and anything <code>error</code> indicates a definite problem.</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#a-specific-command-is-not-behaving-as-i-expect-how-can-i-debug-it","title":"A specific command is not behaving as I expect. How can I debug it?","text":"<p>The <code>--verbose</code> flag makes chezmoi to print extra information about what it is doing.</p> <p>The <code>--debug</code> flag makes chezmoi print very detailed step by step information.</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#the-output-of-chezmoi-diff-is-broken-and-does-not-contain-color-what-could-be-wrong","title":"The output of <code>chezmoi diff</code> is broken and does not contain color. What could be wrong?","text":"<p>By default, chezmoi's diff output includes ANSI color escape sequences (e.g. <code>ESC[37m</code>) and is piped into your pager (by default <code>less</code>). chezmoi assumes that your pager passes through the ANSI color escape sequences, as configured on many systems, but not all. If your pager does not pass through ANSI color escape sequences then you will see monochrome diff output with uninterpreted ANSI color escape sequences.</p> <p>This can typically by fixed by setting the environment variable</p> <pre><code>$ export LESS=-R\n</code></pre> <p>which instructs <code>less</code> to display \"raw\" control characters via the <code>-R</code> / <code>--RAW-CONTROL-CHARS</code> option.</p> <p>You can also set the <code>pager</code> configuration variable in your config file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>pager = \"less -R\"\n</code></pre> <p>If you have set a different pager (via the <code>pager</code> configuration variable or <code>PAGER</code> environment variable) then you must ensure that it passes through raw control characters. Alternatively, you can use the <code>--color=false</code> option to chezmoi to disable colors or the <code>--no-pager</code> option to chezmoi to disable the pager.</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#why-do-i-get-a-blank-buffer-or-empty-file-when-running-chezmoi-edit","title":"Why do I get a blank buffer or empty file when running <code>chezmoi edit</code>?","text":"<p>In this case, <code>chezmoi edit</code> typically prints a warning like:</p> <pre><code>chezmoi: warning: $EDITOR $TMPDIR/$FILENAME: returned in less than 1s\n</code></pre> <p><code>chezmoi edit</code> performs a bit of magic to improve the experience of editing files in the source state by invoking your editor with filenames in a temporary directory that look like filenames in your home directory. What's happening here is that your editor command is exiting immediately, so chezmoi thinks you've finished editing and so removes the temporary directory, but actually your editor command has forked a edit process in the background, and that edit process opens a now non-existent file.</p> <p>To fix this you have to configure your editor command to remain in the foreground until you have finished editing the file, so chezmoi knows when to remove the temporary directory.</p> VIMVSCode <p>Pass the <code>-f</code> flag, e.g. by setting the <code>edit.flags</code> configuration variable to <code>[\"-f\"]</code>, or by setting the <code>EDITOR</code> environment variable to include the <code>-f</code> flag, e.g. <code>export EDITOR=\"vim -f\"</code>.</p> <p>Pass the <code>--wait</code> flag, e.g. by setting the <code>edit.flags</code> configuration variable to <code>[\"--wait\"]</code> or by setting the <code>EDITOR</code> environment variable to include the <code>--wait</code> flag, e.g. <code>export EDITOR=\"code --wait\"</code>.</p> <p>The \"bit of magic\" that <code>chezmoi edit</code> performs includes:</p> <ul> <li> <p><code>chezmoi edit</code> makes the filename opened by your editor more closely match   the target filename, which can help your editor choose the correct syntax   highlighting. For example, if you run <code>chezmoi edit ~/.zshrc</code>, your editor is   be opened with <code>$TMPDIR/.zshrc</code> but you'll actually be editing   <code>~/.local/share/chezmoi/dot_zshrc</code>. Under the hood, chezmoi creates a   hardlink in a temporary directory to the file in your source directory, so   even though your editor thinks it's editing <code>.zshrc</code>, it is really editing   <code>dot_zshrc</code> in your source directory.</p> </li> <li> <p>If the source file is encrypted then <code>chezmoi edit</code> transparently decrypts   and re-encrypts the file for you. Specifically, chezmoi decrypts the file   into a private temporary directory and open your editor with the decrypted   file, and re-encrypts the file when you exit your editor.</p> </li> <li> <p>If the source file is a template, then <code>chezmoi edit</code> preserves the <code>.tmpl</code>   extension.</p> </li> </ul>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-makes-sshconfig-group-writeable-how-do-i-stop-this","title":"chezmoi makes <code>~/.ssh/config</code> group writeable. How do I stop this?","text":"<p>By default, chezmoi uses your system's umask when creating files. On most systems the default umask is <code>022</code> but some systems use <code>002</code>, which means that files and directories are group writeable by default.</p> <p>You can override this for chezmoi by setting the <code>umask</code> configuration variable in your configuration file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>umask = 0o022\n</code></pre> <p>Note</p> <p>This will apply to all files and directories that chezmoi manages and will ensure that none of them are group writeable. It is not currently possible to control group write permissions for individual files or directories. Please open an issue on GitHub if you need this.</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-user-lookup-userid-nnnnn-inputoutput-error","title":"chezmoi reports <code>chezmoi: user: lookup userid NNNNN: input/output error</code>","text":"<p>This is likely because the chezmoi binary you are using was statically compiled with musl and the machine you are running on uses LDAP or NIS.</p> <p>The immediate fix is to use a package built for your distribution (e.g a <code>.deb</code> or <code>.rpm</code>) which is linked against glibc and includes LDAP/NIS support instead of the statically-compiled binary.</p> <p>If the problem still persists, then please open an issue on GitHub.</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-timeout-or-chezmoi-timeout-obtaining-persistent-state-lock","title":"chezmoi reports <code>chezmoi: timeout</code> or <code>chezmoi: timeout obtaining persistent state lock</code>","text":"<p>chezmoi will report this when it is unable to lock its persistent state (<code>~/.config/chezmoi/chezmoistate.boltdb</code>), typically because another instance of chezmoi is currently running and holding the lock.</p> <p>This can happen, for example, if you have a <code>run_</code> script that invokes <code>chezmoi</code>, or are running chezmoi in another window.</p> <p>Under the hood, chezmoi uses bbolt which permits multiple simultaneous readers, but only one writer (with no readers).</p> <p>Commands that take a write lock include <code>add</code>, <code>apply</code>, <code>edit</code>, <code>forget</code>, <code>import</code>, <code>init</code>, <code>state</code>, <code>unmanage</code>, and <code>update</code>. Commands that take a read lock include <code>diff</code>, <code>status</code>, and <code>verify</code>.</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-forkexec-tmpxxxxxxxxxxxx-exec-format-error-when-executing-a-template-script","title":"chezmoi reports <code>chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: exec format error</code> when executing a template script","text":"<p>This error occurs when you have a newline before the <code>#!</code> in your script. Suppress the newline by including a <code>-</code> before the closing <code>}}</code> on the first line.</p> <p>For example, if your template script begins with</p> <pre><code>{{ if eq .chezmoi.os \"linux\" }}\n#!/bin/sh\n</code></pre> <p>change this to</p> <pre><code>{{ if eq .chezmoi.os \"linux\" -}}\n#!/bin/sh\n</code></pre>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-forkexec-tmpxxxxxxxxxxxx-permission-denied-when-executing-a-script","title":"chezmoi reports <code>chezmoi: fork/exec /tmp/XXXXXXXXXX.XX: permission denied</code> when executing a script","text":"<p>This error occurs when your temporary directory is mounted with the <code>noexec</code> option.</p> <p>As chezmoi scripts can be templates, encrypted, or both, chezmoi needs to write the final script's contents to a file so that it can be executed by the operating system. By default, chezmoi will use <code>$TMPDIR</code> for this.</p> <p>You can change the temporary directory into which chezmoi writes and executes scripts with the <code>scriptTempDir</code> configuration variable. For example, to use a subdirectory of your home directory you can use:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>scriptTempDir = \"~/tmp\"\n</code></pre>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-chezmoi-mkdir-xxxxx-no-such-file-or-directory-when-trying-to-manage-file-or-directory","title":"chezmoi reports <code>chezmoi: mkdir xxxxx: no such file or directory</code> when trying to manage file or directory","text":"<p>This error occurs when you try to add directory/file to be managed via chezmoi but the same directory is only listed in <code>.chezmoiexternal.$FORMAT</code>.</p> <p>A workaround can be applied in a such case via manually creating import directory in chezmoi source directory (typically <code>~/.local/share/chezmoi</code>) and create <code>.keep</code> file.</p> <p>For example, if <code>.chezmoiexternal.toml</code> has the configuration:</p> <pre><code>[\".config/nvim\"]\n    type = \"git-repo\"\n    url = \"https://github.com/NvChad/NvChad.git\"\n    refreshPeriod = \"168h\"\n    [\".config/nvim\".pull]\n        args = [\"--ff-only\"]\n</code></pre> <p>Now <code>chezmoi add ~/.config/direnv/direnvrc</code> will raise the error:</p> <pre><code>chezmoi: mkdir /home/&lt;user&gt;/.local/share/chezmoi/dot_config/direnv: no such file or directory\n</code></pre> <p>But the workaround can be applied:</p> <pre><code>$ chezmoi cd\n$ mkdir -p dot_config/\n$ touch dot_config/.keep\n</code></pre> <p>Now once that done <code>chezmoi add ~/.config/direnv/direnvrc</code> should work. For reference see this issue</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-read-devstdin-permission-denied-or-write-devstdout-permission-denied-when-i-redirect-standard-input-or-standard-output","title":"chezmoi reports <code>read /dev/stdin: permission denied</code> or <code>write /dev/stdout: permission denied</code> when I redirect standard input or standard output","text":"<p>This error occurs when you installed chezmoi with snap and is caused by a long-standing bug in snap.</p> <p>This is not a bug in chezmoi and there is nothing that chezmoi can do about this. However, there are two workarounds:</p> <p>Firstly, you can use alternatives to shell redirection. For standard input:</p> <pre><code>$ chezmoi $COMMAND &lt;$FILENAME       # fails\n$ cat $FILENAME | chezmoi $COMMAND  # succeeds\n</code></pre> <p>For standard output:</p> <pre><code>$ chezmoi $COMMAND &gt;$FILENAME                  # fails\n$ chezmoi $COMMAND -o $FILENAME                # succeeds\n$ chezmoi $COMMAND --output=$FILENAME          # succeeds\n$ chezmoi $COMMAND | tee $FILENAME &gt;/dev/null  # succeeds\n</code></pre> <p>Secondly, you can install chezmoi with any of the many supported install methods instead of snap.</p>"},{"location":"user-guide/frequently-asked-questions/troubleshooting/#chezmoi-reports-forkexec-no-such-file-or-directory-when-running-scripts-on-termux","title":"chezmoi reports <code>fork/exec ...: no such file or directory</code> when running scripts on Termux","text":"<p>You are likely using a hardcoded script interpreter in the shebang line of your scripts, e.g.</p> <pre><code>#!/bin/bash\n</code></pre> <p><code>/bin/bash</code> does not exist on Termux. You must update the shebang line to point to the actual bash interpreter. The easiest way to do this is make the script a template and use the <code>lookPath</code> template function, for example:</p> <pre><code>#!{{ lookPath \"bash\" }}\n</code></pre>"},{"location":"user-guide/frequently-asked-questions/usage/","title":"Usage","text":""},{"location":"user-guide/frequently-asked-questions/usage/#how-do-i-edit-my-dotfiles-with-chezmoi","title":"How do I edit my dotfiles with chezmoi?","text":"<p>There are five popular approaches:</p> <ol> <li> <p>Use <code>chezmoi edit $FILE</code>. This will open the source file for <code>$FILE</code> in your    editor, including . For extra ease, use <code>chezmoi edit --apply $FILE</code> to apply    the changes when you quit your editor, and <code>chezmoi edit --watch $FILE</code> to    apply the changes whenever you save the file.</p> </li> <li> <p>Use <code>chezmoi cd</code> and edit the files in the source directory directly. Run    <code>chezmoi diff</code> to see what changes would be made, and <code>chezmoi apply</code> to make    the changes.</p> </li> <li> <p>If your editor supports opening directories, run <code>chezmoi edit</code> with no    arguments to open the source directory.</p> </li> <li> <p>Edit the file in your home directory, and then either re-add it by running    <code>chezmoi add $FILE</code> or <code>chezmoi re-add</code>.</p> </li> <li> <p>Edit the file in your home directory, and then merge your changes with source    state by running <code>chezmoi merge $FILE</code>.</p> <p>Note</p> <p><code>re-add</code> doesn't work with templates.</p> </li> </ol>"},{"location":"user-guide/frequently-asked-questions/usage/#what-are-the-consequences-of-bare-modifications-to-the-target-files-if-my-zshrc-is-managed-by-chezmoi-and-i-edit-zshrc-without-using-chezmoi-edit-what-happens","title":"What are the consequences of \"bare\" modifications to the target files? If my <code>.zshrc</code> is managed by chezmoi and I edit <code>~/.zshrc</code> without using <code>chezmoi edit</code>, what happens?","text":"<p>Until you run <code>chezmoi apply</code> your modified <code>~/.zshrc</code> will remain in place. When you run <code>chezmoi apply</code> chezmoi will detect that <code>~/.zshrc</code> has changed since chezmoi last wrote it and prompt you what to do. You can resolve differences with a merge tool by running <code>chezmoi merge ~/.zshrc</code>.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#how-can-i-tell-what-dotfiles-in-my-home-directory-arent-managed-by-chezmoi-is-there-an-easy-way-to-have-chezmoi-manage-a-subset-of-them","title":"How can I tell what dotfiles in my home directory aren't managed by chezmoi? Is there an easy way to have chezmoi manage a subset of them?","text":"<p><code>chezmoi unmanaged</code> will list everything not managed by chezmoi. You can add entire directories with <code>chezmoi add</code>.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#how-can-i-tell-what-dotfiles-in-my-home-directory-are-currently-managed-by-chezmoi","title":"How can I tell what dotfiles in my home directory are currently managed by chezmoi?","text":"<p><code>chezmoi managed</code> will list everything managed by chezmoi.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#if-theres-a-mechanism-in-place-for-the-above-is-there-also-a-way-to-tell-chezmoi-to-ignore-specific-files-or-groups-of-files-eg-by-directory-name-or-by-glob","title":"If there's a mechanism in place for the above, is there also a way to tell chezmoi to ignore specific files or groups of files (e.g. by directory name or by glob)?","text":"<p>By default, chezmoi ignores everything that you haven't explicitly added. If you have files in your source directory that you don't want added to your destination directory when you run <code>chezmoi apply</code> add their names to a file called <code>.chezmoiignore</code> in the source state.</p> <p>Patterns are supported, and you can change what's ignored from machine to machine. The full usage and syntax is described in the reference manual.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#if-the-target-already-exists-but-is-behind-the-source-can-chezmoi-be-configured-to-preserve-the-target-version-before-replacing-it-with-one-derived-from-the-source","title":"If the target already exists, but is \"behind\" the source, can chezmoi be configured to preserve the target version before replacing it with one derived from the source?","text":"<p>Yes. Run <code>chezmoi add</code> will update the source state with the target. To see diffs of what would change, without actually changing anything, use <code>chezmoi diff</code>.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#once-ive-made-a-change-to-the-source-directory-how-do-i-commit-it","title":"Once I've made a change to the source directory, how do I commit it?","text":"<p>You have several options:</p> <ul> <li> <p><code>chezmoi cd</code> opens a shell in the source directory, where you can run your   usual version control commands, like <code>git add</code> and <code>git commit</code>.</p> </li> <li> <p><code>chezmoi git</code> runs <code>git</code> in the source   directory and pass extra arguments to the command. If you're passing any   flags, you'll need to use <code>--</code> to prevent chezmoi from consuming them, for   example <code>chezmoi git -- commit -m \"Update dotfiles\"</code>.</p> </li> <li> <p>You can configure chezmoi to automatically commit and push changes to your   source state, as described in the how-to   guide.</p> </li> </ul>"},{"location":"user-guide/frequently-asked-questions/usage/#ive-made-changes-to-both-the-destination-state-and-the-source-state-that-i-want-to-keep-how-can-i-keep-them-both","title":"I've made changes to both the destination state and the source state that I want to keep. How can I keep them both?","text":"<p><code>chezmoi merge</code> will open a merge tool to resolve differences between the source state, target state, and destination state. Copy the changes you want to keep in to the source state.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#can-i-use-chezmoi-to-manage-my-shell-history-across-multiple-machines","title":"Can I use chezmoi to manage my shell history across multiple machines?","text":"<p>No. Every change in a file managed by chezmoi requires an explicit command to record it (e.g. <code>chezmoi add</code>) or apply it somewhere else (e.g. <code>chezmoi update</code>), and is recorded as a commit in your dotfiles repository. Creating a commit every time a command is entered would quickly become cumbersome. This makes chezmoi unsuitable for sharing changes to rapidly-changing files like shell histories.</p> <p>Instead, consider using a dedicated tool for sharing shell history across multiple machines, like <code>atuin</code>. You can use chezmoi to install and configure atuin.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#how-do-i-install-pre-requisites-for-templates","title":"How do I install pre-requisites for templates?","text":"<p>If you have a template that depends on some other tool, like <code>curl</code>, you may need to install it before chezmoi renders the template.</p> <p>To do so, use a <code>run_before</code> script that is not a template. Something like:</p> run_before_00-install-pre-requisites.sh<pre><code>#!/bin/bash\n\nset -eu\n\n# Install curl if it's not already installed\nif ! command -v curl &gt;/dev/null; then\n  sudo apt update\n  sudo apt install -y curl\nfi\n</code></pre> <p>Chezmoi will make sure to execute it before templating other files.</p> <p>Tip</p> <p>You can use <code>scriptEnv</code> to inject data into your scripts through environment variables.</p>"},{"location":"user-guide/frequently-asked-questions/usage/#how-do-i-enable-shell-completions","title":"How do I enable shell completions?","text":"<p>chezmoi includes shell completions for <code>bash</code>, Fig, <code>fish</code>, PowerShell, and <code>zsh</code>. If you have installed chezmoi via your package manager then the shell completion should already be installed. Please open an issue if this is not working correctly.</p> <p>chezmoi provides a <code>completion</code> command and a <code>completion</code> template function which return the shell completions for the given shell. These can be used either as a one-off or as part of your dotfiles repo. The details of how to use these depend on your shell.</p>"},{"location":"user-guide/machines/containers-and-vms/","title":"Containers and VMs","text":"<p>You can use chezmoi to manage your dotfiles in GitHub Codespaces, Visual Studio Codespaces, and Visual Studio Code Remote - Containers.</p> <p>For a quick start, you can clone the <code>chezmoi/dotfiles</code> repository which supports Codespaces out of the box.</p> <p>The workflow is different to using chezmoi on a new machine, notably:</p> <ul> <li> <p>These systems will automatically clone your <code>dotfiles</code> repo to <code>~/dotfiles</code>,   so there is no need to clone your repo yourself.</p> </li> <li> <p>The installation script must be non-interactive.</p> </li> <li> <p>When running in a Codespace, the environment variable <code>CODESPACES</code> will be   set to <code>true</code>. You can read its value with the <code>env</code> template   function.</p> </li> </ul> <p>First, if you are using a chezmoi configuration file template, ensure that it is non-interactive when running in Codespaces, for example, <code>.chezmoi.toml.tmpl</code> might contain:</p> <pre><code>{{- $codespaces:= env \"CODESPACES\" | not | not -}}\nsourceDir = {{ .chezmoi.sourceDir | quote }}\n\n[data]\n    name = \"Your name\"\n    codespaces = {{ $codespaces }}\n{{- if $codespaces }}{{/* Codespaces dotfiles setup is non-interactive, so set an email address */}}\n    email = \"your@email.com\"\n{{- else }}{{/* Interactive setup, so prompt for an email address */}}\n    email = {{ promptString \"email\" | quote }}\n{{- end }}\n</code></pre> <p>This sets the <code>codespaces</code> template variable, so you don't have to repeat <code>(env \"CODESPACES\")</code> in your templates. It also sets the <code>sourceDir</code> configuration to the <code>--source</code> argument passed in <code>chezmoi init</code>.</p> <p>Second, create an <code>install.sh</code> script that installs chezmoi and your dotfiles and add it to <code>.chezmoiignore</code> and your dotfiles repo:</p> <pre><code>$ chezmoi generate install.sh &gt; install.sh\n$ chmod a+x install.sh\n$ echo install.sh &gt;&gt; .chezmoiignore\n$ git add install.sh .chezmoiignore\n$ git commit -m \"Add install.sh\"\n</code></pre> <p>The generated script installs the latest version of chezmoi in <code>~/.local/bin</code> if needed, and then <code>chezmoi init ...</code> invokes chezmoi to create its configuration file and initialize your dotfiles. <code>--apply</code> tells chezmoi to apply the changes immediately, and <code>--source=...</code> tells chezmoi where to find the cloned <code>dotfiles</code> repo, which in this case is the same folder in which the script is running from.</p> <p>Finally, modify any of your templates to use the <code>codespaces</code> variable if needed. For example, to install <code>vim-gtk</code> on Linux but not in Codespaces, your <code>run_once_install-packages.sh.tmpl</code> might contain:</p> <pre><code>{{- if (and (eq .chezmoi.os \"linux\") (not .codespaces)) -}}\n#!/bin/sh\nsudo apt install -y vim-gtk\n{{- end -}}\n</code></pre>"},{"location":"user-guide/machines/general/","title":"General","text":""},{"location":"user-guide/machines/general/#determine-whether-the-current-machine-is-a-laptop-or-desktop","title":"Determine whether the current machine is a laptop or desktop","text":"<p>The following template sets the <code>$chassisType</code> variable to <code>\"desktop\"</code> or <code>\"laptop\"</code> on macOS, Linux, and Windows.</p> <pre><code>{{- $chassisType := \"desktop\" }}\n{{- if eq .chezmoi.os \"darwin\" }}\n{{-   if contains \"MacBook\" (output \"sysctl\" \"-n\" \"hw.model\") }}\n{{-     $chassisType = \"laptop\" }}\n{{-   else }}\n{{-     $chassisType = \"desktop\" }}\n{{-   end }}\n{{- else if eq .chezmoi.os \"linux\" }}\n{{-   $chassisType = (output \"hostnamectl\" \"--json=short\" | mustFromJson).Chassis }}\n{{- else if eq .chezmoi.os \"windows\" }}\n{{-   $chassisType = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"if ((Get-CimInstance -Class Win32_Battery | Measure-Object).Count -gt 0) { Write-Output 'laptop' } else { Write-Output 'desktop' }\") | trim }}\n{{- end }}\n</code></pre>"},{"location":"user-guide/machines/general/#determine-how-many-cpu-cores-and-threads-the-current-machine-has","title":"Determine how many CPU cores and threads the current machine has","text":"<p>The following template sets the <code>$cpuCores</code> and <code>$cpuThreads</code> variables to the number of CPU cores and threads on the current machine respectively on macOS, Linux and Windows.</p> <pre><code>{{- $cpuCores := 1 }}\n{{- $cpuThreads := 1 }}\n{{- if eq .chezmoi.os \"darwin\" }}\n{{-   $cpuCores = (output \"sysctl\" \"-n\" \"hw.physicalcpu_max\") | trim | atoi }}\n{{-   $cpuThreads = (output \"sysctl\" \"-n\" \"hw.logicalcpu_max\") | trim | atoi }}\n{{- else if eq .chezmoi.os \"linux\" }}\n{{-   $cpuCores = (output \"sh\" \"-c\" \"lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines\") | trim | atoi }}\n{{-   $cpuThreads = (output \"sh\" \"-c\" \"lscpu --online --parse | grep --invert-match '^#' | wc --lines\") | trim | atoi }}\n{{- else if eq .chezmoi.os \"windows\" }}\n{{-   $cpuCores = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores\") | trim | atoi }}\n{{-   $cpuThreads = (output \"powershell.exe\" \"-NoProfile\" \"-NonInteractive\" \"-Command\" \"(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors\") | trim | atoi }}\n{{- end }}\n</code></pre> <p>Example</p> ~/.local/share/chezmoi/.chezmoi.toml.tmpl<pre><code>[data.cpu]\ncores = {{ $cpuCores }}\nthreads = {{ $cpuThreads }}\n</code></pre> ~/.local/share/chezmoi/is_hyperthreaded.txt.tmpl<pre><code>{{- if gt .cpu.threads .cpu.cores -}}\nHyperthreaded!\n{{- else -}}\nNot hyperthreaded!\n{{- end -}}\n</code></pre>"},{"location":"user-guide/machines/linux/","title":"Linux","text":""},{"location":"user-guide/machines/linux/#combine-operating-system-and-linux-distribution-conditionals","title":"Combine operating system and Linux distribution conditionals","text":"<p>There can be as much variation between Linux distributions as there is between operating systems. Due to <code>text/template</code>'s eager evaluation of conditionals, this means you often have to write templates with nested conditionals:</p> <pre><code>{{ if eq .chezmoi.os \"darwin\" }}\n# macOS-specific code\n{{ else if eq .chezmoi.os \"linux\" }}\n{{   if eq .chezmoi.osRelease.id \"debian\" }}\n# Debian-specific code\n{{   else if eq .chezmoi.osRelease.id \"fedora\" }}\n# Fedora-specific code\n{{   end }}\n{{ end }}\n</code></pre> <p>This can be simplified by combining the operating system and distribution into a single custom template variable. Put the following in your configuration file template:</p> <pre><code>{{- $osid := .chezmoi.os -}}\n{{- if hasKey .chezmoi.osRelease \"id\" -}}\n{{-   $osid = printf \"%s-%s\" .chezmoi.os .chezmoi.osRelease.id -}}\n{{- end -}}\n\n[data]\n    osid = {{ $osid | quote }}\n</code></pre> <p>This defines the <code>.osid</code> template variable to be <code>{{ .chezmoi.os }}</code> on machines without an <code>os-release</code> file, or to be <code>{{ .chezmoi.os }}-{{ .chezmoi.osRelease.id }}</code> on machines with an <code>os-release</code> file.</p> <p>You can then simplify your conditionals to be:</p> <pre><code>{{ if eq .osid \"darwin\" }}\n# macOS-specific code\n{{ else if eq .osid \"linux-debian\" }}\n# Debian-specific code\n{{ else if eq .osid \"linux-fedora\" }}\n# Fedora-specific code\n{{ end }}\n</code></pre>"},{"location":"user-guide/machines/macos/","title":"macOS","text":""},{"location":"user-guide/machines/macos/#use-brew-bundle-to-manage-your-brews-and-casks","title":"Use <code>brew bundle</code> to manage your brews and casks","text":"<p>Homebrew's <code>brew bundle</code> subcommand allows you to specify a list of brews and casks to be installed. You can integrate this with chezmoi by creating a <code>run_once_</code> script. For example, create a file in your source directory called <code>run_once_before_install-packages-darwin.sh.tmpl</code> containing:</p> <pre><code>{{- if eq .chezmoi.os \"darwin\" -}}\n#!/bin/bash\n\nbrew bundle --no-lock --file=/dev/stdin &lt;&lt;EOF\nbrew \"git\"\ncask \"google-chrome\"\nEOF\n{{ end -}}\n</code></pre> <p>Note</p> <p>The <code>Brewfile</code> is embedded directly in the script with a bash here document. chezmoi will run this script whenever its contents change, i.e. when you add or remove brews or casks.</p>"},{"location":"user-guide/machines/macos/#determine-the-hostname","title":"Determine the hostname","text":"<p>The result of the <code>hostname</code> command on macOS depends on the network that the machine is connected to. For a stable result, use the <code>scutil</code> command:</p> <pre><code>{{ $computerName := output \"scutil\" \"--get\" \"ComputerName\" | trim }}\n</code></pre>"},{"location":"user-guide/machines/windows/","title":"Windows","text":""},{"location":"user-guide/machines/windows/#detect-windows-subsystem-for-linux-wsl","title":"Detect Windows Subsystem for Linux (WSL)","text":"<p>WSL can be detected by looking for the string <code>Microsoft</code> or <code>microsoft</code> in <code>/proc/sys/kernel/osrelease</code>, which is available in the template variable <code>.chezmoi.kernel.osrelease</code>, for example:</p> <pre><code>{{ if eq .chezmoi.os \"linux\" }}\n{{   if (.chezmoi.kernel.osrelease | lower | contains \"microsoft\") }}\n# WSL-specific code\n{{   end }}\n{{ end }}\n</code></pre>"},{"location":"user-guide/machines/windows/#run-a-powershell-script-as-admin-on-windows","title":"Run a PowerShell script as admin on Windows","text":"<p>Put the following at the top of your script:</p> <pre><code># Self-elevate the script if required\nif (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {\n  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {\n    $CommandLine = \"-NoExit -File `\"\" + $MyInvocation.MyCommand.Path + \"`\" \" + $MyInvocation.UnboundArguments\n    Start-Process -Wait -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine\n    Exit\n  }\n}\n</code></pre> <p>If you use gsudo, it has tips on writing self-elevating scripts.</p>"},{"location":"user-guide/machines/windows/#notes-on-running-elevated-scripts","title":"Notes on running elevated scripts","text":"<p>However you decide to run a script in an elevated prompt, as soon as the non-elevated script returns, chezmoi will move to the next step in its processing (running more scripts, creating files, etc.). Ensure that the elevated script completes before the non-elevated script exits, or subsequent steps may not run as expected. In the example above, this is accomplished by passing <code>-Wait</code> to PowerShell's <code>Start-Process</code> cmdlet.</p> <p>Note that by including <code>-NoExit</code> in <code>$CommandLine</code>, the new (elevated) PowerShell process/window will not exit automatically on completion. This means you'll need to close the new window by hand for chezmoi to continue its steps. If this manual intervention is desired, it would be convenient to print a message as the script's last command to indicate completion for you to safely close the elevated window. If you want no manual intervention, you can remove <code>-NoExit</code> from <code>$CommandLine</code>, but then you likely won\u2019t see the output of the elevated script, which will make it more difficult to determine if something went wrong during its execution.</p>"},{"location":"user-guide/password-managers/","title":"Password manager integration","text":"<p>Template functions allow you to retrieve secrets from many popular password managers. Using a password manager allows you to keep all your secrets in one place, make your dotfiles repo public, and synchronize changes to secrets across multiple machines.</p>"},{"location":"user-guide/password-managers/1password/","title":"1Password","text":"<p>chezmoi includes support for 1Password using the 1Password CLI to expose data as a template function.</p> <p>Log in and get a session using:</p> <pre><code>$ op account add --address $SUBDOMAIN.1password.com --email $EMAIL\n$ eval $(op signin --account $SUBDOMAIN)\n</code></pre> <p>This is not necessary if you are using biometric authentication.</p> <p>The output of <code>op read $URL</code> is available as the <code>onepasswordRead</code> template function, for example:</p> <pre><code>{{ onepasswordRead \"op://app-prod/db/password\" }}\n</code></pre> <p>returns the output of</p> <pre><code>$ op read op://app-prod/db/password\n</code></pre> <p>Documents can be retrieved with:</p> <pre><code>{{- onepasswordDocument \"$UUID\" -}}\n</code></pre> <p>The output of <code>op item get $UUID--format json</code> (<code>op get item $UUID</code>) is available as the <code>onepassword</code> template function. chezmoi parses the JSON output and returns it as structured data. For example, if the output is:</p> <pre><code>{\n  \"id\": \"$UUID\",\n  \"title\": \"$TITLE\",\n  \"version\": 2,\n  \"vault\": {\n    \"id\": \"$vaultUUID\"\n  },\n  \"category\": \"LOGIN\",\n  \"last_edited_by\": \"$userUUID\",\n  \"created_at\": \"2010-08-23T13:18:43Z\",\n  \"updated_at\": \"2014-07-20T04:40:11Z\",\n  \"fields\": [\n    {\n      \"id\": \"username\",\n      \"type\": \"STRING\",\n      \"purpose\": \"USERNAME\",\n      \"label\": \"username\",\n      \"value\": \"$USERNAME\"\n    },\n    {\n      \"id\": \"password\",\n      \"type\": \"CONCEALED\",\n      \"purpose\": \"PASSWORD\",\n      \"label\": \"password\",\n      \"value\": \"$PASSWORD\",\n      \"password_details\": {\n        \"strength\": \"FANTASTIC\",\n        \"history\": []\n      }\n    }\n  ],\n  \"urls\": [\n    {\n      \"primary\": true,\n      \"href\": \"$URL\"\n    }\n  ]\n}\n</code></pre> <p>Then you can access the password field with the syntax</p> <pre><code>{{ (index (onepassword \"$UUID\").fields 1).value }}\n</code></pre> <p>or:</p> <pre><code>{{ range (onepassword \"$UUID\").fields -}}\n{{   if and (eq .label \"password\") (eq .purpose \"PASSWORD\") -}}\n{{     .value -}}\n{{   end -}}\n{{ end }}\n</code></pre> <p>Info</p> <p>1Password CLI 1.x returns a simpler structure:</p> <pre><code>{\n  \"uuid\": \"$UUID\",\n  \"details\": {\n    \"password\": \"$PASSWORD\"\n  }\n}\n</code></pre> <p>This allows for the syntax:</p> <pre><code>{{ (onepassword \"$UUID\").details.password }}\n</code></pre> <p><code>onepasswordDetailsFields</code> returns a reworked version of the structure that allows the fields to be queried by key:</p> <pre><code>{\n  \"password\": {\n    \"id\": \"password\",\n    \"label\": \"password\",\n    \"password_details\": {\n      \"history\": [],\n      \"strength\": \"FANTASTIC\"\n    },\n    \"purpose\": \"PASSWORD\",\n    \"type\": \"CONCEALED\",\n    \"value\": \"$PASSWORD\"\n  },\n  \"username\": {\n    \"id\": \"username\",\n    \"label\": \"username\",\n    \"purpose\": \"USERNAME\",\n    \"type\": \"STRING\",\n    \"value\": \"$USERNAME\"\n  }\n}\n</code></pre> <pre><code>{{- (onepasswordDetailsFields \"$UUID\").password.value }}\n</code></pre> <p>Additional fields may be obtained with <code>onepasswordItemFields</code>; not all objects in 1Password have item fields. This can be tested with:</p> <pre><code>$ chezmoi execute-template \"{{ onepasswordItemFields \\\"$UUID\\\" | toJson }}\" | jq .\n</code></pre> <p>Note</p> <p>The extra <code>-</code> after the opening <code>{{</code> and before the closing <code>}}</code> instructs the template language to remove any whitespace before and after the substitution. This removes any trailing newline added by your editor when saving the template.</p>"},{"location":"user-guide/password-managers/1password/#sign-in-prompt","title":"Sign-in prompt","text":"<p>chezmoi will verify the availability and validity of a session token in the current environment. If it is missing or expired, you will be interactively prompted to sign-in again.</p> <p>In the past chezmoi used to simply exit with an error when no valid session was available. If you'd like to restore this behavior, set the <code>onepassword.prompt</code> configuration variable to <code>false</code>, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[onepassword]\n    prompt = false\n</code></pre> <p>Danger</p> <p>Do not use prompt on shared machines. A session token verified or acquired interactively will be passed to the 1Password CLI through a command line parameter, which is visible to other users of the same system.</p>"},{"location":"user-guide/password-managers/aws-secrets-manager/","title":"AWS Secrets Manager","text":"<p>chezmoi includes support for AWS Secrets Manager.</p> <p>Structured data can be retrieved with the <code>awsSecretsManager</code> template function, for example:</p> <pre><code>exampleUsername = {{ (awsSecretsManager \"my-secret-name\").username }}\nexamplePassword = {{ (awsSecretsManager \"my-secret-name\").password }}\n</code></pre> <p>For retrieving unstructured data, the <code>awsSecretsManagerRaw</code> template function can be used. For example:</p> <pre><code>exampleSecretString = {{ awsSecretsManagerRaw \"my-secret-string\" }}\n</code></pre> <p>The AWS shared profile name and region can be specified in chezmoi's config file with <code>awsSecretsManager.profile</code> and <code>awsSecretsManager.region</code> respectively. By default, these values will be picked up from the standard environment variables and config files used by the standard AWS tooling.</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[awsSecretsManager]\n    profile = myWorkProfile\n    region = us-east-2\n</code></pre>"},{"location":"user-guide/password-managers/azure-key-vault/","title":"Azure Key Vault","text":"<p>chezmoi includes support for Azure Key Vault secrets.</p> <p>A default Azure Key Vault name can be set in <code>~/.config/chezmoi/chezmoi.toml</code> with <code>azureKeyVault.defaultVault</code>.</p> <p>Ensure Azure CLI is installed and log in. The logged in user must have the <code>Key Vault Secrets User</code> RBAC role on the Azure Key Vault resource.</p> <p>Alternatively, use alternate authentication options.</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[azureKeyVault]\n  defaultVault = \"contoso-vault2\"\n</code></pre> <p>A secret value can be retrieved with the <code>azureKeyVault</code> template function.</p> <p>Retrieve the secret <code>my-secret-name</code> from the default configured vault.</p> <pre><code>exampleSecret = {{ azureKeyVault \"my-secret-name\" }}\n</code></pre> <p>Retrieve the secret <code>my-secret-name</code> from the vault named <code>contoso-vault2</code>.</p> <pre><code>exampleSecret = {{ azureKeyVault \"my-secret-name\" \"contoso-vault2\" }}\n</code></pre> <p>It is also possible to define an alias in the configuration file for an additional vault.</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[data]\n  vault42 = \"contoso-vault42\"\n\n[azureKeyVault]\n  defaultVault = \"contoso-vault2\"\n</code></pre> <p>Retrieve the secret <code>my-secret-name</code> from the vault named <code>contoso-vault42</code> through the alias.</p> <pre><code>exampleSecret = {{ azureKeyVault \"my-secret-name\" .vault42 }}\n</code></pre>"},{"location":"user-guide/password-managers/bitwarden/","title":"Bitwarden","text":"<p>chezmoi includes support for Bitwarden using the Bitwarden CLI (<code>bw</code>), Bitwarden Secrets CLI (<code>bws</code>), and <code>rbw</code> commands to expose data as a template function.</p>"},{"location":"user-guide/password-managers/bitwarden/#bitwarden-cli","title":"Bitwarden CLI","text":"<p>Log in to Bitwarden using a normal method</p> <pre><code>$ bw login $BITWARDEN_EMAIL # or\n$ bw login --apikey # or\n$ bw login --sso\n</code></pre> <p>If required, unlock your Bitwarden vault (API key and SSO logins always require an explicit unlock step):</p> <pre><code>$ bw unlock\n</code></pre> <p>Set the <code>BW_SESSION</code> environment variable, as instructed.</p> <p>Bitwarden Session One-liner</p> <p>The <code>BW_SESSION</code> value can be set directly. The exact combination differs based on whether you are currently logged into Bitwarden and how you log into Bitwarden.</p> <pre><code>$ # You are already logged in with any method\n$ export BW_SESSION=$(bw unlock --raw)\n$ # You are not logged in and log in with an email\n$ export BW_SESSION=$(bw login $BITWARDEN_EMAIL --raw)\n$ # You are not logged in and login with SSO or API key\n$ export BW_SESSION=$(bw login --sso &amp;&amp; bw unlock --raw)\n</code></pre> <p>The structured data from <code>bw get</code> is available as the <code>bitwarden</code> template function in your config files, for example:</p> <pre><code>username = {{ (bitwarden \"item\" \"example.com\").login.username }}\npassword = {{ (bitwarden \"item\" \"example.com\").login.password }}\n</code></pre> <p>Custom fields can be accessed with the <code>bitwardenFields</code> template function. For example, if you have a custom field named <code>token</code> you can retrieve its value with:</p> <pre><code>{{ (bitwardenFields \"item\" \"example.com\").token.value }}\n</code></pre> <p>Attachments can be accessed with the <code>bitwardenAttachment</code> and <code>bitwardenAttachmentByRef</code> template function. For example, if you have an attachment named <code>id_rsa</code>, you can retrieve its value with:</p> <pre><code>{{ bitwardenAttachment \"id_rsa\" \"bf22e4b4-ae4a-4d1c-8c98-ac620004b628\" }}\n</code></pre> <p>or</p> <pre><code>{{ bitwardenAttachmentByRef \"id_rsa\" \"item\" \"example.com\" }}\n</code></pre>"},{"location":"user-guide/password-managers/bitwarden/#bitwarden-secrets-cli","title":"Bitwarden Secrets CLI","text":"<p>Generate an access token for a specific service account.</p> <p>Either set the <code>BWS_ACCESS_TOKEN</code> environment variable or store the access token in a template variable, e.g.</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[data]\n    accessToken = \"0.48c78342-1635-48a6-accd-afbe01336365.C0tMmQqHnAp1h0gL8bngprlPOYutt0:B3h5D+YgLvFiQhWkIq6Bow==\"\n</code></pre> <p>You can then retrieve secrets using the <code>bitwardenSecrets</code> template function, for example:</p> <pre><code>{{ (bitwardenSecrets \"be8e0ad8-d545-4017-a55a-b02f014d4158\" .accessToken).value }}\n</code></pre>"},{"location":"user-guide/password-managers/custom/","title":"Custom","text":"<p>You can use any command line tool that outputs secrets either as a string or in JSON format. Choose the binary by setting <code>secret.command</code> in your configuration file. You can then invoke this command with the <code>secret</code> and <code>secretJSON</code> template functions which return the raw output and JSON-decoded output respectively. All of the above secret managers can be supported in this way:</p> Secret Manager <code>secret.command</code> Template skeleton 1Password <code>op</code> <code>{{ secretJSON \"get\" \"item\" \"$ID\" }}</code> Bitwarden <code>bw</code> <code>{{ secretJSON \"get\" \"$ID\" }}</code> Doppler <code>doppler</code> <code>{{ secretJSON \"secrets\" \"download\" \"--json\" \"--no-file\" }}</code> HashiCorp Vault <code>vault</code> <code>{{ secretJSON \"kv\" \"get\" \"-format=json\" \"$ID\" }}</code> HCP Vault Secrets <code>vlt</code> <code>{{ secret \"secrets\" \"get\" \"--plaintext\" \"$ID }}</code> LastPass <code>lpass</code> <code>{{ secretJSON \"show\" \"--json\" \"$ID\" }}</code> KeePassXC <code>keepassxc-cli</code> Not possible (interactive command only) Keeper <code>keeper</code> <code>{{ secretJSON \"get\" \"--format=json\" \"$ID\" }}</code> pass <code>pass</code> <code>{{ secret \"show\" \"$ID\" }}</code> passhole <code>ph</code> <code>{{ secret \"$ID\" \"password\" }}</code>"},{"location":"user-guide/password-managers/dashlane/","title":"Dashlane","text":"<p>chezmoi includes support for Dashlane.</p> <p>Structured data can be retrieved with the <code>dashlanePassword</code> template function, for example:</p> <pre><code>examplePassword = {{ (index (dashlanePassword \"filter\") 0).password }}\n</code></pre> <p>Secure notes can be retrieved with the <code>dashlaneNote</code> template function, for example:</p> <pre><code>exampleNote = {{ dashlaneNote \"filter\" }}\n</code></pre>"},{"location":"user-guide/password-managers/doppler/","title":"Doppler","text":"<p>chezmoi includes support for Doppler using the <code>doppler</code> CLI to expose data through the <code>doppler</code> and <code>dopplerProjectJson</code> template functions.</p> <p>Warning</p> <p>Doppler is in beta and chezmoi's interface to it may change. Note: Doppler only supports secrets in the <code>UPPER_SNAKE_CASE</code> format.</p> <p>Log in using:</p> <pre><code>$ doppler login\n</code></pre> <p>It is now possible to interact with the <code>doppler</code> CLI in two different, but similar, ways. Both make use of the command <code>doppler secrets download --json --no-file</code> behind the scenes but present a different experience.</p> <p>The <code>doppler</code> function is used in the following way: <pre><code>{{ doppler \"SECRET_NAME\" \"project name\" \"config\" }}\n</code></pre></p> <p>All secrets from the specified project/config combination are cached for subsequent access and will not requery the <code>doppler</code> CLI for another secret in the same project/config. This caching mechanism enhances performance and reduces unnecessary CLI calls.</p> <p>The <code>dopplerProjectJson</code> presents the secrets as <code>json</code> structured data and is used in the following way: <pre><code>{{ (dopplerProjectJson \"project\" \"config\").PASSWORD }}\n</code></pre></p> <p>Additionally one can set the default values for the project and config (aka environment) in your config file, for example:</p> <p>~/.config/chezmoi/chezmoi.toml<pre><code>[doppler]\n    project = \"my-project\"\n    config = \"dev\"\n</code></pre> With these default values, you can omit them in the call to both <code>doppler</code> and <code>dopplerProjectJson</code>, for example: <pre><code>{{ doppler \"SECRET_NAME\" }}\n{{ dopplerProjectJson.SECRET_NAME }}\n</code></pre></p> <p>It is important to note that neither of the above parse any individual secret as <code>json</code>. This can be achieved by using the <code>fromJson</code> function, for example: <pre><code>{{ (doppler \"SECRET_NAME\" | fromJson).created_by.email_address }}\n{{ (dopplerProjectJson.SECRET_NAME | fromJson).created_by.email_address }}\n</code></pre> Obviously the secret would have to be saved in <code>json</code> format for this to work as expected.</p>"},{"location":"user-guide/password-managers/ejson/","title":"ejson","text":"<p>chezmoi includes support for ejson.</p> <p>Structured data can be retrieved with the <code>ejsonDecrypt</code> template function, for example:</p> <pre><code>examplePassword = {{ (ejsonDecrypt \"my-secrets.ejson\").password }}\n</code></pre> <p>If you want to specify the private key to use for the decryption, structured data can be retrieved with the <code>ejsonDecryptWithKey</code> template function, for example:</p> <pre><code>examplePassword = {{ (ejsonDecryptWithKey \"my-secrets.ejson\" \"top-secret-key\").password }}\n</code></pre>"},{"location":"user-guide/password-managers/gopass/","title":"gopass","text":"<p>chezmoi includes support for gopass using the gopass CLI.</p> <p>The first line of the output of <code>gopass show $PASS_NAME</code> is available as the <code>gopass</code> template function, for example:</p> <pre><code>{{ gopass \"$PASS_NAME\" }}\n</code></pre>"},{"location":"user-guide/password-managers/hcp-vault-secrets/","title":"HCP Vault Secrets","text":"<p>chezmoi includes support for HCP Vault Secrets using the <code>vlt</code> CLI to expose data through the <code>hcpVaultSecret</code> and <code>hcpVaultSecretJson</code> template functions.</p> <p>Warning</p> <p>HCP Vault Secrets is in beta and chezmoi's interface to it may change.</p> <p>Log in using:</p> <pre><code>$ vlt login\n</code></pre> <p>The output of the <code>vlt secrets get --plaintext $SECRET_NAME</code> is available as the <code>hcpVaultSecret</code> function, for example:</p> <pre><code>{{ hcpVaultSecret \"secret_name\" \"application_name\" \"project_id\" \"organization_id\" }}\n</code></pre> <p>You can set the default values for the application name, project ID, and organization ID in your config file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[hcpVaultSecrets]\n    organizationId = \"bf479eab-a292-4b46-92df-e22f5c47eadc\"\n    projectId = \"5907a2fa-d26a-462a-8705-74dfe967e87d\"\n    applicationName = \"my-application\"\n</code></pre> <p>With these default values, you can omit them in the call to <code>hcpVaultSecret</code>, for example:</p> <pre><code>{{ hcpVaultSecret \"secret_name\" }}\n{{ hcpVaultSecret \"other_secret_name\" \"other_application_name\" }}\n</code></pre> <p>Structured data from <code>vlt secrets get --format=json $SECRET_NAME</code> is available as the <code>hcpVaultSecretJson</code> template function, for example:</p> <pre><code>{{ (hcpVaultSecretJson \"secret_name\").created_by.email }}\n</code></pre>"},{"location":"user-guide/password-managers/keepassxc/","title":"KeePassXC","text":"<p>chezmoi includes support for KeePassXC using the KeePassXC CLI (<code>keepassxc-cli</code>) to expose data as a template function.</p> <p>Provide the path to your KeePassXC database in your configuration file:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[keepassxc]\n    database = \"/home/user/Passwords.kdbx\"\n</code></pre> <p>The structured data from <code>keepassxc-cli show $database</code> is available as the <code>keepassxc</code> template function in your config files, for example:</p> <pre><code>username = {{ (keepassxc \"example.com\").UserName }}\npassword = {{ (keepassxc \"example.com\").Password }}\n</code></pre> <p>Additional attributes are available through the <code>keepassxcAttribute</code> function. For example, if you have an entry called <code>SSH Key</code> with an additional attribute called <code>private-key</code>, its value is available as:</p> <pre><code>{{ keepassxcAttribute \"SSH Key\" \"private-key\" }}\n</code></pre> <p>Info</p> <p>The KeePassXC CLI does not currently support any persistent login, which means that you will have to enter your password every time you run chezmoi.</p> <p>Support for non-password authentication methods (e.g. YubiKey) is currently poor. For more information, see this GitHub issue.</p>"},{"location":"user-guide/password-managers/keeper/","title":"Keeper","text":"<p>chezmoi includes support for Keeper using the Commander CLI to expose data as a template function.</p> <p>Create a persistent login session as described in the Command CLI documentation.</p> <p>Passwords can be retrieved with the <code>keeperFindPassword</code> template function, for example:</p> <pre><code>examplePasswordFromPath = {{ keeperFindPassword \"$PATH\" }}\nexamplePasswordFromUid = {{ keeperFindPassword \"$UID\" }}\n</code></pre> <p>For retrieving more complex data, use the <code>keeper</code> template function with a UID to retrieve structured data from <code>keeper get</code> or the <code>keeperDataFields</code> template function which restructures the output of <code>keeper get</code> in to a more convenient form, for example:</p> <pre><code>keeperDataTitle = {{ (keeper \"$UID\").data.title }}\nexamplePassword = {{ index (keeperDataFields \"$UID\").password 0 }}\n</code></pre> <p>Extra arguments can be passed to the Keeper CLI command by setting the <code>keeper.args</code> variable in chezmoi's config file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[keeper]\n    args = [\"--config\", \"/path/to/config.json\"]\n</code></pre>"},{"location":"user-guide/password-managers/keychain-and-windows-credentials-manager/","title":"Keychain and Windows Credentials Manager","text":"<p>chezmoi includes support for Keychain (on macOS), GNOME Keyring (on Linux and FreeBSD), and Windows Credentials Manager (on Windows) via the <code>zalando/go-keyring</code> library.</p> <p>Set values with:</p> <pre><code>$ chezmoi secret keyring set --service=$SERVICE --user=$USER\nValue: xxxxxxxx\n</code></pre> <p>The value can then be used in templates using the <code>keyring</code> function which takes the service and user as arguments.</p> <p>For example, save a GitHub access token in keyring with:</p> <pre><code>$ chezmoi secret keyring set --service=github --user=$GITHUB_USERNAME\nValue: xxxxxxxx\n</code></pre> <p>and then include it in your <code>~/.gitconfig</code> file with:</p> <pre><code>[github]\n    user = {{ .github.user | quote }}\n    token = {{ keyring \"github\" .github.user | quote }}\n</code></pre> <p>You can query the keyring from the command line:</p> <pre><code>$ chezmoi secret keyring get --service=github --user=$GITHUB_USERNAME\n</code></pre>"},{"location":"user-guide/password-managers/lastpass/","title":"LastPass","text":"<p>chezmoi includes support for LastPass using the LastPass CLI to expose data as a template function.</p> <p>Log in to LastPass using:</p> <pre><code>$ lpass login $LASTPASS_USERNAME\n</code></pre> <p>Check that <code>lpass</code> is working correctly by showing password data:</p> <pre><code>$ lpass show --json $LASTPASS_ENTRY_ID\n</code></pre> <p>where <code>$LASTPASS_ENTRY_ID</code> is a LastPass Entry Specification.</p> <p>The structured data from <code>lpass show --json id</code> is available as the <code>lastpass</code> template function. The value will be an array of objects. You can use the <code>index</code> function and <code>.Field</code> syntax of the <code>text/template</code> language to extract the field you want. For example, to extract the <code>password</code> field from first the \"GitHub\" entry, use:</p> <pre><code>githubPassword = {{ (index (lastpass \"GitHub\") 0).password | quote }}\n</code></pre> <p>chezmoi automatically parses the <code>note</code> value of the LastPass entry as colon-separated key-value pairs, so, for example, you can extract a private SSH key like this:</p> <pre><code>{{ (index (lastpass \"SSH\") 0).note.privateKey }}\n</code></pre> <p>Keys in the <code>note</code> section written as <code>CamelCase Words</code> are converted to <code>camelCaseWords</code>.</p> <p>If the <code>note</code> value does not contain colon-separated key-value pairs, then you can use <code>lastpassRaw</code> to get its raw value, for example:</p> <pre><code>{{ (index (lastpassRaw \"SSH Private Key\") 0).note }}\n</code></pre>"},{"location":"user-guide/password-managers/pass/","title":"pass","text":"<p>chezmoi includes support for pass using the pass CLI.</p> <p>The first line of the output of <code>pass show $PASS_NAME</code> is available as the <code>pass</code> template function, for example:</p> <pre><code>{{ pass \"$PASS_NAME\" }}\n</code></pre>"},{"location":"user-guide/password-managers/passhole/","title":"Passhole","text":"<p>chezmoi includes support for KeePass using the passhole CLI (<code>ph</code>) to expose data as a template function.</p>"},{"location":"user-guide/password-managers/vault/","title":"Vault","text":"<p>chezmoi includes support for Vault using the Vault CLI to expose data as a template function.</p> <p>The vault CLI needs to be correctly configured on your machine, e.g. the <code>VAULT_ADDR</code> and <code>VAULT_TOKEN</code> environment variables must be set correctly. Verify that this is the case by running:</p> <pre><code>$ vault kv get -format=json $KEY\n</code></pre> <p>The structured data from <code>vault kv get -format=json</code> is available as the <code>vault</code> template function. You can use the <code>.Field</code> syntax of the <code>text/template</code> language to extract the data you want. For example:</p> <pre><code>{{ (vault \"$KEY\").data.data.password }}\n</code></pre>"},{"location":"user-guide/tools/diff/","title":"Diff","text":""},{"location":"user-guide/tools/diff/#use-a-custom-diff-tool","title":"Use a custom diff tool","text":"<p>By default, chezmoi uses a built-in diff. You can use a custom tool by setting the <code>diff.command</code> and <code>diff.args</code> configuration variables. The elements of <code>diff.args</code> are interpreted as templates with the variables <code>.Destination</code> and <code>.Target</code> containing filenames of the file in the destination state and the target state respectively. For example, to use meld, specify:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[diff]\n    command = \"meld\"\n    args = [\"--diff\", \"{{ .Destination }}\", \"{{ .Target }}\"]\n</code></pre> <p>Hint</p> <p>If you generate your config file from a config file template, then you'll need to escape the <code>{{</code> and <code>}}</code> as <code>{{ \"{{\" }}</code> and <code>{{ \"}}\" }}</code>. That way your generated config file contains the <code>{{</code> and <code>}}</code> you expect.</p>"},{"location":"user-guide/tools/diff/#dont-show-scripts-in-the-diff-output","title":"Don't show scripts in the diff output","text":"<p>By default, <code>chezmoi diff</code> will show all changes, including the contents of scripts that will be run. You can exclude scripts from the diff output by setting the <code>diff.exclude</code> configuration variable in your configuration file, for example:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[diff]\n    exclude = [\"scripts\"]\n</code></pre>"},{"location":"user-guide/tools/diff/#dont-show-externals-in-the-diff-output","title":"Don't show externals in the diff output","text":"<p>To exclude diffs from externals, either pass the <code>--exclude=externals</code> flag or set <code>diff.exclude</code> to <code>[\"externals\"]</code> in your config file.</p>"},{"location":"user-guide/tools/diff/#customize-the-diff-pager","title":"Customize the diff pager","text":"<p>You can change the diff format, and/or pipe the output into a pager of your choice by setting <code>diff.pager</code> configuration variable. For example, to use <code>diff-so-fancy</code> specify:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[diff]\n    pager = \"diff-so-fancy\"\n</code></pre> <p>The pager can be disabled using the <code>--no-pager</code> flag or by setting <code>diff.pager</code> to an empty string.</p>"},{"location":"user-guide/tools/diff/#show-human-friendly-diffs-for-binary-files","title":"Show human-friendly diffs for binary files","text":"<p>Similar to git, chezmoi includes a \"textconv\" feature that can transform file contents before passing them to the diff program. This is primarily useful for generating human-readable diffs of binary files.</p> <p>For example, to show diffs of macOS <code>.plist</code> files, add the following to your configuration file:</p> JSONTOMLYAML ~/.config/chezmoi/chezmoi.json<pre><code>{\n    \"textconv\": [\n        \"pattern\": \"**/*.plist\",\n        \"command\": \"plutil\",\n        \"args\": [\n            \"-convert\",\n            \"xml1\",\n            \"-o\",\n            \"-\",\n            \"-\"\n        ]\n    ]\n}\n</code></pre> ~/.config/chezmoi/chezmoi.toml<pre><code>[[textconv]]\npattern = \"**/*.plist\"\ncommand = \"plutil\"\nargs = [\"-convert\", \"xml1\", \"-o\", \"-\", \"-\"]\n</code></pre> ~/.config/chezmoi/chezmoi.yaml<pre><code>textconv:\n- pattern: \"**/*.plist\"\n  command: \"plutil\"\n  args:\n  - \"-convert\"\n  - \"xml1\"\n  - \"-o\"\n  - \"-\",\n  - \"-\"\n</code></pre> <p>This will pipe all <code>.plist</code> files through <code>plutil -convert xml1 -o - -</code> before showing differences.</p>"},{"location":"user-guide/tools/editor/","title":"Editor","text":""},{"location":"user-guide/tools/editor/#use-your-preferred-editor-with-chezmoi-edit-and-chezmoi-edit-config","title":"Use your preferred editor with <code>chezmoi edit</code> and <code>chezmoi edit-config</code>","text":"<p>By default, chezmoi will use your preferred editor as defined by the <code>$VISUAL</code> or <code>$EDITOR</code> environment variables, falling back to a default editor depending on your operating system (<code>vi</code> on UNIX-like operating systems, <code>notepad.exe</code> on Windows).</p> <p>You can configure chezmoi to use your preferred editor by either setting the <code>$EDITOR</code> environment variable or setting the <code>edit.command</code> variable in your configuration file.</p> <p>The editor command must only return when you have finished editing the files. chezmoi will emit a warning if your editor command returns too quickly.</p> <p>In the specific case of using VSCode or Codium as your editor, you must pass the <code>--wait</code> flag, for example, in your shell config:</p> <pre><code>$ export EDITOR=\"code --wait\"\n</code></pre> <p>Or in chezmoi's configuration file:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[edit]\n    command = \"code\"\n    args = [\"--wait\"]\n</code></pre>"},{"location":"user-guide/tools/editor/#configure-vim-to-run-chezmoi-apply-whenever-you-save-a-dotfile","title":"Configure VIM to run <code>chezmoi apply</code> whenever you save a dotfile","text":"<p>Put the following in your <code>.vimrc</code>:</p> ~/.vimrc<pre><code>autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path \"%\"\n</code></pre>"},{"location":"user-guide/tools/editor/#use-chezmoi-with-emacs","title":"Use chezmoi with emacs","text":"<p><code>github.com/tuh8888/chezmoi.el</code> provides convenience functions for interacting with chezmoi from emacs, and is available in MELPA.</p>"},{"location":"user-guide/tools/http-or-socks5-proxy/","title":"HTTP or SOCKS5 proxy","text":"<p>chezmoi supports HTTP, HTTPS, and SOCKS5 proxies. Set the <code>HTTP_PROXY</code>, <code>HTTPS_PROXY</code>, and <code>NO_PROXY</code> environment variables, or their lowercase equivalents, for example:</p> <pre><code>$ HTTP_PROXY=socks5://127.0.0.1:1080 chezmoi apply --refresh-externals\n</code></pre>"},{"location":"user-guide/tools/merge/","title":"Merge","text":""},{"location":"user-guide/tools/merge/#use-a-custom-merge-command","title":"Use a custom merge command","text":"<p>By default, chezmoi uses <code>vimdiff</code>. You can use a custom command by setting the <code>merge.command</code> and <code>merge.args</code> configuration variables. The elements of <code>merge.args</code> are interpreted as templates with the variables <code>.Destination</code>, <code>.Source</code>, and <code>.Target</code> containing filenames of the file in the destination state, source state, and target state respectively. For example, to use neovim's diff mode, specify:</p> ~/.config/chezmoi/chezmoi.toml<pre><code>[merge]\n    command = \"nvim\"\n    args = [\"-d\", \"{{ .Destination }}\", \"{{ .Source }}\", \"{{ .Target }}\"]\n</code></pre> <p>Hint</p> <p>If you generate your config file from a config file template, then you'll need to escape the <code>{{</code> and <code>}}</code> as <code>{{ \"{{\" }}</code> and <code>{{ \"}}\" }}</code>. That way your generated config file contains the <code>{{</code> and <code>}}</code> you expect.</p>"}]}